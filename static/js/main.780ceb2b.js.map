{"version":3,"file":"static/js/main.780ceb2b.js","mappings":"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AAA,qDACH,CAtPD,CAAYA,KAAAA,GAA2B,KGKjC,MAAOyB,WAA8B7I,EA6DvC7a,WAAAA,CAAmBub,EACAN,EACAG,EACAM,EACAC,EACAX,EACA2I,EACAC,EACAC,GACfpjB,MAAM2a,EAAeJ,EAAeC,EAAUM,GAC9C5a,KAAK4a,UAAYA,EACjB5a,KAAK+a,eAAiBA,EACtB/a,KAAKgb,WAAaA,EAClBhb,KAAKmjB,qBAAuBH,EAC5BhjB,KAAKojB,4BAA8BH,EACnCjjB,KAAKqjB,aAAeH,CACxB,CAEO,sCAAOI,CAAgCC,GAC1C,YAAoC1hB,IAAhC0hB,EACOR,GAAsBS,yBAE1BT,GAAsBU,sCACzBV,GAAsBW,oCAAoCH,GAClE,CAEO,4CAAOE,CAAsCE,GAChD,OAAQA,GACJ,IAAK,2BACD,OAAO,IAAIZ,GACP1K,EAAeyC,MACf,EACA,IACA,IACA,EACA,EACA6I,EACAA,GACA,GACR,IAAK,+BACD,OAAO,IAAIZ,GACP1K,EAAeuL,MACf,EACA,KACA,IACA,GACA,EACAD,EACA,iCACA,GACR,IAAK,gCACD,OAAO,IAAIZ,GACP1K,EAAeuL,MACf,EACA,KACA,IACA,GACA,EACAD,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIZ,GACP1K,EAAewL,IACf,EACA,KACA,KACA,EACA,GACAF,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIZ,GACP1K,EAAewL,IACf,EACA,KACA,MACA,EACA,GACAF,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIZ,GACP1K,EAAewL,IACf,EACA,KACA,KACA,EACA,GACAF,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIZ,GACP1K,EAAewL,IACf,EACA,KACA,KACA,EACA,GACAF,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIZ,GACP1K,EAAewL,IACf,EACA,KACA,MACA,EACA,GACAF,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIZ,GACP1K,EAAewL,IACf,EACA,KACA,MACA,EACA,GACAF,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAIZ,GACP1K,EAAeyL,UACf,EACA,KACA,KACA,EACA,GACAH,EACAA,GACA,GAER,IAAK,2BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,IACA,KACA,EACA,GACAiJ,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,KACA,KACA,EACA,GACAiJ,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAIZ,GACP1K,EAAeyC,MACf,EACA,IACA,IACA,EACA,EACA6I,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,KACA,KACA,EACA,GACAiJ,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,KACA,KACA,EACA,GACAiJ,EACA,4BACA,GACR,IAAK,0BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,IACA,KACA,EACA,GACAiJ,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAIZ,GACP1K,EAAe0L,SACf,EACA,KACA,KACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAIZ,GACP1K,EAAe0L,SACf,EACA,KACA,KACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,KACA,KACA,EACA,GACAiJ,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,KACA,KACA,EACA,GACAiJ,EACA,4BACA,GACR,IAAK,kCACD,OAAO,IAAIZ,GACP1K,EAAewL,IACf,EACA,KACA,MACA,EACA,GACAF,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIZ,GACP1K,EAAewL,IACf,EACA,KACA,MACA,EACA,GACAF,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAIZ,GACP1K,EAAe0L,SACf,EACA,KACA,KACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAIZ,GACP1K,EAAe2L,UACf,EACA,KACA,IACA,EACA,GACAL,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAIZ,GACP1K,EAAe2L,UACf,EACA,KACA,IACA,EACA,GACAL,EACAA,GACA,GACR,IAAK,oCACD,OAAO,IAAIZ,GACP1K,EAAe2L,UACf,EACA,KACA,IACA,EACA,GACAL,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAIZ,GACP1K,EAAe4L,KACf,EACA,KACA,IACA,EACA,GACAN,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAIZ,GACP1K,EAAe4L,KACf,EACA,KACA,IACA,EACA,GACAN,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAIZ,GACP1K,EAAe4L,KACf,EACA,KACA,IACA,EACA,GACAN,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAIZ,GACP1K,EAAe6L,KACf,EACA,KACA,KACA,EACA,GACAP,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAIZ,GACP1K,EAAe6L,KACf,EACA,KACA,IACA,EACA,GACAP,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAIZ,GACP1K,EAAeyL,UACf,EACA,KACA,KACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,0BACD,OAAO,IAAIZ,GACP1K,EAAewC,KACf,EACA,IACA,IACA,EACA,EACA8I,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAIZ,GACP1K,EAAewC,KACf,EACA,IACA,IACA,EACA,EACA8I,EACA,2BACA,GACR,IAAK,6BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,MACA,MACA,EACA,GACAiJ,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,MACA,MACA,EACA,GACAiJ,EACA,8BACA,GACR,IAAK,6BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,MACA,MACA,EACA,GACAiJ,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAIZ,GACP1K,EAAeqC,IACf,EACA,MACA,MACA,EACA,GACAiJ,EACA,8BAC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","sources":["../node_modules/bent/src/browser.js","../node_modules/bent/src/core.js","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/esm-browser/native.js","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/esm-browser/rng.js","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/esm-browser/v4.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Guid.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/PlatformEvent.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Promise.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Contracts.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ConsoleLoggingListener.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Error.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/EventSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Events.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RiffPcmEncoder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/PCMRecorder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/AudioSourceEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/List.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Queue.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioStreamFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Stream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ChunkedArrayBufferStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/MicAudioSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/FileAudioSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PullAudioInputStreamCallback.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisOutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioInputStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/BackgroundError.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/SpeakerAudioDestination.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PushAudioOutputStreamCallback.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/OutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ResultReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioFileWriter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/KeywordRecognitionModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SessionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageUnderstandingModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationEventArgsBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyId.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ProfanityOption.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IConnection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationErrorCodes.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognitionEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyCollection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechTranslationConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ReplayableAudioNode.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Timeout.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceTelemetryListener.Internal.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognizerConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RequestSession.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DynamicGrammarBuilder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechContext.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AgentConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechDetected.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/HeaderNames.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionMessage.Internal.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceRecognizerBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveTokenAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Recognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionOpenResponse.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RawWebsocketMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketMessageAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketConnection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ProxyInfo.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/QueryParameterNames.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConnectionFactoryBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/WebsocketMessageFormatter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechHypothesis.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/Enums.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/EnumTranslation.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AddedLmIntent.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/IntentResponse.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileType.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationStatus.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/StringUtils.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Translations.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationHypothesis.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SynthesisAudioMetadata.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisWordBoundaryEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBookmarkEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisVisemeEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisTurn.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisContext.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisAdapterBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessageEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServiceEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Connection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/ActivityResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchDetails.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetailsBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetails.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PhraseListGrammar.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/BotFrameworkConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CustomCommandsConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogConnectorFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DialogEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ActivityReceivedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TurnStatusPayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TurnStatusReceivedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnState.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnStateManager.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechKeyword.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServicePropertyChannel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConnector.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/BaseAudioPlayer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfile.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileEnrollmentResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfilePhraseResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DeferralMap.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/VoiceServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileClient.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageIdMode.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerIdentificationModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerVerificationModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SourceLanguageConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestConfigBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorInterfaces.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestMessageAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationManager.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationExpirationEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationRequestSession.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationServiceAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ParticipantChangedReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/IParticipant.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Conversation.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriberConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationCommon.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslator.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriberConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriptionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConversationTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriptionServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriber.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Meeting.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/MeetingTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriptionServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/TranscriberRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesizerConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriber.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceInfo.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Synthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisRestAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisVoicesResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBoundaryType.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGradingSystem.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGranularity.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarVideoFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AvatarSynthesisAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarSynthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarWebRTCConnectionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Diagnostics.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/AudioWorkerUrl.ts","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/react-dom/client.js","../node_modules/react-dom/index.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/scheduler/index.js","../webpack/bootstrap","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/load script","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/jsonp chunk loading","../node_modules/tslib/tslib.es6.mjs","../node_modules/@azure/core-auth/src/tokenCredential.ts","../node_modules/@azure/abort-controller/src/AbortSignal.ts","../node_modules/@azure/abort-controller/src/AbortController.ts","../node_modules/@azure/core-rest-pipeline/src/util/helpers.ts","../node_modules/@azure/core-rest-pipeline/src/util/tokenCycler.ts","../node_modules/@azure/logger/src/debug.ts","../node_modules/@azure/logger/src/log.browser.ts","../node_modules/@azure/logger/src/index.ts","../node_modules/@azure/core-rest-pipeline/src/log.ts","../node_modules/@azure/core-rest-pipeline/src/policies/bearerTokenAuthenticationPolicy.ts","../node_modules/@azure/core-util/src/object.ts","../node_modules/@azure/core-rest-pipeline/src/util/sanitizer.ts","../node_modules/@azure/core-rest-pipeline/src/policies/logPolicy.ts","../node_modules/@azure/core-rest-pipeline/src/pipeline.ts","../node_modules/@azure/core-rest-pipeline/src/policies/redirectPolicy.ts","../node_modules/@azure/core-rest-pipeline/src/constants.ts","../node_modules/@azure/core-rest-pipeline/src/util/userAgent.ts","../node_modules/@azure/core-rest-pipeline/src/util/userAgentPlatform.browser.ts","../node_modules/@azure/core-rest-pipeline/src/policies/userAgentPolicy.ts","../node_modules/@azure/core-rest-pipeline/src/retryStrategies/throttlingRetryStrategy.ts","../node_modules/@azure/core-rest-pipeline/src/retryStrategies/exponentialRetryStrategy.ts","../node_modules/@azure/core-util/src/random.ts","../node_modules/@azure/core-rest-pipeline/src/policies/retryPolicy.ts","../node_modules/@azure/core-rest-pipeline/src/policies/defaultRetryPolicy.ts","../node_modules/@azure/core-rest-pipeline/src/policies/formDataPolicy.browser.ts","../node_modules/@azure/core-util/src/checkEnvironment.ts","../node_modules/@azure/core-rest-pipeline/src/policies/proxyPolicy.browser.ts","../node_modules/@azure/core-rest-pipeline/src/policies/setClientRequestIdPolicy.ts","../node_modules/@azure/core-rest-pipeline/src/policies/tlsPolicy.ts","../node_modules/@azure/core-tracing/src/tracingContext.ts","../node_modules/@azure/core-tracing/src/instrumenter.ts","../node_modules/@azure/core-util/src/error.ts","../node_modules/@azure/core-rest-pipeline/src/util/inspect.browser.ts","../node_modules/@azure/core-rest-pipeline/src/restError.ts","../node_modules/@azure/core-rest-pipeline/src/policies/tracingPolicy.ts","../node_modules/@azure/core-tracing/src/tracingClient.ts","../node_modules/@azure/core-rest-pipeline/src/createPipelineFromOptions.ts","../node_modules/@azure/core-rest-pipeline/src/policies/decompressResponsePolicy.browser.ts","../node_modules/@azure/core-rest-pipeline/src/httpHeaders.ts","../node_modules/@azure/core-rest-pipeline/src/fetchHttpClient.ts","../node_modules/@azure/core-rest-pipeline/src/defaultHttpClient.browser.ts","../node_modules/@azure-rest/core-client/src/apiVersionPolicy.ts","../node_modules/@azure-rest/core-client/src/keyCredentialAuthenticationPolicy.ts","../node_modules/@azure-rest/core-client/src/clientHelpers.ts","../node_modules/@azure/core-util/src/uuidUtils.native.ts","../node_modules/@azure/core-util/src/uuidUtils.browser.ts","../node_modules/@azure/core-rest-pipeline/src/pipelineRequest.ts","../node_modules/@azure-rest/core-client/src/helpers/getBinaryBody.ts","../node_modules/@azure-rest/core-client/src/sendRequest.ts","../node_modules/@azure-rest/core-client/src/helpers/isReadableStream.browser.ts","../node_modules/@azure-rest/core-client/src/urlHelpers.ts","../node_modules/@azure-rest/core-client/src/getClient.ts","../node_modules/@azure/openai/src/logger.ts","../node_modules/@azure/openai/src/rest/index.ts","../node_modules/@azure/openai/src/rest/openAIClient.ts","../node_modules/@azure-rest/core-client/src/operationOptionHelpers.ts","../node_modules/@azure/openai/src/rest/isUnexpected.ts","../node_modules/@azure/core-lro/src/logger.ts","../node_modules/@azure/core-lro/src/http/operation.ts","../node_modules/@azure/core-lro/src/poller/constants.ts","../node_modules/@azure/core-lro/src/poller/operation.ts","../node_modules/@azure/core-util/src/delay.ts","../node_modules/@azure/core-util/src/createAbortablePromise.ts","../node_modules/@azure/core-lro/src/poller/poller.ts","../node_modules/@azure/openai/src/rest/pollingHelper.ts","../node_modules/@azure/core-lro/src/http/poller.ts","../node_modules/@azure/openai/src/api/deserializers.ts","../node_modules/@azure/core-sse/src/sse.ts","../node_modules/@azure/openai/src/api/util.ts","../node_modules/@azure/openai/src/api/getSSEs.browser.ts","../node_modules/@azure/openai/src/api/oaiSse.ts","../node_modules/@azure/openai/src/api/policies/formDataPolicy.browser.ts","../node_modules/@azure/openai/src/api/operations.ts","../node_modules/@azure/openai/src/OpenAIClient.ts","../node_modules/@azure/openai/src/api/OpenAIContext.ts","../node_modules/@azure/openai/src/api/policies/nonAzure.ts","../node_modules/@azure/core-auth/src/azureKeyCredential.ts","App.js","reportWebVitals.js","index.js"],"sourcesContent":["'use strict'\n/* global fetch, btoa, Headers */\nconst core = require('./core')\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError)\n    }\n\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.status\n    this.res = res\n    this.json = res.json.bind(res)\n    this.text = res.text.bind(res)\n    this.arrayBuffer = res.arrayBuffer.bind(res)\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n    // match Node.js headers object\n    this.headers = {}\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  let parsed = new URL(_url)\n\n  if (!headers) headers = {}\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n\n  if (body) {\n    if (body instanceof ArrayBuffer ||\n      ArrayBuffer.isView(body) ||\n      typeof body === 'string'\n    ) {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body)\n      headers['Content-Type'] = 'application/json'\n    } else {\n      throw new Error('Unknown body type.')\n    }\n  }\n\n  _headers = new Headers({ ...(headers || {}), ..._headers })\n\n  const resp = await fetch(parsed, { method, headers: _headers, body })\n  resp.statusCode = resp.status\n\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp)\n  }\n\n  if (encoding === 'json') return resp.json()\n  else if (encoding === 'buffer') return resp.arrayBuffer()\n  else if (encoding === 'string') return resp.text()\n  else return resp\n}\n\nmodule.exports = core(mkrequest)\n","'use strict'\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst createGuid: () => string = (): string => uuid();\r\n\r\nconst createNoDashGuid: () => string = (): string => createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n\r\nexport { createGuid, createNoDashGuid };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n    None,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private privName: string;\r\n    private privEventId: string;\r\n    private privEventTime: string;\r\n    private privEventType: EventType;\r\n    private privMetadata: IStringDictionary<string>;\r\n\r\n    public constructor(eventName: string, eventType: EventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = { };\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get eventId(): string {\r\n        return this.privEventId;\r\n    }\r\n\r\n    public get eventTime(): string {\r\n        return this.privEventTime;\r\n    }\r\n\r\n    public get eventType(): EventType {\r\n        return this.privEventType;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    public constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize(): string {\r\n        return JSON.stringify(this, (key: any, value: { [k: string]: any }): any => {\r\n            if (value && typeof value === \"object\" && !Array.isArray(value)) {\r\n                const replacement: { [k: string ]: any } = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n    public synthesis: {\r\n        video: ISynthesisSectionVideo;\r\n    };\r\n\r\n    public constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    public constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.33.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    public constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    public constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n\r\nexport interface ICoordinate {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n// For avatar synthesis\r\nexport interface ISynthesisSectionVideo {\r\n    protocol: {\r\n        name: string;\r\n        webrtcConfig: {\r\n            clientDescription: string;\r\n            iceServers: {\r\n                urls: string[];\r\n                username: string;\r\n                credential: string;\r\n            }[];\r\n        };\r\n    };\r\n    format: {\r\n        bitrate: number;\r\n        codec: string;\r\n        crop: {\r\n            topLeft: ICoordinate;\r\n            bottomRight: ICoordinate;\r\n        };\r\n        resolution: {\r\n            width: number;\r\n            height: number;\r\n        };\r\n    };\r\n    talkingAvatar: {\r\n        character: string;\r\n        customized: boolean;\r\n        style: string;\r\n        background: {\r\n            color: string;\r\n        };\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    };\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    };\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    };\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    };\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    };\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    };\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve(result: T): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject(error: string): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on(\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void {\r\n\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = (): void => { };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback(result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e as string}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback(error: string, errorCallback: (error: string) => void): void {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e as string}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers(): void {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error ;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error as string);\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            // eslint-disable-next-line no-empty\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooLong(param: string, name: string, maxLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length > maxLength) {\r\n            throw new Error(\"throwIfNullOrTooLong:\" + name + \" (more than \" + maxLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooShort(param: string, name: string, minLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length < minLength) {\r\n            throw new Error(\"throwIfNullOrTooShort:\" + name + \" (less than \" + minLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: string, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n\r\n    public static throwIfNotUndefined(param: any, name: string): void {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports\";\r\nimport { Contracts } from \"../sdk/Contracts\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n    private privEnableConsoleOutput: boolean = true;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public set enableConsoleOutput(enableOutput: boolean) {\r\n        this.privEnableConsoleOutput = enableOutput;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            if (this.privEnableConsoleOutput) {\r\n                switch (event.eventType) {\r\n                    case LogLevel.Debug:\r\n                        // eslint-disable-next-line no-console\r\n                        console.debug(log);\r\n                        break;\r\n                    case LogLevel.Info:\r\n                        // eslint-disable-next-line no-console\r\n                        console.info(log);\r\n                        break;\r\n                    case LogLevel.Warning:\r\n                        // eslint-disable-next-line no-console\r\n                        console.warn(log);\r\n                        break;\r\n                    case LogLevel.Error:\r\n                        // eslint-disable-next-line no-console\r\n                        console.error(log);\r\n                        break;\r\n                    default:\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(log);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class Events {\r\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static setEventSource(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.privInstance = eventSource;\r\n    }\r\n\r\n    public static get instance(): IEventSource<PlatformEvent> {\r\n        return Events.privInstance;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode(actualAudioFrame: Float32Array): ArrayBuffer {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM(view: DataView, offset: number, input: Float32Array): void {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame(\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n    private privStopInputOnRelease: boolean;\r\n\r\n    public constructor(stopInputOnRelease: boolean) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n\r\n    public record(context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        const attachScriptProcessor = (): void => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            const scriptNode = (() => {\r\n                let bufferSize = 0;\r\n                try {\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                } catch (error) {\r\n                    // Webkit (<= version 31) requires a valid bufferSize.\r\n                    bufferSize = 2048;\r\n                    let audioSampleRate = context.sampleRate;\r\n                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                        bufferSize <<= 1;\r\n                        audioSampleRate >>= 1;\r\n                    }\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n            })();\r\n            scriptNode.onaudioprocess = (event: AudioProcessingEvent): void => {\r\n                const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n\r\n        const connectWorkletToMicInput = (context: AudioContext): void => {\r\n            const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n            workletNode.port.onmessage = (ev: MessageEvent): void => {\r\n                const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(workletNode);\r\n            workletNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: workletNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n        const skipAudioWorklet = !!this.privSpeechProcessorScript && this.privSpeechProcessorScript.toLowerCase() === \"ignore\";\r\n\r\n        if (!!context.audioWorklet && !skipAudioWorklet) {\r\n            /* eslint-disable-next-line */\r\n            const audioUrl = require(\"./AudioWorkerUrl\");\r\n            /* eslint-disable-next-line */\r\n            this.privSpeechProcessorScript = audioUrl.getAudioWorkerUrl();\r\n\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then((): void => {\r\n                    connectWorkletToMicInput(context);\r\n                })\r\n                .catch((): void => {\r\n                    const workletScript = `class SP extends AudioWorkletProcessor {\r\n                        constructor(options) {\r\n                        super(options);\r\n                        }\r\n                        process(inputs, outputs) {\r\n                        const input = inputs[0];\r\n                        const output = [];\r\n                        for (let channel = 0; channel < input.length; channel += 1) {\r\n                            output[channel] = input[channel];\r\n                        }\r\n                        this.port.postMessage(output[0]);\r\n                        return true;\r\n                        }\r\n                    }\r\n                    registerProcessor('speech-processor', SP);`;\r\n                    const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n                    this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n\r\n                    context.audioWorklet\r\n                        .addModule(this.privSpeechProcessorScript)\r\n                        .then((): void => {\r\n                            connectWorkletToMicInput(context);\r\n                        })\r\n                        .catch((): void => {\r\n                            attachScriptProcessor();\r\n                        });\r\n                });\r\n        } else {\r\n            try {\r\n                attachScriptProcessor();\r\n            } catch (err) {\r\n                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err as string}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources(context: AudioContext): void {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track: MediaStreamTrack): void => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private privAudioSourceId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\n\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(itemIndex: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first(): TItem {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last(): TItem {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add(item: TItem): void {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt(index: number, item: TItem): void {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt(index: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove(index: number, count: number): TItem[] {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded(addedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved(removedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed(disposedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join(seperator?: string): string {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray(): TItem[] {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem): void => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any(callback?: (item: TItem, index: number) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all(callback: (item: TItem) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach(callback: (item: TItem, index: number) => void): void {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select<T2>(callback: (item: TItem, index: number) => T2): List<T2> {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where(callback: (item: TItem, index: number) => boolean): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem): number => compareFn(b, a));\r\n    }\r\n\r\n    public clone(): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat(list: List<TItem>): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray(array: TItem[]): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed(): void {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions(subscriptions: IStringDictionary<() => void>): void {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { List } from \"./List\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType; deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType; deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded((): void => this.drain()));\r\n    }\r\n\r\n    public enqueue(item: TItem): void {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void): void => resolve(item)));\r\n    }\r\n\r\n    public enqueueFromPromise(promise: Promise<TItem>): void {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        }, (): void => { });\r\n    }\r\n\r\n    public dequeue(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>): void => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally((): void => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain(): void {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose(): void {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n    FLAC,\r\n    OPUS,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormat(samplesPerSecond: number, bitsPerSample: number, channels: number, format: AudioFormatTag): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n\r\n        let isWavFormat: boolean = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    /* eslint-disable */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { Queue } from \"./Queue\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read(): Promise<IStreamChunk<TBuffer>> {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>): Promise<IStreamChunk<TBuffer>> => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded(): void {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed(): void {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    public constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport { IStreamChunk } from \"../common/Stream\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    private privIsClosing: boolean;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error as string);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            // eslint-disable-next-line\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = (): void => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream): void => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: any): void => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error as string}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any): void => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason as string}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>): IAudioStreamNode => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async (): Promise<void> => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: (): string => audioNodeId,\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            // eslint-disable-next-line @typescript-eslint/await-thenable\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string): ISpeechConfigAudioDevice => (\r\n            {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            }\r\n        ));\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]): void => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, (): Deferred<string> => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private async listen(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error as string));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            if (!this.privIsClosing) {\r\n                // The audio context close may take enough time that the close is called twice\r\n                this.privIsClosing = true;\r\n                await this.privContext.close();\r\n                this.privContext = null;\r\n                this.privIsClosing = false;\r\n            }\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl): Promise<{\r\n            bitspersample: number;\r\n            channelcount: number;\r\n            connectivity: connectivity.Unknown;\r\n            manufacturer: string;\r\n            model: string;\r\n            samplerate: number;\r\n            type: type.File;\r\n        }> => ( Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            })\r\n        ));\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 4296;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event): void => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string): void => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>): void  =>  onerror(ev.toString());\r\n\r\n                reader.onload = (event: Event): void => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e as string);\r\n        }\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for\r\n  * custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\r\n     * to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.17.0\r\n */\r\nexport enum SpeechSynthesisOutputFormat {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    Raw8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    Riff16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    Audio16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    Audio16Khz32KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    Audio16Khz128KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    Audio16Khz64KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    Audio24Khz48KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    Audio24Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    Audio24Khz160KBitRateMonoMp3,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    Raw16Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    Riff16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    Riff8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    Riff24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    Riff8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    Raw16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    Raw24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    Raw8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    Ogg16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    Ogg24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    Raw48Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n\r\n    Riff48Khz16BitMonoPcm,\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    Audio48Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    Audio48Khz192KBitRateMonoMp3,\r\n\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    Ogg48Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    Webm16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    Webm24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-truesilk\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\r\n     */\r\n     Raw24Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * raw-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\r\n     */\r\n     Raw8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\r\n     */\r\n     Riff8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * webm-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.\r\n     * Added in version 1.19.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Webm24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-16khz-16bit-32kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus\r\n     */\r\n    Audio16Khz16Bit32KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-48kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit48KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * raw-22050hz-16bit-mono-pcm\r\n     * Raw PCM audio at 22050Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm\r\n     */\r\n    Raw22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-22050hz-16bit-mono-pcm\r\n     * PCM audio at 22050Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm\r\n     */\r\n    Riff22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-44100hz-16bit-mono-pcm\r\n     * Raw PCM audio at 44100Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm\r\n     */\r\n    Raw44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-44100hz-16bit-mono-pcm\r\n     * PCM audio at 44100Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm\r\n     */\r\n    Riff44100Hz16BitMonoPcm\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { createNoDashGuid } from \"../../common/Guid\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async (): Promise<void> => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n super();\r\n}\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    EventType,\r\n    PlatformEvent\r\n} from \"./Exports\";\r\n\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    private privError: string;\r\n\r\n    public constructor(error: string) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"raw-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-22050hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"raw-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-44100hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n    /**\r\n     * Adds audio header\r\n     * @param audio the raw audio without header\r\n     * @returns the audio with header if applicable\r\n     */\r\n\r\n    public addHeader(audio: ArrayBuffer): ArrayBuffer {\r\n        if (!this.hasHeader) {\r\n            return audio;\r\n        }\r\n        this.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + this.header.byteLength);\r\n        tmp.set(new Uint8Array(this.header), 0);\r\n        tmp.set(new Uint8Array(audio), this.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((): void => {\r\n                    receivedAudio = this.privFormat.addHeader(receivedAudio);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then((): void => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (typeof (AudioContext) !== \"undefined\" || (typeof (window) !== \"undefined\" && typeof ((window as any).webkitAudioContext) !== \"undefined\")) {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (): void => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (): void => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (): void => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get volume(): number {\r\n        return this.privAudio?.volume ?? -1;\r\n    }\r\n\r\n    public set volume(volume: number) {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.volume = volume;\r\n        }\r\n    }\r\n\r\n    public mute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = true;\r\n        }\r\n    }\r\n\r\n    public unmute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = false;\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // eslint-disable-next-line no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport abstract class PushAudioOutputStreamCallback {\r\n\r\n    /**\r\n     * Writes audio data into the data buffer.\r\n     * @member PushAudioOutputStreamCallback.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the audio output stream.\r\n     * @member PushAudioOutputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\r\n     * Speech recognition will continue unless otherwise configured.\r\n     * @member ResultReason.RecognizedKeyword\r\n     */\r\n    RecognizedKeyword,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    SynthesizingAudioStarted,\r\n\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    EnrollingVoiceProfile,\r\n\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    EnrolledVoiceProfile,\r\n\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    RecognizedSpeakers,\r\n\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    RecognizedSpeaker,\r\n\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResetVoiceProfile,\r\n\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    DeletedVoiceProfile,\r\n\r\n    /**\r\n     * Indicates synthesis voices list has been successfully retrieved.\r\n     * @member ResultReason.VoicesListRetrieved\r\n     */\r\n    VoicesListRetrieved,\r\n\r\n    /**\r\n     * Indicates the transcription result contains hypothesis text and its translation(s) for\r\n     * other participants in the conversation.\r\n     * @member ResultReason.TranslatingParticipantSpeech\r\n     */\r\n    TranslatingParticipantSpeech,\r\n\r\n    /**\r\n     * Indicates the transcription result contains final text and corresponding translation(s)\r\n     * for other participants in the conversation. Speech Recognition and Translation are now\r\n     * complete for this phrase.\r\n     * @member ResultReason.TranslatedParticipantSpeech\r\n     */\r\n    TranslatedParticipantSpeech,\r\n\r\n    /**\r\n     * <summary>\r\n     * Indicates the transcription result contains the instant message and corresponding\r\n     * translation(s).\r\n     * @member ResultReason.TranslatedInstantMessage\r\n     */\r\n    TranslatedInstantMessage,\r\n\r\n    /**\r\n     * Indicates the transcription result contains the instant message for other participants\r\n     * in the conversation and corresponding translation(s).\r\n     * @member ResultReason.TranslatedParticipantInstantMessage\r\n     */\r\n    TranslatedParticipantInstantMessage,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", (): void => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     * Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     * stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     * stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then((): void => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string): void => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private privDisposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model\r\n     * will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\r\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second increments.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param language - Primary Language detected, if provided.\r\n     * @param languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    public constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\r\n                duration?: number, offset?: number, language?: string, languageDetectionConfidence?: string,\r\n                errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     * Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     * Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { RecognitionEventArgs, SpeechRecognitionResult, ConversationTranscriptionResult } from \"./Exports\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\nexport class ConversationTranscriptionEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranscriptionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranscriptionResult} result - The conversation transcription result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranscriptionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the transcription result.\r\n     * @member ConversationTranscription1EventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {ConversationTranscriptionResult} the recognition result.\r\n     */\r\n        public get result(): ConversationTranscriptionResult {\r\n            return this.privResult;\r\n        }\r\n}\r\n\r\n/**\r\n * Defines contents of meeting transcribed/transcribing event.\r\n * @class MeetingTranscriptionEventArgs\r\n */\r\nexport class MeetingTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationEventArgs,\r\n    CancellationReason,\r\n    RecognitionEventArgs\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string,\r\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase\";\r\n\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\r\n                       text?: string, duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    public static fromSpeechRecognitionResult(result: SpeechRecognitionResult): TranslationRecognitionResult {\r\n        return new TranslationRecognitionResult(undefined, result.resultId, result.reason, result.text, result.duration, result.offset, result.language, result.languageDetectionConfidence, result.errorDetails, result.json, result.properties);\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents\r\n     * a translation result in one of target languages, where the key is the name\r\n     * of the target language, in BCP-47 format, and the value is the translation\r\n     * text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ResultReason } from \"./ResultReason\";\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated\r\n * text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    public constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\r\nexport * from \"./CognitiveTokenAuthentication\";\r\nexport * from \"./IAuthentication\";\r\nexport * from \"./IConnectionFactory\";\r\nexport * from \"./ISynthesisConnectionFactory\";\r\nexport * from \"./IntentConnectionFactory\";\r\nexport * from \"./SpeakerRecognitionConnectionFactory\";\r\nexport * from \"./RecognitionEvents\";\r\nexport * from \"./ServiceRecognizerBase\";\r\nexport * from \"./ConversationServiceRecognizer\";\r\nexport * from \"./RecognizerConfig\";\r\nexport * from \"./SpeechServiceInterfaces\";\r\nexport * from \"./WebsocketMessageFormatter\";\r\nexport * from \"./SpeechConnectionFactory\";\r\nexport * from \"./ConversationTranscriberConnectionFactory\";\r\nexport * from \"./TranscriberConnectionFactory\";\r\nexport * from \"./TranslationConnectionFactory\";\r\nexport * from \"./SpeechSynthesisConnectionFactory\";\r\nexport * from \"./EnumTranslation\";\r\nexport * from \"./ServiceMessages/Enums\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis\";\r\nexport * from \"./ServiceMessages/TranslationPhrase\";\r\nexport * from \"./TranslationServiceRecognizer\";\r\nexport * from \"./ServiceMessages/SpeechDetected\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis\";\r\nexport * from \"./ServiceMessages/SpeechKeyword\";\r\nexport * from \"./SpeechServiceRecognizer\";\r\nexport * from \"./ConversationTranscriptionServiceRecognizer\";\r\nexport * from \"./TranscriptionServiceRecognizer\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase\";\r\nexport * from \"./AddedLmIntent\";\r\nexport * from \"./IntentServiceRecognizer\";\r\nexport * from \"./ServiceMessages/IntentResponse\";\r\nexport * from \"./ServiceMessages/SpeakerResponse\";\r\nexport * from \"./RequestSession\";\r\nexport * from \"./SpeechContext\";\r\nexport * from \"./DynamicGrammarBuilder\";\r\nexport * from \"./DynamicGrammarInterfaces\";\r\nexport * from \"./DialogServiceAdapter\";\r\nexport * from \"./AgentConfig\";\r\nexport * from \"./Transcription/Exports\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nexport * from \"./SynthesisTurn\";\r\nexport * from \"./SynthesisAdapterBase\";\r\nexport { AvatarSynthesisAdapter } from \"./AvatarSynthesisAdapter\";\r\nexport { SpeechSynthesisAdapter } from \"./SpeechSynthesisAdapter\";\r\nexport * from \"./SynthesisRestAdapter\";\r\nexport * from \"./SynthesizerConfig\";\r\nexport * from \"./SynthesisContext\";\r\nexport * from \"./SpeakerRecognitionConfig\";\r\nexport * from \"./SpeakerServiceRecognizer\";\r\nexport * from \"./VoiceServiceRecognizer\";\r\nexport * from \"./SpeechServiceConfig\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"OpenRange\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to\r\n     * specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyHostName,\r\n\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPort,\r\n\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyUserName,\r\n\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPassword,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    SpeechServiceConnection_SynthLanguage,\r\n\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    SpeechServiceConnection_SynthVoice,\r\n\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    SpeechServiceConnection_SynthOutputFormat,\r\n\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    SpeechServiceConnection_AutoDetectSourceLanguages,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    SpeechServiceConnection_Url,\r\n\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EndSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A duration of detected silence, measured in milliseconds, after which speech-to-text will determine a spoken\r\n     * phrase has ended and generate a final Recognized result. Configuring this timeout may be helpful in situations\r\n     * where spoken input is significantly faster or slower than usual and default segmentation behavior consistently\r\n     * yields results that are too long or too short. Segmentation timeout values that are inappropriately high or low\r\n     * can negatively affect speech-to-text accuracy; this property should be carefully configured and the resulting\r\n     * behavior should be thoroughly validated as intended.\r\n     *\r\n     * For more information about timeout configuration that includes discussion of default behaviors, please visit\r\n     * https://aka.ms/csspeech/timeouts.\r\n     *\r\n     * Added in version 1.21.0.\r\n     */\r\n    Speech_SegmentationSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EnableAudioLogging,\r\n\r\n    /**\r\n     * The speech service connection language identifier mode.\r\n     * Can be \"AtStart\" (the default), or \"Continuous\". See Language\r\n     * Identification document https://aka.ms/speech/lid?pivots=programming-language-javascript\r\n     * for more details.\r\n     * Added in 1.25.0\r\n     **/\r\n    SpeechServiceConnection_LanguageIdMode,\r\n\r\n    /**\r\n     * A string value representing the desired endpoint version to target for Speech Recognition.\r\n     * Added in version 1.21.0\r\n     */\r\n    SpeechServiceConnection_RecognitionEndpointVersion,\r\n\r\n    /**\r\n    /**\r\n     * A string value the current speaker recognition scenario/mode (TextIndependentIdentification, etc.).\r\n     * Added in version 1.23.0\r\n     */\r\n    SpeechServiceConnection_SpeakerIdMode,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_ProfanityOption,\r\n\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_PostProcessingOption,\r\n\r\n    /**\r\n     * A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_RequestWordLevelTimestamps,\r\n\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_StablePartialResultThreshold,\r\n\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_OutputFormatOption,\r\n\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request WordBoundary events.\r\n     * @member PropertyId.SpeechServiceResponse_RequestWordBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestWordBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request punctuation boundary in WordBoundary Events. Default is true.\r\n     * @member PropertyId.SpeechServiceResponse_RequestPunctuationBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestPunctuationBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request sentence boundary in WordBoundary Events. Default is false.\r\n     * @member PropertyId.SpeechServiceResponse_RequestSentenceBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestSentenceBoundary,\r\n\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    Conversation_ApplicationId,\r\n\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    Conversation_DialogType,\r\n\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    Conversation_Initial_Silence_Timeout,\r\n\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    Conversation_From_Id,\r\n\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    Conversation_Conversation_Id,\r\n\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    Conversation_Custom_Voice_Deployment_Ids,\r\n\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    Conversation_Speech_Activity_Template,\r\n\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    Conversation_Request_Bot_Status_Messages,\r\n\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    Conversation_Agent_Connection_Id,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    SpeechServiceConnection_Host,\r\n\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    ConversationTranslator_Host,\r\n\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    ConversationTranslator_Name,\r\n\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    ConversationTranslator_CorrelationId,\r\n\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    ConversationTranslator_Token,\r\n\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_ReferenceText,\r\n\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_GradingSystem,\r\n\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Granularity,\r\n\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_EnableMiscue,\r\n\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Json,\r\n\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Params,\r\n\r\n    /**\r\n     * Version of Speaker Recognition API to use.\r\n     * Added in version 1.18.0\r\n     */\r\n    SpeakerRecognition_Api_Version,\r\n\r\n    /**\r\n     * Specifies whether to allow load of data URL for web worker\r\n     * Allowed values are \"off\" and \"on\". Default is \"on\".\r\n     * Added in version 1.32.0\r\n     */\r\n    WebWorkerLoadType,\r\n\r\n    /**\r\n     * Talking avatar service WebRTC session description protocol.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.33.0\r\n     */\r\n    TalkingAvatarService_WebRTC_SDP,\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ProfanityOption {\r\n    Masked = 0,\r\n    Removed = 1,\r\n    Raw = 2\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionEvent } from \"./ConnectionEvents\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\r\nimport { EventSource } from \"./EventSource\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection {\r\n    id: string;\r\n    state(): ConnectionState;\r\n    open(): Promise<ConnectionOpenResponse>;\r\n    send(message: ConnectionMessage): Promise<void>;\r\n    read(): Promise<ConnectionMessage>;\r\n    events: EventSource<ConnectionEvent>;\r\n    dispose(disposing?: string): Promise<void>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines error code in case that CancellationReason is Error.\r\n * Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    RuntimeError,\r\n\r\n    /**\r\n     * Indicates an quota overrun on existing key.\r\n     */\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private privAuthFetchEventid: string;\r\n\r\n    public constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get authFetchEventid(): string {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\n\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privServiceTag: string;\r\n    private privStatus: RecognitionCompletionStatus;\r\n    private privError: string;\r\n\r\n    public constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n\r\n    public get serviceTag(): string {\r\n        return this.privServiceTag;\r\n    }\r\n\r\n    public get status(): RecognitionCompletionStatus {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string | number | boolean): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return String(def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId): void => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport {IStringDictionary} from \"../common/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     * SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     * and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     * endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     * to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     * the new token value will not apply to recognizers that have already been created. For recognizers\r\n     * that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The username of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * Enable audio logging in service.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return OutputFormat[this.privProperties.getProperty(OutputFormatPropertyName, undefined) as keyof typeof OutputFormat];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return SpeechSynthesisOutputFormat[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport { IStringDictionary } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     * will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     * set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     * setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        // eslint-disable-next-line\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        if (!languages.includes(value)) {\r\n            languages.push(value);\r\n            this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        // eslint-disable-next-line\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n} from \"../common/Exports\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            if (i < this.privBuffers.length) {\r\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .then((result: IStreamChunk<ArrayBuffer>): IStreamChunk<ArrayBuffer> => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): Promise<void> {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\r\n\r\ninterface IClearResponse {\r\n    error: null;\r\n    id: number;\r\n}\r\n\r\ninterface IErrorNotification {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: null;\r\n    result: null;\r\n}\r\n\r\ninterface IErrorResponse {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: number;\r\n    result: null;\r\n}\r\n\r\ninterface ICallNotification {\r\n    id: null;\r\n    method: \"call\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface ISetNotification {\r\n    id: null;\r\n    method: \"set\";\r\n    params: {\r\n        delay: number;\r\n        now: number;\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IClearRequest {\r\n    id: number;\r\n    method: \"clear\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IWorkerEvent extends Event {\r\n    data: TWorkerMessage;\r\n}\r\n\r\ninterface IWorkerTimers {\r\n    clearTimeout: (timerId: number) => void;\r\n    setTimeout: (func: () => any, delay: number) => number;\r\n}\r\n\r\ndeclare type Func = () => any;\r\n\r\nexport class Timeout {\r\n\r\n    private static workerTimers: null | IWorkerTimers = null;\r\n\r\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId: number): void => Timeout.timers().clearTimeout(timerId);\r\n\r\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func: () => any, delay: number): number => Timeout.timers().setTimeout(func, delay);\r\n\r\n    public static load(): any {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, (): void => { }]]); // eslint-disable-line @typescript-eslint/no-empty-function\r\n        const unhandledRequests: Map<number, number> = new Map();\r\n\r\n        // eslint-disable-next-line\r\n        const workerScript = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`;\r\n        const workerUrl = \"data:text/javascript;base64,\" + btoa(workerScript);\r\n        const worker = new Worker(workerUrl);\r\n\r\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent): void => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const {\r\n                    params: { timerId }\r\n                } = data;\r\n\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n\r\n                    if (\r\n                        unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId\r\n                    ) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                } else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                } else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            } else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n\r\n                unhandledRequests.delete(id);\r\n\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            } else {\r\n                const {\r\n                    error: { message }\r\n                } = data;\r\n\r\n                throw new Error(message);\r\n            }\r\n        });\r\n\r\n        const clearTimeout = (timerId: number): void => {\r\n            const id = Math.random();\r\n\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            } as IClearRequest);\r\n        };\r\n\r\n        const setTimeout = (func: () => void, delay: number): number => {\r\n            const timerId = Math.random();\r\n\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            } as ISetNotification);\r\n\r\n            return timerId;\r\n        };\r\n\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n\r\n    private static loadWorkerTimers(): () => IWorkerTimers {\r\n        return (): IWorkerTimers => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n\r\n            Timeout.workerTimers = Timeout.load() as IWorkerTimers;\r\n\r\n            return Timeout.workerTimers;\r\n        };\r\n    }\r\n\r\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\r\n\r\n    private static isCallNotification(message: TWorkerMessage): message is ICallNotification {\r\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\r\n    }\r\n\r\n    private static isClearResponse(message: TWorkerMessage): message is IClearResponse {\r\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    public constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    public constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    public constructor(connectionId: string) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    public constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    public constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent(e: PlatformEvent): void {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError(statusCode: number): string {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\nimport { Context, SpeechServiceConfig } from \"./Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode;\r\n    private privLanguageIdMode: string;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n    private privEnableSpeakerId: boolean;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n        this.privEnableSpeakerId = false;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get languageIdMode(): string {\r\n        return this.privLanguageIdMode;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get recognitionEndpointVersion(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\r\n    }\r\n\r\n    public get sourceLanguageModels(): { language: string; endpoint: string }[] {\r\n        const models: { language: string; endpoint: string }[] = [];\r\n        let modelsExist: boolean = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId: string = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push( { language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                } else {\r\n                    models.push( { language, endpoint: \"\" } );\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public set isSpeakerDiarizationEnabled(value: boolean) {\r\n        this.privEnableSpeakerId = value;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecognitionBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privConnectionAttempts: number = 0;\r\n\r\n    public constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    public get numConnectionAttempts(): number {\r\n        return this.privConnectionAttempts;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n\r\n    // The number of bytes sent for the current recognition.\r\n    // Counter is reset to 0 each time recognition is started.\r\n    public get recognitionBytesSent(): number {\r\n        return this.privRecognitionBytesSent;\r\n    }\r\n\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privRecognitionBytesSent = 0;\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onSpeechContext(): void {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n        this.privRecognitionBytesSent += bytesSent;\r\n    }\r\n\r\n    public onRetryConnection(): void {\r\n        this.privConnectionAttempts++;\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (!!this.privServiceTelemetryListener) {\r\n                this.privServiceTelemetryListener.dispose();\r\n            }\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent(event: SpeechRecognitionEvent): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase);\r\n        } else {\r\n            this.privPhrases.push(phrase);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar);\r\n        } else {\r\n            this.privGrammars.push(grammar);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    IDynamicGrammar,\r\n} from \"./Exports\";\r\n\r\ninterface Context {\r\n    [section: string]: any;\r\n}\r\n\r\ninterface PhraseContext {\r\n    [section: string]: any;\r\n    phraseDetection?: {\r\n        enrichment?: {\r\n            pronunciationAssessment: any;\r\n            contentAssessment?: {\r\n                topic: string;\r\n            };\r\n        };\r\n        speakerDiarization?: {\r\n            mode?: string;\r\n            audioSessionId?: string;\r\n            audioOffsetMs?: number;\r\n            identityProvider?: string;\r\n        };\r\n        mode?: string;\r\n    };\r\n    phraseOutput?: {\r\n        detailed?: {\r\n            options?: string[];\r\n        };\r\n        format?: any;\r\n    };\r\n}\r\n\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    private privContext: PhraseContext = {};\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n\r\n    public constructor(dynamicGrammar: DynamicGrammarBuilder) {\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Gets a section of the speech.context object.\r\n     * @param sectionName Name of the section to get.\r\n     * @return string or Context JSON serializable object that represents the value.\r\n     */\r\n    public getSection(sectionName: string): string | Context {\r\n        return (this.privContext[sectionName] || {}) as string | Context;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the speech.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | Context): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public setPronunciationAssessmentParams(params: string,\r\n        contentAssessmentTopic: string,\r\n        isSpeakerDiarizationEnabled: boolean = false): void {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        if (this.privContext.phraseDetection.enrichment === undefined) {\r\n            this.privContext.phraseDetection.enrichment = {\r\n                pronunciationAssessment: {}\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params) as Context;\r\n        if (isSpeakerDiarizationEnabled) {\r\n            this.privContext.phraseDetection.mode = \"Conversation\";\r\n        }\r\n        this.setWordLevelTimings();\r\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"SNR\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"SNR\");\r\n        }\r\n        if (!!contentAssessmentTopic) {\r\n            this.privContext.phraseDetection.enrichment.contentAssessment = {\r\n                topic: contentAssessmentTopic\r\n            };\r\n            this.privContext.phraseOutput.detailed.options.push(\"ContentAssessment\");\r\n        }\r\n    }\r\n\r\n    public setDetailedOutputFormat(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n    }\r\n\r\n    public setWordLevelTimings(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\r\n        }\r\n    }\r\n\r\n    public setSpeakerDiarizationAudioOffsetMs(audioOffsetMs: number): void {\r\n        this.privContext.phraseDetection.speakerDiarization.audioOffsetMs = audioOffsetMs;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const dgi: IDynamicGrammar = this.privDynamicGrammar.generateGrammarObject();\r\n        this.setSection(\"dgi\", dgi);\r\n\r\n        const ret: string = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    private iPrivConfig: IAgentConfig;\r\n\r\n    public toJsonString(): string {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n\r\n    public get(): IAgentConfig {\r\n        return this.iPrivConfig;\r\n    }\r\n\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    public set(value: IAgentConfig): void {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\nexport interface IAgentConfig {\r\n    botInfo: {\r\n        commType: string;\r\n        connectionId: string;\r\n        conversationId: string;\r\n        fromId: string;\r\n        commandsCulture: string;\r\n        ttsAudioFormat: string;\r\n    };\r\n    version: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private privSpeechStartDetected: ISpeechDetected;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechStartDetected = JSON.parse(json) as ISpeechDetected;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechDetected {\r\n        return new SpeechDetected(json);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class HeaderNames {\r\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\r\n    public static Authorization: string = \"Authorization\";\r\n    public static SpIDAuthKey: string = \"Apim-Subscription-Id\";\r\n    public static ConnectionId: string = \"X-ConnectionId\";\r\n    public static ContentType: string = \"Content-Type\";\r\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\r\n    public static Path: string = \"Path\";\r\n    public static RequestId: string = \"X-RequestId\";\r\n    public static RequestStreamId: string = \"X-StreamId\";\r\n    public static RequestTimestamp: string = \"X-Timestamp\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeakerRecognitionResult,\r\n    SpeechRecognitionResult,\r\n    OutputFormat\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type,\r\n    OutputFormatPropertyName\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\ninterface CustomModel {\r\n    language: string;\r\n    endpoint: string;\r\n}\r\n\r\nexport interface PhraseDetection {\r\n    customModels?: CustomModel[];\r\n    onInterim?: { action: string };\r\n    onSuccess?: { action: string };\r\n    mode?: string;\r\n    INTERACTIVE?: Segmentation;\r\n    CONVERSATION?: Segmentation;\r\n    DICTATION?: Segmentation;\r\n    speakerDiarization?: SpeakerDiarization;\r\n}\r\n\r\nexport interface SpeakerDiarization {\r\n    mode?: string;\r\n    audioSessionId?: string;\r\n    audioOffsetMs?: number;\r\n    identityProvider?: string;\r\n}\r\n\r\nexport interface Segmentation {\r\n    segmentation: {\r\n        mode: \"Custom\";\r\n        segmentationSilenceTimeoutMs: number;\r\n    };\r\n}\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    private privAverageBytesPerMs: number = 0;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privDiarizationSessionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n    protected privEnableSpeakerId: boolean = false;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        const webWorkerLoadType: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n            }\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.privEnableSpeakerId) {\r\n            this.privDiarizationSessionId = createNoDashGuid();\r\n        }\r\n\r\n        this.setLanguageIdJson();\r\n        this.setOutputDetailLevelJson();\r\n    }\r\n\r\n    protected setTranslationJson(): void {\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            const languages = targetLanguages.split(\",\");\r\n            const translationVoice: string =  this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n            const action = ( translationVoice !== undefined ) ? \"Synthesize\" : \"None\";\r\n            this.privSpeechContext.setSection(\"translation\", {\r\n                onSuccess: { action },\r\n                output: { interimResults: { mode: \"Always\" } },\r\n                targetLanguages: languages,\r\n            });\r\n\r\n            if (translationVoice !== undefined) {\r\n                const languageToVoiceMap: { [key: string]: string } = {};\r\n                for (const lang of languages) {\r\n                    languageToVoiceMap[lang] = translationVoice;\r\n                }\r\n                this.privSpeechContext.setSection(\"synthesis\", {\r\n                    defaultVoices: languageToVoiceMap\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setSpeechSegmentationTimeoutJson(): void {\r\n        const speechSegmentationTimeout: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        if (speechSegmentationTimeout !== undefined) {\r\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\r\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\r\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationTimeout, 10);\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = mode;\r\n            phraseDetection[mode] = {\r\n                segmentation: {\r\n                    mode: \"Custom\",\r\n                    segmentationSilenceTimeoutMs\r\n                }\r\n            };\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected setLanguageIdJson(): void {\r\n        const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n\r\n            let speechContextLidMode;\r\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = \"DetectContinuous\";\r\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = \"DetectAtAudioStart\";\r\n            }\r\n\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                Priority: \"PrioritizeLatency\",\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n            const customModels: CustomModel[] = this.privRecognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: \"None\" };\r\n                phraseDetection.onSuccess = { action: \"None\" };\r\n            }\r\n        }\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            phraseDetection.onInterim = { action: \"Translate\" };\r\n            phraseDetection.onSuccess = { action: \"Translate\" };\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"None\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"None\"\r\n                }\r\n            });\r\n        }\r\n\r\n        this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n    }\r\n\r\n    protected setOutputDetailLevelJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\r\n            if (requestWordLevelTimestamps === \"true\") {\r\n                this.privSpeechContext.setWordLevelTimings();\r\n            } else {\r\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\r\n                    this.privSpeechContext.setDetailedOutputFormat();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set voiceProfileType(type: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = auth;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n        this.setSpeechSegmentationTimeoutJson();\r\n        this.setTranslationJson();\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privRequestSession.isRecognizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private updateSpeakerDiarizationAudioOffset(): void {\r\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\r\n        const audioOffsetMs: number = bytesSent / this.privAverageBytesPerMs;\r\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        if (this.privEnableSpeakerId) {\r\n            this.updateSpeakerDiarizationAudioOffset();\r\n        }\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    protected noOp(): Promise<void> {\r\n        // operation not supported\r\n        return;\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\r\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IAuthentication {\r\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private privHeaderName: string;\r\n    private privToken: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n\r\n    public get headerName(): string {\r\n        return this.privHeaderName;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privToken;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    public constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private static privTokenPrefix: string = \"Bearer \";\r\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    public constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     * @param {PropertyCollection} properties - A set of properties to set on the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - The factory class used to create a custom IConnection for the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class ConnectionOpenResponse {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(statusCode: number, reason: string) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (messageType === MessageType.Binary && payload.__proto__.constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload as ArrayBuffer;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Node.JS specific web socket / browser support.\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\nimport * as http from \"http\";\r\nimport * as net from \"net\";\r\nimport * as tls from \"tls\";\r\nimport Agent from \"agent-base\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\n\r\nimport ws from \"ws\";\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                options.agent = this.getAgent();\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol: string = uri.protocol;\r\n\r\n                if (protocol?.toLocaleLowerCase() === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                } else if (protocol?.toLocaleLowerCase() === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                (options.agent as any).protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error as string));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (): void => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }): void => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }): void => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }): void => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage): void => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string): void => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close(reason?: string): Promise<void> {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage(sendItem: ISendItem): Promise<void> {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e as string}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((): void => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem): void => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent(event: ConnectionEvent): void {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private getAgent(): http.Agent {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent: { proxyInfo: ProxyInfo } = new Agent.Agent(this.createConnection) as unknown as { proxyInfo: ProxyInfo } ;\r\n\r\n        if (this.proxyInfo !== undefined &&\r\n            this.proxyInfo.HostName !== undefined &&\r\n            this.proxyInfo.Port > 0) {\r\n            agent.proxyInfo = this.proxyInfo;\r\n        }\r\n\r\n        return agent as unknown as http.Agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private createConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: true,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.proxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = WebsocketMessageAdapter.GetProxyAgent(this.proxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket): void => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        return socketPromise;\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n\r\n                    const key = encodeURIComponent(paramName);\r\n                    queryParams += key;\r\n\r\n                    let val = queryParameters[paramName];\r\n                    if (val) {\r\n                        val = encodeURIComponent(val);\r\n                        queryParams += `=${val}`;\r\n                    }\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public state(): ConnectionState {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognizerConfig } from \"../common.speech/Exports\";\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport class ProxyInfo {\r\n    private privProxyHostName: string;\r\n    private privProxyPort: number;\r\n    private privProxyUserName: string;\r\n    private privProxyPassword: string;\r\n\r\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n\r\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\r\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n\r\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n\r\n    public get HostName(): string {\r\n        return this.privProxyHostName;\r\n    }\r\n\r\n    public get Port(): number {\r\n        return this.privProxyPort;\r\n    }\r\n\r\n    public get UserName(): string {\r\n        return this.privProxyUserName;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class QueryParameterNames {\r\n    public static BotId: string = \"botid\";\r\n    public static CustomSpeechDeploymentId: string = \"cid\";\r\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\r\n    public static EnableAudioLogging: string = \"storeAudio\";\r\n    public static EnableLanguageId: string = \"lidEnabled\";\r\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\r\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\r\n    public static SegmentationSilenceTimeoutMs: string = \"segmentationSilenceTimeoutMs\";\r\n    public static Format: string = \"format\";\r\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\r\n    public static Language: string = \"language\";\r\n    public static Profanity: string = \"profanity\";\r\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\r\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\r\n    public static StableTranslation: string = \"stableTranslation\";\r\n    public static TestHooks: string = \"testhooks\";\r\n    public static Postprocessing: string = \"postprocessing\";\r\n    public static CtsMeetingId: string = \"meetingId\";\r\n    public static CtsDeviceId: string = \"deviceId\";\r\n    public static CtsIsParticipant: string = \"isParticipant\";\r\n    public static EnableAvatar: string = \"enableTalkingAvatar\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\r\n        //        including e.g. the path portion, or even as a substring of other query parameters\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage> {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders(message: ConnectionMessage): string {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders(headersString: string): IStringDictionary<string> {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer(str: string): ArrayBuffer {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/speech/universal/v\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase\";\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private privSpeechHypothesis: ISpeechHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechHypothesis = JSON.parse(json) as ISpeechHypothesis;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechHypothesis {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n    TooManyRequests,\r\n    BadRequest,\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPrimaryLanguage {\r\n    Language: string;\r\n    Confidence: string;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json) as ISimpleSpeechPhrase;\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get DisplayText(): string {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports\";\r\nimport { RecognitionStatus } from \"./Exports\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.EndOfDictation:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display?: string;\r\n    DisplayText?: string;\r\n    Words?: IWord[];\r\n    DisplayWords?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                    if (!!details.DisplayWords) {\r\n                        for (const word of details.DisplayWords) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition\r\n     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     * specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel\";\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationEventArgs } from \"./CancellationEventArgs\";\r\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(\r\n        reason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result?: IntentRecognitionResult,\r\n        offset?: number,\r\n        sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IIntentResponse {\r\n    query?: string;\r\n    topScoringIntent?: ISingleIntent;\r\n    entities?: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\nexport class IntentResponse implements IIntentResponse {\r\n    private privIntentResponse: IIntentResponse;\r\n\r\n    private constructor(json: string) {\r\n        if (json === \"\") {\r\n            this.privIntentResponse = {};\r\n        } else {\r\n            this.privIntentResponse = JSON.parse(json) as IIntentResponse;\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): IntentResponse {\r\n        return new IntentResponse(json);\r\n    }\r\n\r\n    public get query(): string {\r\n        return this.privIntentResponse.query;\r\n    }\r\n\r\n    public get topScoringIntent(): ISingleIntent {\r\n        return this.privIntentResponse.topScoringIntent;\r\n    }\r\n\r\n    public get entities(): IIntentEntity[] {\r\n        return this.privIntentResponse.entities;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    speechHypothesis.Language,\r\n                    speechHypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    simple.Language,\r\n                    simple.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = (): void => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n\r\n                if (null !== intentResponse && !!intentResponse.topScoringIntent && !!intentResponse.topScoringIntent.intent) {\r\n                    let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                    if (this.privUmbrellaIntent !== undefined) {\r\n                        addedIntent = this.privUmbrellaIntent;\r\n                    }\r\n\r\n                    if (!!addedIntent) {\r\n                        const intentId = addedIntent === undefined || addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                        let reason = ev.result.reason;\r\n\r\n                        if (undefined !== intentId) {\r\n                            reason = ResultReason.RecognizedIntent;\r\n                        }\r\n\r\n                        // make sure, properties is set.\r\n                        const properties = (undefined !== ev.result.properties) ?\r\n                            ev.result.properties : new PropertyCollection();\r\n\r\n                        properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                        ev = new IntentRecognitionEventArgs(\r\n                            new IntentRecognitionResult(\r\n                                intentId,\r\n                                ev.result.resultId,\r\n                                reason,\r\n                                ev.result.text,\r\n                                ev.result.duration,\r\n                                ev.result.offset,\r\n                                undefined,\r\n                                undefined,\r\n                                ev.result.errorDetails,\r\n                                ev.result.json,\r\n                                properties),\r\n                            ev.offset,\r\n                            ev.sessionId);\r\n\r\n                    }\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileType\r\n */\r\nexport enum VoiceProfileType {\r\n\r\n    /**\r\n     * Text independent speaker identification\r\n     * @member VoiceProfileType.TextIndependentIdentification\r\n     */\r\n    TextIndependentIdentification,\r\n\r\n    /**\r\n     * Text dependent speaker verification\r\n     * @member VoiceProfileType.TextDependentVerification\r\n     */\r\n    TextDependentVerification,\r\n\r\n    /**\r\n     * Text independent speaker verification\r\n     * @member VoiceProfileType.TextIndependentVerification\r\n     */\r\n    TextIndependentVerification,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     * values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition like command or query.\r\n     * For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     * to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     * is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string;\r\n        key: string;\r\n        provider: string;\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\n/**\r\n * String helper functions\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * Formats a string by replacing the named {keys} in the string with the values contained in the replacement dictionary.\r\n     * @param format The format string that contains the parts to replace surrounded by {}. For example: \"wss://{region}.cts.speech.microsoft.com\".\r\n     * If your string needs to contain a { or } you can use the {{ and }} escape sequences respectively.\r\n     * @param replacements The dictionary of replacements. If a replacement is not found, it is replaced with an empty string\r\n     * @returns The formatted string. If you pass in a null or undefined format string, an empty string will be returned\r\n     */\r\n    public static formatString(format: string, replacements: IStringDictionary<string>): string {\r\n        if (!format) {\r\n            return \"\";\r\n        }\r\n\r\n        if (!replacements) {\r\n            return format;\r\n        }\r\n\r\n        let formatted: string = \"\";\r\n        let key: string = \"\";\r\n\r\n        const appendToFormatted = (str: string): void => {\r\n            formatted += str;\r\n        };\r\n        const appendToKey = (str: string): void => {\r\n            key += str;\r\n        };\r\n        let appendFunc: (str: string) => void = appendToFormatted;\r\n\r\n        for (let i = 0; i < format.length; i++) {\r\n            const c: string = format[i];\r\n            const next: string = i + 1 < format.length ? format[i + 1] : \"\";\r\n\r\n            switch (c) {\r\n                case \"{\":\r\n                    if (next === \"{\") {\r\n                        appendFunc(\"{\");\r\n                        i++;\r\n                    } else {\r\n                        appendFunc = appendToKey;\r\n                    }\r\n                    break;\r\n\r\n                case \"}\":\r\n                    if (next === \"}\") {\r\n                        appendFunc(\"}\");\r\n                        i++;\r\n                    } else {\r\n                        if (replacements.hasOwnProperty(key)) {\r\n                            formatted += replacements[key];\r\n                        }\r\n\r\n                        appendFunc = appendToFormatted;\r\n                        key = \"\";\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    appendFunc(c);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return formatted;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports\";\r\nimport { StringUtils } from \"../common/StringUtils\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpointUrl) {\r\n            if (config.autoDetectSourceLanguages !== undefined) {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/universal/v2\";\r\n            } else {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\r\n            }\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n        queryParams.scenario = config.recognitionMode === RecognitionMode.Interactive ? \"interactive\" :\r\n            config.recognitionMode === RecognitionMode.Conversation ? \"conversation\" : \"\";\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            queryParams.features = \"texttospeech\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(\r\n        sessionid: string,\r\n        cancellationReason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translations\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private privMap: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Get the languages in the object in a String array.\r\n     * @member Translations.prototype.languages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} languages in translations object.\r\n     */\r\n    public get languages(): string[] {\r\n        return this.privMap.keys;\r\n    }\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translations.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.privMap.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translations.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.privMap.setProperty(key, value);\r\n    }\r\n}\r\n","import { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechRecognitionResult\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis\r\n} from \"./Exports\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class ConversationServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.handleSpeechPhraseMessage = async (textBody: string): Promise<void> => this.handleSpeechPhrase(textBody);\r\n        this.handleSpeechHypothesisMessage = (textBody: string): void => this.handleSpeechHypothesis(textBody);\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        void connectionMessage;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        void result;\r\n        void offset;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        void result;\r\n        void duration;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected async processSpeechMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        let processed: boolean = false;\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                if (!!this.handleSpeechHypothesisMessage) {\r\n                    this.handleSpeechHypothesisMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (!!this.handleSpeechPhraseMessage) {\r\n                    await this.handleSpeechPhraseMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n            // Implementing to allow inheritance\r\n            void sessionId;\r\n            void requestId;\r\n            void cancellationReason;\r\n            void errorCode;\r\n            void error;\r\n        }\r\n\r\n    protected async handleSpeechPhrase(textBody: string): Promise<void> {\r\n\r\n        const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(textBody);\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n        const simpleOffset = simple.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        let offset = simpleOffset;\r\n\r\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n        if (ResultReason.Canceled === resultReason) {\r\n            const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n            const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n            await this.cancelRecognitionLocal(\r\n                cancelReason,\r\n                cancellationErrorCode,\r\n                EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n        } else {\r\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        simple.DisplayText,\r\n                        simple.Duration,\r\n                        simpleOffset,\r\n                        simple.Language,\r\n                        simple.LanguageDetectionConfidence,\r\n                        simple.SpeakerId,\r\n                        undefined,\r\n                        textBody,\r\n                        resultProps);\r\n                } else {\r\n                    const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(textBody);\r\n                    const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                    const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        detailed.Text,\r\n                        detailed.Duration,\r\n                        totalOffset,\r\n                        detailed.Language,\r\n                        detailed.LanguageDetectionConfidence,\r\n                        detailed.SpeakerId,\r\n                        undefined,\r\n                        offsetCorrectedJson,\r\n                        resultProps);\r\n\r\n                        offset = result.offset;\r\n                }\r\n\r\n                this.handleRecognizedCallback(result, offset, this.privRequestSession.sessionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected handleSpeechHypothesis(textBody: string): void {\r\n        const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(textBody);\r\n        const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            ResultReason.RecognizingSpeech,\r\n            hypothesis.Text,\r\n            hypothesis.Duration,\r\n            offset,\r\n            hypothesis.Language,\r\n            hypothesis.LanguageDetectionConfidence,\r\n            hypothesis.SpeakerId,\r\n            undefined,\r\n            textBody,\r\n            resultProps);\r\n\r\n        this.privRequestSession.onHypothesis(offset);\r\n\r\n        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { IPrimaryLanguage, ITranslations } from \"../Exports\";\r\nimport { TranslationStatus } from \"../TranslationStatus\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private privTranslationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(hypothesis: ITranslationHypothesis) {\r\n        this.privTranslationHypothesis = hypothesis;\r\n        this.privTranslationHypothesis.Translation.TranslationStatus = TranslationStatus[this.privTranslationHypothesis.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationHypothesis {\r\n        return new TranslationHypothesis(JSON.parse(json) as ITranslationHypothesis);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationHypothesis: { SpeechHypothesis: ITranslationHypothesis }): TranslationHypothesis {\r\n        Contracts.throwIfNullOrUndefined(translationHypothesis, \"translationHypothesis\");\r\n        const hypothesis: ITranslationHypothesis = translationHypothesis.SpeechHypothesis;\r\n        translationHypothesis.SpeechHypothesis = undefined;\r\n        hypothesis.Translation = (translationHypothesis as unknown as ITranslations);\r\n        return new TranslationHypothesis(hypothesis);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationHypothesis.Translation;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privTranslationHypothesis.PrimaryLanguage?.Language;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { IPrimaryLanguage, ITranslations, RecognitionStatus } from \"../Exports\";\r\nimport { TranslationStatus } from \"../TranslationStatus\";\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    Offset: number;\r\n    Duration: number;\r\n    Translation?: ITranslations;\r\n    Text?: string;\r\n    DisplayText?: string;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n}\r\n\r\nexport class TranslationPhrase implements ITranslationPhrase {\r\n    private privTranslationPhrase: ITranslationPhrase;\r\n\r\n    private constructor(phrase: ITranslationPhrase) {\r\n        this.privTranslationPhrase = phrase;\r\n        this.privTranslationPhrase.RecognitionStatus = RecognitionStatus[this.privTranslationPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n        if (this.privTranslationPhrase.Translation !== undefined) {\r\n            this.privTranslationPhrase.Translation.TranslationStatus = TranslationStatus[this.privTranslationPhrase.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationPhrase {\r\n        return new TranslationPhrase(JSON.parse(json) as ITranslationPhrase);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationResponse: { SpeechPhrase: ITranslationPhrase }): TranslationPhrase {\r\n        Contracts.throwIfNullOrUndefined(translationResponse, \"translationResponse\");\r\n        const phrase: ITranslationPhrase = translationResponse.SpeechPhrase;\r\n        translationResponse.SpeechPhrase = undefined;\r\n        phrase.Translation = (translationResponse as unknown as ITranslations);\r\n        phrase.Text = phrase.DisplayText;\r\n        return new TranslationPhrase(phrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privTranslationPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationPhrase.Duration;\r\n    }\r\n\r\n    public get Text(): string | undefined {\r\n        return this.privTranslationPhrase.Text;\r\n    }\r\n\r\n    public get Language(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Language;\r\n    }\r\n\r\n    public get Confidence(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Confidence;\r\n    }\r\n\r\n    public get Translation(): ITranslations | undefined {\r\n        return this.privTranslationPhrase.Translation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisStatus } from \"../Exports\";\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus?: SynthesisStatus;\r\n    FailureReason?: string;\r\n    Status?: SynthesisStatus;\r\n}\r\n\r\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\r\n    private privSynthesisEnd: ITranslationSynthesisEnd;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisEnd = JSON.parse(json) as ITranslationSynthesisEnd;\r\n        if (!!this.privSynthesisEnd.SynthesisStatus) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.SynthesisStatus as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n        if (!!this.privSynthesisEnd.Status) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.Status as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationSynthesisEnd {\r\n        return new TranslationSynthesisEnd(json);\r\n    }\r\n\r\n    public get SynthesisStatus(): SynthesisStatus {\r\n        return this.privSynthesisEnd.SynthesisStatus;\r\n    }\r\n\r\n    public get FailureReason(): string {\r\n        return this.privSynthesisEnd.FailureReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"../../sdk/Exports\";\r\n\r\nexport enum MetadataType {\r\n    WordBoundary = \"WordBoundary\",\r\n    Bookmark = \"Bookmark\",\r\n    Viseme = \"Viseme\",\r\n    SentenceBoundary = \"SentenceBoundary\",\r\n    SessionEnd = \"SessionEnd\",\r\n    AvatarSignal = \"TalkingAvatarSignal\",\r\n}\r\n\r\nexport interface ISynthesisMetadata {\r\n    Type: MetadataType;\r\n    Data: {\r\n        Offset: number;\r\n        Duration: number;\r\n        text: {\r\n            Text: string;\r\n            Length: number;\r\n            BoundaryType: SpeechSynthesisBoundaryType;\r\n        };\r\n        Bookmark: string;\r\n        VisemeId: number;\r\n        AnimationChunk: string;\r\n        IsLastAnimation: boolean;\r\n        Name: string;\r\n    };\r\n}\r\n\r\n// audio.metadata\r\nexport interface ISynthesisAudioMetadata {\r\n    Metadata: ISynthesisMetadata[];\r\n}\r\n\r\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\r\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json) as ISynthesisAudioMetadata;\r\n    }\r\n\r\n    public static fromJSON(json: string): SynthesisAudioMetadata {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n\r\n    public get Metadata(): ISynthesisMetadata[] {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    EnumTranslation,\r\n    ITranslationHypothesis,\r\n    RecognitionStatus,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ConversationServiceRecognizer {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = await this.processSpeechMessages(connectionMessage);\r\n        if (processed) {\r\n            return true;\r\n        }\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                    translatedPhrase.Language,\r\n                    translatedPhrase.Confidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        const handleTranslationHypothesis = (hypothesis: TranslationHypothesis, resultProperties: PropertyCollection): void => {\r\n            const result: TranslationRecognitionEventArgs = this.fireEventForResult(hypothesis, resultProperties);\r\n            this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n            if (!!this.privTranslationRecognizer.recognizing) {\r\n                try {\r\n                    this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                    /* eslint-disable no-empty */\r\n                } catch (error) {\r\n                    // Not going to let errors in the event handler\r\n                    // trip things up.\r\n                }\r\n            }\r\n            processed = true;\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n                handleTranslationHypothesis(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody) as { SpeechPhrase: ITranslationPhrase };\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\r\n                } else {\r\n                    const hypothesis: { SpeechHypothesis: ITranslationHypothesis } = JSON.parse(connectionMessage.textBody) as { SpeechHypothesis: ITranslationHypothesis };\r\n                    if (!!hypothesis.SpeechHypothesis) {\r\n                        handleTranslationHypothesis(TranslationHypothesis.fromTranslationResponse(hypothesis), resultProps);\r\n                    }\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"audio.end\":\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), duration, sessionId);\r\n            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);\r\n            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        let confidence: string;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (!!serviceResult.Translation && serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n            confidence = serviceResult.Confidence;\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n        const language = serviceResult.Language;\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            language,\r\n            confidence,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Base class for synthesis results\r\n * @class SynthesisResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privErrorDetails: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member SynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult extends SynthesisResult {\r\n    private readonly privAudioData: ArrayBuffer;\r\n    private readonly privAudioDuration: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {ArrayBuffer} audioData - The synthesized audio binary.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     * @param {number} audioDuration - The audio duration.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, audioData?: ArrayBuffer,\r\n                errorDetails?: string, properties?: PropertyCollection, audioDuration?: number) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privAudioData = audioData;\r\n        this.privAudioDuration = audioDuration;\r\n    }\r\n\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    public get audioData(): ArrayBuffer {\r\n        return this.privAudioData;\r\n    }\r\n\r\n    /**\r\n     * The time duration of synthesized audio, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisResult.prototype.audioDuration\r\n     * @function\r\n     * @public\r\n     * @returns {number} The time duration of synthesized audio.\r\n     */\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType\";\r\n\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    private readonly privAudioOffset: number;\r\n    private readonly privDuration: number;\r\n    private readonly privText: string;\r\n    private readonly privWordLength: number;\r\n    private readonly privTextOffset: number;\r\n    private readonly privBoundaryType: SpeechSynthesisBoundaryType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} duration - The audio duration.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     * @param {SpeechSynthesisBoundaryType} boundaryType - The boundary type\r\n     */\r\n    public constructor(audioOffset: number, duration: number, text: string, wordLength: number,\r\n                       textOffset: number, boundaryType: SpeechSynthesisBoundaryType) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privDuration = duration;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n        this.privBoundaryType = boundaryType;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the duration, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration in 100 nanosecond increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    public get wordLength(): number {\r\n        return this.privWordLength;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    public get textOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the boundary type.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.boundaryType\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisBoundaryType} the boundary type.\r\n     */\r\n    public get boundaryType(): SpeechSynthesisBoundaryType {\r\n        return this.privBoundaryType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    public constructor(audioOffset: number, text: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    private privAudioOffset: number;\r\n    private privVisemeId: number;\r\n    private privAnimation: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    public get visemeId(): number {\r\n        return this.privVisemeId;\r\n    }\r\n\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    public get animation(): string {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n}\r\n\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    private privSessionAudioDestinationId: string;\r\n    private privTurnAudioDestinationId: string;\r\n\r\n    public constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n\r\n    public get audioSessionDestinationId(): string {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n\r\n    public get audioTurnDestinationId(): string {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioDestination\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisResult,\r\n} from \"../sdk/Exports\";\r\nimport { ISynthesisMetadata, MetadataType } from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n    webrtc: {\r\n        connectionString: string;\r\n    };\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    public get currentSentenceOffset(): number {\r\n        return this.privSentenceOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n\r\n    public get extraProperties(): PropertyCollection {\r\n        if (!!this.privWebRTCSDP) {\r\n            const properties = new PropertyCollection();\r\n            properties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, this.privWebRTCSDP);\r\n            return properties;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privSentenceOffset: number = 0;\r\n    private privNextSearchSentenceIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n    private privAudioDuration: number;\r\n    private privWebRTCSDP: string;\r\n\r\n    public constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = this.audioOutputFormat.addHeader(audio);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privSentenceOffset = 0;\r\n        this.privNextSearchSentenceIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        this.privWebRTCSDP = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage(responseJson: string): void {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse(): void {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(responseJson: string): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        if (!!response.webrtc) {\r\n            this.privWebRTCSDP = response.webrtc.connectionString;\r\n        }\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onTextBoundaryEvent(metadata: ISynthesisMetadata): void {\r\n        this.updateTextOffset(metadata.Data.text.Text, metadata.Type);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public onSessionEnd(metadata: ISynthesisMetadata): void {\r\n        this.privAudioDuration = metadata.Data.Offset;\r\n    }\r\n\r\n    public async constructSynthesisResult(): Promise<SpeechSynthesisResult> {\r\n        const audioBuffer: ArrayBuffer = await this.getAllReceivedAudioWithHeader();\r\n        return new SpeechSynthesisResult(\r\n            this.requestId,\r\n            ResultReason.SynthesizingAudioCompleted,\r\n            audioBuffer,\r\n            undefined,\r\n            this.extraProperties,\r\n            this.audioDuration\r\n        );\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent(event: SpeechSynthesisEvent): void {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Check if the text is an XML(SSML) tag\r\n     * @param text\r\n     * @private\r\n     */\r\n    private static isXmlTag(text: string): boolean {\r\n        return text.length >= 2 && text[0] === \"<\" && text[text.length - 1] === \">\";\r\n    }\r\n\r\n    private updateTextOffset(text: string, type: MetadataType): void {\r\n        if (type === MetadataType.WordBoundary) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privTextOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.privSentenceOffset = this.privRawText.indexOf(text, this.privNextSearchSentenceIndex);\r\n            if (this.privSentenceOffset >= 0) {\r\n                this.privNextSearchSentenceIndex = this.privSentenceOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privSentenceOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if current idx is in XML(SSML) tag\r\n     * @param idx\r\n     * @private\r\n     */\r\n    private withinXmlTag(idx: number): boolean {\r\n        return this.privRawText.indexOf(\"<\", idx + 1) > this.privRawText.indexOf(\">\", idx + 1);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PropertyId, SpeechSynthesizer } from \"../sdk/Exports\";\r\n\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | object): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n\r\n    public setSynthesisSection(speechSynthesizer: SpeechSynthesizer): void {\r\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext(speechSynthesizer);\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n    }\r\n\r\n    private buildSynthesisContext(speechSynthesizer: SpeechSynthesizer): ISynthesisSection {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!speechSynthesizer?.bookmarkReached),\r\n                    punctuationBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestPunctuationBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                    sentenceBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestSentenceBoundary, false),\r\n                    sessionEndEnabled: true,\r\n                    visemeEnabled: (!!speechSynthesizer?.visemeReceived),\r\n                    wordBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestWordBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: speechSynthesizer?.autoDetectSourceLanguage\r\n            }\r\n        } as ISynthesisSection;\r\n    }\r\n}\r\n\r\ninterface ISynthesisSection {\r\n    audio: {\r\n        outputFormat: string;\r\n        metadataOptions: {\r\n            bookmarkEnabled: boolean;\r\n            wordBoundaryEnabled: string;\r\n            punctuationBoundaryEnabled: string;\r\n            visemeEnabled: boolean;\r\n            sentenceBoundaryEnabled: string;\r\n            sessionEndEnabled: boolean;\r\n        };\r\n    };\r\n    language: {\r\n        autoDetection: boolean;\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    Synthesizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSynthesizer: Synthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => void = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected receiveMessageOverride: () => void = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => void = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    protected privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privActivityTemplate: string;\r\n    protected privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext();\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            this.onSynthesisStarted(requestId);\r\n\r\n            void this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e as string);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    public async stopSpeaking(): Promise<void> {\r\n        await this.connectImpl();\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"synthesis.control\",\r\n            this.privSynthesisTurn.requestId,\r\n            \"application/json\",\r\n            JSON.stringify({\r\n                action: \"stop\"\r\n            })\r\n        ));\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        _cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        this.onSynthesisCancelled(result);\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected processTypeSpecificMessages(_connectionMessage: SpeechConnectionMessage): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse(connectionMessage.textBody);\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            this.onSynthesizing(connectionMessage.binaryBody);\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                case MetadataType.SentenceBoundary:\r\n                                    this.privSynthesisTurn.onTextBoundaryEvent(metadata);\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Duration,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        metadata.Type === MetadataType.WordBoundary\r\n                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset,\r\n                                        metadata.Data.text.BoundaryType);\r\n                                    this.onWordBoundary(wordBoundaryEventArgs);\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n                                    this.onBookmarkReached(bookmarkEventArgs);\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n                                        this.onVisemeReceived(visemeEventArgs);\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.AvatarSignal:\r\n                                    this.onAvatarEvent(metadata);\r\n                                    break;\r\n                                case MetadataType.SessionEnd:\r\n                                    this.privSynthesisTurn.onSessionEnd(metadata);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            result = await this.privSynthesisTurn.constructSynthesisResult();\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error as string);\r\n                            }\r\n                        }\r\n                        this.onSynthesisCompleted(result);\r\n                        break;\r\n\r\n                    default:\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext(connection: IConnection): Promise<void> {\r\n        this.setSynthesisContextSynthesisSection();\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected abstract setSynthesisContextSynthesisSection(): void;\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise != null) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n            }\r\n        }, (error: string): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(true);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig(connection: IConnection, SpeechServiceConfigJson: string): Promise<void> {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage(connection: IConnection, ssml: string, requestId: string): Promise<void> {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        this.setSpeechConfigSynthesisSection();\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n\r\n    protected onAvatarEvent(_metadata: ISynthesisMetadata): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisStarted(_requestId: string): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesizing(_audio: ArrayBuffer): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCancelled(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCompleted(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onWordBoundary(_wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onVisemeReceived(_visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onBookmarkReached(_bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        return;\r\n    }\r\n\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection\";\r\nimport { PropertyId } from \"./PropertyId\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for connection events like Connected/Disconnected.\r\n * Added in version 1.2.0\r\n */\r\nexport class ConnectionEventArgs extends SessionEventArgs {\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ConnectionMessage\r\n} from \"./Exports\";\r\n\r\nexport class ConnectionMessageEventArgs {\r\n\r\n    private privConnectionMessage: ConnectionMessage;\r\n\r\n    public constructor(message: ConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n    }\r\n\r\n    /**\r\n     * Gets the <see cref=\"ConnectionMessage\"/> associated with this <see cref=\"ConnectionMessageEventArgs\"/>.\r\n     */\r\n    public get message(): ConnectionMessage {\r\n        return this.privConnectionMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message event.\r\n     */\r\n    public toString(): string {\r\n        return \"Message: \" + this.privConnectionMessage.toString();\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for any Service message event\r\n * Added in version 1.9.0\r\n */\r\n\r\nexport class ServiceEventArgs extends SessionEventArgs {\r\n    private privJsonResult: string;\r\n    private privEventName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} json - json payload of the USP message.\r\n     */\r\n    public constructor(json: string,  name: string, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privJsonResult = json;\r\n        this.privEventName = name;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this.privEventName;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    marshalPromiseToCallbacks,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    ConversationTranscriber,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber): Connection {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            marshalPromiseToCallbacks(this.privInternalData.disconnect(), cb, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string | object): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                this.privInternalData.speechContext.setSection(propertyName, propertyValue);\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* eslint-disable no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IActivityPayloadResponse {\r\n    conversationId: string;\r\n    messageDataStreamType: number;\r\n    messagePayload: string | object;\r\n    version: number;\r\n}\r\n\r\nexport class ActivityPayloadResponse implements IActivityPayloadResponse {\r\n    private privActivityResponse: IActivityPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privActivityResponse = JSON.parse(json) as IActivityPayloadResponse;\r\n    }\r\n\r\n    public static fromJSON(json: string): ActivityPayloadResponse {\r\n        return new ActivityPayloadResponse(json);\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privActivityResponse.conversationId;\r\n    }\r\n\r\n    public get messageDataStreamType(): number {\r\n        return this.privActivityResponse.messageDataStreamType;\r\n    }\r\n\r\n    public get messagePayload(): string | object {\r\n        return this.privActivityResponse.messagePayload;\r\n    }\r\n\r\n    public get version(): number {\r\n        return this.privActivityResponse.version;\r\n    }\r\n}\r\n\r\nexport enum MessageDataStreamType {\r\n    None = 0,\r\n    TextToSpeechAudio = 1,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Connection } from \"./Connection\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - An optional connection factory to use to generate the endpoint URIs, headers to set, etc...\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, connectionFactory?: IConnectionFactory) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, connectionFactory || new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * TranslationRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechTranslationConfig: SpeechTranslationConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): TranslationRecognizer {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechTranslationConfigImpl.properties);\r\n        return new TranslationRecognizer(speechTranslationConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\r\n     * for single shot recognition like command or query. For long-running recognition,\r\n     * use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public onConnection(): void { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports\";\r\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\r\n     * result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        switch (simpleSpeech.RecognitionStatus) {\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetailsBase\r\n */\r\nexport class CancellationDetailsBase {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    protected constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetailsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member CancellationDetailsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get ErrorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports\";\r\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionResult,\r\n    SpeechSynthesisResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult | SpeechSynthesisResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (result instanceof RecognitionResult && !!result.json) {\r\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails || EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    ConversationTranscriber,\r\n    MeetingTranscriber,\r\n    Recognizer\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Allows additions of new phrases to improve speech recognition.\r\n *\r\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\r\n * to the speech service.\r\n */\r\nexport class PhraseListGrammar {\r\n    private privGrammerBuilder: DynamicGrammarBuilder;\r\n\r\n    private constructor(recogBase: ServiceRecognizerBase) {\r\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\r\n     * @param recognizer The recognizer to add phrase lists to.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber | MeetingTranscriber): PhraseListGrammar {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        return new PhraseListGrammar(recoBase);\r\n    }\r\n\r\n    /**\r\n     * Adds a single phrase to the current recognizer.\r\n     * @param phrase Phrase to add.\r\n     */\r\n    public addPhrase(phrase: string): void {\r\n        this.privGrammerBuilder.addPhrase(phrase);\r\n    }\r\n\r\n    /**\r\n     * Adds multiple phrases to the current recognizer.\r\n     * @param phrases Array of phrases to add.\r\n     */\r\n    public addPhrases(phrases: string[]): void {\r\n        this.privGrammerBuilder.addPhrase(phrases);\r\n    }\r\n\r\n    /**\r\n     * Clears all phrases added to the current recognizer.\r\n     */\r\n    public clear(): void {\r\n        this.privGrammerBuilder.clearPhrases();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { Contracts } from \"./Contracts\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports\";\r\nimport { OutputFormat } from \"./OutputFormat\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set applicationId(value: string) { }\r\n\r\n    public static get DialogTypes(): { BotFramework: string; CustomCommands: string } {\r\n        return {\r\n            BotFramework: \"bot_framework\",\r\n            CustomCommands: \"custom_commands\"\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        void def;\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        void channel;\r\n        this.privSpeechConfig.setServiceProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     * caller must refresh it by setting the authorizationToken property on the corresponding\r\n     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     * original configuration's authorization token. Create a new configuration instance or set the\r\n     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     * further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     * property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     * wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        void botId;\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     * use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { AgentConfig } from \"../common.speech/Exports\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class DialogEvent extends PlatformEvent {\r\n\r\n    public constructor(eventName: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n    }\r\n}\r\n\r\nexport class SendingAgentContextMessageEvent extends DialogEvent {\r\n    private privAgentConfig: AgentConfig;\r\n\r\n    public constructor(agentConfig: AgentConfig) {\r\n        super(\"SendingAgentContextMessageEvent\");\r\n        this.privAgentConfig = agentConfig;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PullAudioOutputStream } from \"./Audio/AudioOutputStream\";\r\n\r\ninterface IActivity {\r\n    conversation?: any;\r\n    id?: string;\r\n    replyToId?: string;\r\n    type?: string;\r\n    text?: string;\r\n    speak?: any;\r\n}\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class ActivityReceivedEventArgs\r\n */\r\nexport class ActivityReceivedEventArgs {\r\n    private privActivity: IActivity;\r\n    private privAudioStream: PullAudioOutputStream;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {any} activity - The activity..\r\n     */\r\n    public constructor(activity: any, audioStream?: PullAudioOutputStream) {\r\n        this.privActivity = activity as IActivity;\r\n        this.privAudioStream = audioStream;\r\n    }\r\n\r\n    /**\r\n     * Gets the received activity\r\n     * @member ActivityReceivedEventArgs.prototype.activity\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received activity.\r\n     */\r\n    public get activity(): any {\r\n        return this.privActivity;\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStream {\r\n        return this.privAudioStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface ITurnStatusResponsePayload {\r\n    interactionId: string;\r\n    conversationId: string;\r\n    statusCode: any;\r\n}\r\n\r\nexport class TurnStatusResponsePayload implements ITurnStatusResponsePayload {\r\n    private privMessageStatusResponse: ITurnStatusResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privMessageStatusResponse = JSON.parse(json) as ITurnStatusResponsePayload;\r\n    }\r\n\r\n    public static fromJSON(json: string): TurnStatusResponsePayload {\r\n        return new TurnStatusResponsePayload(json);\r\n    }\r\n\r\n    public get interactionId(): string {\r\n        return this.privMessageStatusResponse.interactionId;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privMessageStatusResponse.conversationId;\r\n    }\r\n\r\n    public get statusCode(): any {\r\n        // Payloads may contain a limited set of textual representations or a numeric status\r\n        // code. The textual values are here converted into numeric ones.\r\n        switch (this.privMessageStatusResponse.statusCode) {\r\n            case \"Success\":\r\n                return 200;\r\n            case \"Failed\":\r\n                return 400;\r\n            case \"TimedOut\":\r\n                return 429;\r\n            default:\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n                return this.privMessageStatusResponse.statusCode;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ITurnStatusResponsePayload,\r\n    TurnStatusResponsePayload\r\n    } from \"../common.speech/ServiceMessages/TurnStatusPayload\";\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class TurnStatusReceivedEventArgs\r\n */\r\nexport class TurnStatusReceivedEventArgs {\r\n    private privTurnStatus: ITurnStatusResponsePayload;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} turnStatus - The JSON-encoded turn status message.\r\n     */\r\n    public constructor(turnStatus: string) {\r\n        this.privTurnStatus = TurnStatusResponsePayload.fromJSON(turnStatus);\r\n    }\r\n\r\n    /**\r\n     * Gets the interaction identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.interactionId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received interaction id.\r\n     */\r\n    public get interactionId(): any {\r\n        return this.privTurnStatus.interactionId;\r\n    }\r\n\r\n    /**\r\n     * Gets the conversation identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.conversationId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received conversation id.\r\n     */\r\n    public get conversationId(): any {\r\n        return this.privTurnStatus.conversationId;\r\n    }\r\n\r\n    /**\r\n     * Gets the received turn status code.\r\n     * @member TurnStatusReceivedEventArgs.prototype.statusCode\r\n     * @function\r\n     * @public\r\n     * @returns {number} the received turn status.\r\n     */\r\n    public get statusCode(): number {\r\n        return this.privTurnStatus.statusCode; // eslint-disable-line @typescript-eslint/no-unsafe-return\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\r\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload\";\r\n\r\nexport class DialogServiceTurnState {\r\n    private privRequestId: string;\r\n    private privIsCompleted: boolean;\r\n    private privAudioStream: PullAudioOutputStreamImpl;\r\n    private privTimeoutToken: any;\r\n    private privTurnManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(manager: DialogServiceTurnStateManager, requestId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privIsCompleted = false;\r\n        this.privAudioStream = null;\r\n        this.privTurnManager = manager;\r\n        this.resetTurnEndTimeout();\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStreamImpl {\r\n        // Called when is needed to stream.\r\n        this.resetTurnEndTimeout();\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\r\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\r\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\r\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public endAudioStream(): void {\r\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\r\n            this.privAudioStream.close();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.endAudioStream();\r\n    }\r\n\r\n    private resetTurnEndTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.privTimeoutToken = setTimeout((): void => {\r\n            this.privTurnManager.CompleteTurn(this.privRequestId);\r\n            return;\r\n        }, 2000);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../common/Error\";\r\nimport { DialogServiceTurnState } from \"./DialogServiceTurnState\";\r\n\r\nexport class DialogServiceTurnStateManager {\r\n    private privTurnMap: Map<string, DialogServiceTurnState>;\r\n\r\n    public constructor() {\r\n        this.privTurnMap = new Map<string, DialogServiceTurnState>();\r\n        return;\r\n    }\r\n\r\n    public StartTurn(id: string): DialogServiceTurnState {\r\n        if (this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: There is already a turn with id:\" + id);\r\n        }\r\n        const turnState: DialogServiceTurnState = new DialogServiceTurnState(this, id);\r\n        this.privTurnMap.set(id, turnState);\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public GetTurn(id: string): DialogServiceTurnState {\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public CompleteTurn(id: string): DialogServiceTurnState {\r\n        if (!this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: Received turn end for an unknown turn id:\" + id);\r\n        }\r\n        const turnState = this.privTurnMap.get(id);\r\n        turnState.complete();\r\n        this.privTurnMap.delete(id);\r\n        return turnState;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.keyword\r\nexport interface ISpeechKeyword {\r\n    Status: string;\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class SpeechKeyword implements ISpeechKeyword {\r\n    private privSpeechKeyword: ISpeechKeyword;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechKeyword = JSON.parse(json) as ISpeechKeyword;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechKeyword {\r\n        return new SpeechKeyword(json);\r\n    }\r\n\r\n    public get Status(): string {\r\n        return this.privSpeechKeyword.Status;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechKeyword.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechKeyword.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechKeyword.Duration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ReplayableAudioNode\r\n} from \"../common.browser/Exports\";\r\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents\";\r\nimport {\r\n    BackgroundEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    DialogEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConfig,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    TurnStatusReceivedEventArgs,\r\n} from \"../sdk/Exports\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n    SpeechKeyword,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n\r\n    private privDialogAudioSource: IAudioSource;\r\n\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n    private privEvents: EventSource<DialogEvent>;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privEvents = new EventSource<DialogEvent>();\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveDialogMessageOverride();\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride =\r\n            (recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallback: (e: string) => void): Promise<void> =>\r\n            this.listenOnce(recoMode, successCallback, errorCallback);\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.dialogConnectImpl(connection);\r\n        this.configConnectionOverride = (connection: IConnection): Promise<IConnection> => this.configConnection(connection);\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privDialogAudioSource = audioSource;\r\n\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                this.terminateMessageLoop = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            messagePayload: JSON.parse(message),\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"agent\",\r\n            requestId,\r\n            \"application/json\",\r\n            agentMessageJson));\r\n\r\n    }\r\n\r\n    protected async privDisconnect(): Promise<void> {\r\n        await this.cancelRecognition(this.privRequestSession.sessionId,\r\n            this.privRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        return;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.keyword\":\r\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\r\n                    keyword.Text,\r\n                    keyword.Duration,\r\n                    keyword.Offset,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (keyword.Status !== \"Accepted\") {\r\n                    this.privLastResult = result;\r\n                }\r\n\r\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognized) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    this.handleResponseMessage(connectionMessage);\r\n\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Duration\r\n                    undefined, // Offset\r\n                    undefined, // Language\r\n                    undefined, // Language Detection Confidence\r\n                    undefined, // Speaker Id\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async listenOnce(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<void> {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\r\n\r\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, async (error: string): Promise<void> => {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    private receiveDialogMessageOverride(): Promise<void> {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        const loop = async (): Promise<void> => {\r\n            try {\r\n                const isDisposed: boolean = this.isDisposed();\r\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                if (isDisposed || terminateMessageLoop) {\r\n                    // We're done.\r\n                    communicationCustodian.resolve(undefined);\r\n                    return;\r\n                }\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const message: ConnectionMessage = await connection.read();\r\n\r\n                if (!message) {\r\n                    return loop();\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        {\r\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.StartTurn(turnRequestId);\r\n                            } else {\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n\r\n                        let json: string;\r\n\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        {\r\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnEndRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                            } else {\r\n                                // Audio session turn\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n                                }\r\n\r\n                                // report result to promise.\r\n                                if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                    try {\r\n                                        this.privSuccessCallback(this.privLastResult);\r\n                                        this.privLastResult = null;\r\n                                    } catch (e) {\r\n                                        if (!!this.privErrorCallback) {\r\n                                            this.privErrorCallback(e as string);\r\n                                        }\r\n                                    }\r\n                                    // Only invoke the call back once.\r\n                                    // and if it's successful don't invoke the\r\n                                    // error after that.\r\n                                    this.privSuccessCallback = undefined;\r\n                                    this.privErrorCallback = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        try {\r\n                            const processed = await this.processTypeSpecificMessages(connectionMessage);\r\n                            if (!processed) {\r\n                                if (!!this.serviceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            //\r\n                        }\r\n                }\r\n                const ret: Promise<void> = loop();\r\n\r\n                return ret;\r\n            } catch (error) {\r\n                this.terminateMessageLoop = true;\r\n                communicationCustodian.resolve();\r\n            }\r\n        };\r\n\r\n        loop().catch((reason: string): void => {\r\n            Events.instance.onEvent(new BackgroundEvent(reason));\r\n        });\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        try {\r\n            await this.receiveDialogMessageOverride();\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configConnection(connection: IConnection): Promise<IConnection> {\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return Promise.reject(\"Connection to service terminated.\");\r\n        }\r\n\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendAgentConfig(connection);\r\n        return connection;\r\n    }\r\n\r\n    private async sendPreAudioMessages(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.addKeywordContextData();\r\n        await this.sendSpeechContext(connection, true);\r\n        await this.sendAgentContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private sendAgentConfig(connection: IConnection): Promise<void> {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig\r\n                .parameters\r\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\r\n\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private sendAgentContext(connection: IConnection): Promise<void> {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Language,\r\n            serviceResult.LanguageDetectionConfidence,\r\n            undefined,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private handleResponseMessage(responseMessage: SpeechConnectionMessage): void {\r\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\r\n        // event according to the message type that's specified.\r\n        const responsePayload: { messageType: string } = JSON.parse(responseMessage.textBody) as { messageType: string };\r\n        switch (responsePayload.messageType.toLowerCase()) {\r\n            case \"message\":\r\n                const responseRequestId = responseMessage.requestId.toUpperCase();\r\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\r\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                // update the conversation Id\r\n                if (activityPayload.conversationId) {\r\n                    const updateAgentConfig = this.agentConfig.get();\r\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                    this.agentConfig.set(updateAgentConfig);\r\n                }\r\n\r\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\r\n                    activityPayload,\r\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\r\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                if (!!this.privDialogServiceConnector.activityReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"messagestatus\":\r\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.turnStatusReceived(\r\n                            this.privDialogServiceConnector,\r\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Events.instance.onEvent(\r\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onEvent(event: DialogEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private addKeywordContextData(): void {\r\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\r\n        if (keywordPropertyValue === undefined) {\r\n            return;\r\n        }\r\n\r\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\r\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\r\n\r\n        const keywords = keywordPropertyValue.split(\";\");\r\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\r\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\r\n\r\n        const keywordDefinitionArray = [];\r\n        for (let i = 0; i < keywords.length; i++) {\r\n            const definition: { [section: string]: any } = {};\r\n            definition.text = keywords[i];\r\n            if (i < keywordOffsets.length) {\r\n                definition.offset = Number(keywordOffsets[i]);\r\n            }\r\n            if (i < keywordDurations.length) {\r\n                definition.duration = Number(keywordDurations[i]);\r\n            }\r\n            keywordDefinitionArray.push(definition);\r\n        }\r\n\r\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\r\n        this.speechContext.setSection(\"keywordDetection\", [{\r\n            clientDetectedKeywords: keywordDefinitionArray,\r\n            onReject: { action: \"EndOfTurn\" },\r\n            type: \"startTrigger\"\r\n        }]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines channels used to pass property settings to service.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ServicePropertyChannel {\r\n    /**\r\n     * Uses URI query parameter to pass property settings to service.\r\n     */\r\n    UriQueryParameter = 0.\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports\";\r\nimport { PropertyId } from \"./PropertyId\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch((): void => {\r\n                // Destroy the recognizer.\r\n                // We've done all we can here.\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                this.dispose(true).catch((): void => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        try {\r\n            this.ensureInitializedContext();\r\n            const audioData = this.formatAudioData(newAudioData);\r\n            const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n            newSamplesData.set(this.samples, 0);\r\n            newSamplesData.set(audioData, this.samples.length);\r\n            this.samples = newSamplesData;\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval((): void => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { VoiceProfileType } from \"./Exports\";\r\n\r\n/**\r\n * Defines Voice Profile class for Speaker Recognition\r\n * @class VoiceProfile\r\n */\r\nexport class VoiceProfile {\r\n    private privId: string;\r\n    private privProfileType: VoiceProfileType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} profileId - profileId of this Voice Profile.\r\n     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.\r\n     */\r\n    public constructor(profileId: string, profileType: VoiceProfileType) {\r\n        this.privId = profileId;\r\n        this.privProfileType = profileType;\r\n    }\r\n\r\n    /**\r\n     * profileId of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileId\r\n     * @function\r\n     * @public\r\n     * @returns {string} profileId of this Voice Profile instance.\r\n     */\r\n    public get profileId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * profileType of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileType\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceProfileType} profile type of this Voice Profile instance.\r\n     */\r\n    public get profileType(): VoiceProfileType {\r\n        return this.privProfileType;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports\";\r\n\r\nexport interface EnrollmentResultDetails {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: number;\r\n    enrollmentsSpeechLength: number;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: number;\r\n    audioLength: number;\r\n    audioSpeechLength: number;\r\n    enrollmentStatus: string;\r\n}\r\n\r\nexport interface EnrollmentResultJSON {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: string;\r\n    enrollmentsSpeechLength: string;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: string;\r\n    audioLength: string;\r\n    audioSpeechLength: string;\r\n    enrollmentStatus: string;\r\n    remainingEnrollments?: number;\r\n    identificationProfileId?: string;\r\n    verificationProfileId?: string;\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileEnrollmentResult\r\n */\r\nexport class VoiceProfileEnrollmentResult {\r\n    private privReason: ResultReason;\r\n    private privDetails: EnrollmentResultDetails;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, json: string, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (!!json) {\r\n                this.privDetails = JSON.parse(json) as EnrollmentResultDetails;\r\n                if (this.privDetails.enrollmentStatus.toLowerCase() === \"enrolling\") {\r\n                    this.privReason = ResultReason.EnrollingVoiceProfile;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get enrollmentsCount(): number {\r\n        return this.privDetails.enrollmentsCount;\r\n    }\r\n\r\n    public get enrollmentsLength(): number {\r\n        return this.privDetails.enrollmentsLength;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get enrollmentResultDetails(): EnrollmentResultDetails {\r\n        return this.privDetails;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public static FromIdentificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getIdentificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static FromVerificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getVerificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private static getIdentificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount || 0,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.identificationProfileId,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n\r\n    private static getVerificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.verificationProfileId,\r\n            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileEnrollmentCancellationDetails\r\n */\r\nexport class VoiceProfileEnrollmentCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.\r\n     * @member VoiceProfileEnrollmentCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileEnrollmentResult): VoiceProfileEnrollmentCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileResult\r\n */\r\nexport class VoiceProfileResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (reason === ResultReason.Canceled) {\r\n            Contracts.throwIfNullOrUndefined(statusText, \"statusText\");\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileCancellationDetails\r\n */\r\nexport class VoiceProfileCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.\r\n     * @member VoiceProfileCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileResult): VoiceProfileCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    ResultReason,\r\n    VoiceProfileResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfilePhraseResult\r\n */\r\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\r\n    private privPhrases: string[] = [];\r\n    private privType: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string, type: string, phraseArray: string[]) {\r\n        super(reason, statusText);\r\n        Contracts.throwIfNullOrUndefined(phraseArray, \"phrase array\");\r\n        this.privType = type;\r\n        if (!!phraseArray && !!phraseArray[0]) {\r\n            this.privPhrases = phraseArray;\r\n        }\r\n    }\r\n\r\n    public get phrases(): string[] {\r\n        return this.privPhrases;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        endpointPath: string,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\r\n            const scenario: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\r\n            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private scenarioToPath(mode: string): string {\r\n        switch (mode) {\r\n            case \"TextIndependentVerification\":\r\n            case \"2\":\r\n                return \"verification/text-independent\";\r\n            case \"TextDependentVerification\":\r\n            case \"1\":\r\n                return \"verification/text-dependent\";\r\n            default:\r\n                return \"identification/text-independent\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"recognition\", connectionId);\r\n    }\r\n}\r\n\r\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"profile\", connectionId);\r\n    }\r\n}\r\n\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Deferred } from \"./Promise\";\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class DefferalMap\r\n */\r\n\r\nexport class DeferralMap {\r\n    private privMap: { [id: string]: Deferred<any> } = {};\r\n\r\n    public add<T>(id: string, deferral: Deferred<T>): void {\r\n        this.privMap[id] = deferral;\r\n    }\r\n\r\n    public getId(id: string): Deferred<any> {\r\n        return this.privMap[id];\r\n    }\r\n\r\n    public complete<T>(id: string, result: T): void {\r\n        try {\r\n            this.privMap[id].resolve(result);\r\n        } catch (error) {\r\n            this.privMap[id].reject(error as string);\r\n        } finally {\r\n            this.privMap[id] = undefined;\r\n         }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    DeferralMap,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    VoiceProfileClient,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n    VoiceProfile\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnrollmentResponse,\r\n    IProfile,\r\n    ISpeechConfigAudioDevice,\r\n    ProfilePhraseResponse,\r\n    ProfileResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\ninterface CreateProfile {\r\n    scenario: string;\r\n    locale: string;\r\n    number: string;\r\n}\r\n\r\ninterface PhraseRequest {\r\n    scenario: string;\r\n    locale: string;\r\n}\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privDeferralMap: DeferralMap = new DeferralMap();\r\n    private privExpectedProfileId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: VoiceProfileClient) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    public set SpeakerAudioSource(audioSource: IAudioSource) {\r\n        this.privSpeakerAudioSource = audioSource;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            // Profile management response for create, fetch, delete, reset\r\n            case \"speaker.profiles\":\r\n                const response: ProfileResponse = JSON.parse(connectionMessage.textBody) as ProfileResponse;\r\n                switch (response.operation.toLowerCase()) {\r\n                    case \"create\":\r\n                        this.handleCreateResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"delete\":\r\n                    case \"reset\":\r\n                        this.handleResultResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"fetch\":\r\n                        const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            // Activation and authorization phrase response\r\n            case \"speaker.phrases\":\r\n                const phraseResponse: ProfilePhraseResponse = JSON.parse(connectionMessage.textBody) as ProfilePhraseResponse;\r\n                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\r\n                processed = true;\r\n                break;\r\n            // Enrollment response\r\n            case \"speaker.profile.enrollment\":\r\n                const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode),\r\n                    !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined,\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\r\n                    this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(connectionMessage.requestId, result);\r\n                }\r\n                this.privRequestSession.onSpeechEnded();\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                ResultReason.Canceled,\r\n                error,\r\n                error,\r\n                );\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            }\r\n    }\r\n\r\n    public async createProfile(profileType: VoiceProfileType, locale: string): Promise<string[]> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.voiceProfileType = profileType.toString();\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const createProfileDeferral = new Deferred<string[]>();\r\n            await conPromise;\r\n            await this.sendCreateProfile(createProfileDeferral, profileType, locale);\r\n            void this.receiveMessage();\r\n            return createProfileDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async resetProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"reset\", profile.profileType, profile);\r\n    }\r\n\r\n    public async deleteProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"delete\", profile.profileType, profile);\r\n    }\r\n\r\n    public async retrieveEnrollmentResult(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        this.privExpectedProfileId = profile.profileId;\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult>(\"fetch\", profile.profileType, profile);\r\n    }\r\n\r\n    public async getAllProfiles(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        this.voiceProfileType = profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult[]>(\"fetch\", profileType);\r\n    }\r\n\r\n    public async getActivationPhrases(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        this.voiceProfileType = profileType.toString();\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const getPhrasesDeferral = new Deferred<VoiceProfilePhraseResult>();\r\n            await conPromise;\r\n            await this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\r\n            void this.receiveMessage();\r\n            return getPhrasesDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async enrollProfile(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        const enrollmentDeferral = new Deferred<VoiceProfileEnrollmentResult>();\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(profile, enrollmentDeferral);\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return enrollmentDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(profile: VoiceProfile, enrollmentDeferral: Deferred<VoiceProfileEnrollmentResult>): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfileEnrollmentResult>(this.privRequestSession.requestId, enrollmentDeferral);\r\n        await this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\r\n    }\r\n\r\n    private async sendPhrasesRequest(getPhrasesDeferral: Deferred<VoiceProfilePhraseResult>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfilePhraseResult>(this.privRequestSession.requestId, getPhrasesDeferral);\r\n        const scenario = this.scenarioFrom(profileType);\r\n\r\n        const profileCreateRequest: PhraseRequest = {\r\n            locale,\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.phrases\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCreateProfile(createProfileDeferral: Deferred<string[]>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<string[]>(this.privRequestSession.requestId, createProfileDeferral);\r\n        const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n\r\n        const profileCreateRequest: CreateProfile = {\r\n            locale,\r\n            number: \"1\",\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.create\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCommonRequest<T>(operation: string, profileType: VoiceProfileType, profile: VoiceProfile = undefined): Promise<T> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const deferral = new Deferred<T>();\r\n            this.privRequestSession.onSpeechContext();\r\n            await conPromise;\r\n            const connection: IConnection = await this.fetchConnection();\r\n            this.privDeferralMap.add<T>(this.privRequestSession.requestId, deferral);\r\n            await this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\r\n            void this.receiveMessage();\r\n            return deferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private async sendBaseRequest(connection: IConnection, operation: string, scenario: string, profile: VoiceProfile): Promise<void> {\r\n        const profileRequest: { maxPageSize?: number; profileIds?: string[]; scenario: string } = {\r\n            scenario\r\n        };\r\n        if (!!profile) {\r\n            profileRequest.profileIds = [ profile.profileId ];\r\n        } else {\r\n            profileRequest.maxPageSize = -1;\r\n        }\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            `speaker.profile.${operation}`,\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileRequest)));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n\r\n    private handlePhrasesResponse(response: ProfilePhraseResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                const reason: ResultReason = ResultReason.Canceled;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else if (!!response.phrases && response.phrases.length > 0) {\r\n                const reason: ResultReason = ResultReason.EnrollingVoiceProfile;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else {\r\n                throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleCreateResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!response.profiles && response.profiles.length > 0) {\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                const profileIds: string[] = response.profiles.map((profile: IProfile): string => profile.profileId);\r\n                this.privDeferralMap.complete<string[]>(requestId, profileIds);\r\n            } else {\r\n                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n            }\r\n        } else {\r\n            throw new Error(\"Voice Profile create failed, no profile id received\");\r\n        }\r\n    }\r\n\r\n    private handleResultResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            const successReason: ResultReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\r\n            const reason: ResultReason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\r\n            const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\r\n            this.privDeferralMap.complete<VoiceProfileResult>(requestId, result);\r\n        } else {\r\n            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleFetchResponse(enrollmentResponse: EnrollmentResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\r\n            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\r\n                this.privExpectedProfileId = undefined;\r\n                const profileInfo: IProfile = enrollmentResponse.profiles[0];\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(profileInfo.enrollmentStatus),\r\n                    JSON.stringify(profileInfo),\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            } else if (enrollmentResponse.profiles.length > 0) {\r\n                const iProfiles: IProfile[] = enrollmentResponse.profiles;\r\n                const profileResults: VoiceProfileEnrollmentResult[] = [];\r\n                for (const profile of iProfiles) {\r\n                    profileResults.push( new VoiceProfileEnrollmentResult(\r\n                        this.enrollmentReasonFrom(profile.enrollmentStatus),\r\n                        JSON.stringify(profile),\r\n                        enrollmentResponse.status.reason,\r\n                    ));\r\n                }\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult[]>(requestId, profileResults);\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private enrollmentReasonFrom(statusCode: string): ResultReason {\r\n        switch (statusCode.toLowerCase()) {\r\n            case \"enrolled\":\r\n                return ResultReason.EnrolledVoiceProfile;\r\n            case \"invalidlocale\":\r\n            case \"invalidphrase\":\r\n            case \"invalidaudioformat\":\r\n            case \"invalidscenario\":\r\n            case \"invalidprofilecount\":\r\n            case \"invalidoperation\":\r\n            case \"audiotooshort\":\r\n            case \"audiotoolong\":\r\n            case \"toomanyenrollments\":\r\n            case \"storageconflict\":\r\n            case \"profilenotfound\":\r\n            case \"incompatibleprofiles\":\r\n            case \"incompleteenrollment\":\r\n                return ResultReason.Canceled;\r\n            default:\r\n                return ResultReason.EnrollingVoiceProfile;\r\n        }\r\n    }\r\n\r\n    private scenarioFrom(profileType: VoiceProfileType): string {\r\n        return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName, SpeakerResponse } from \"../common.speech/Exports\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"./Exports\";\r\n\r\nexport enum SpeakerRecognitionResultType {\r\n    Verify,\r\n    Identify\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class SpeakerRecognitionResult\r\n */\r\nexport class SpeakerRecognitionResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privProfileId: string;\r\n    private privScore: number;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(response: SpeakerResponse, resultReason: ResultReason = ResultReason.RecognizedSpeaker, cancellationErrorCode: CancellationErrorCode = CancellationErrorCode.NoError, errorDetails: string = \"\") {\r\n        this.privProperties = new PropertyCollection();\r\n        const resultType = response.scenario === \"TextIndependentIdentification\" ? SpeakerRecognitionResultType.Identify : SpeakerRecognitionResultType.Verify;\r\n        this.privReason = resultReason;\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (resultType === SpeakerRecognitionResultType.Identify) {\r\n                this.privProfileId = response.identificationResult.identifiedProfile.profileId;\r\n                this.privScore = response.identificationResult.identifiedProfile.score;\r\n                this.privReason = ResultReason.RecognizedSpeakers;\r\n            } else {\r\n                this.privScore = response.verificationResult.score;\r\n                if (response.verificationResult.recognitionResult.toLowerCase() !== \"accept\") {\r\n                    this.privReason = ResultReason.NoMatch;\r\n                }\r\n                if (response.verificationResult.profileId !== undefined && response.verificationResult.profileId !== \"\") {\r\n                    this.privProfileId = response.verificationResult.profileId;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = errorDetails;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[cancellationErrorCode]);\r\n        }\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, JSON.stringify(response));\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get profileId(): string {\r\n        return this.privProfileId;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public get score(): number {\r\n        return this.privScore;\r\n    }\r\n}\r\n\r\n/**\r\n * @class SpeakerRecognitionCancellationDetails\r\n */\r\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\r\n     * @member SpeakerRecognitionCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\r\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    VoiceProfileConnectionFactory,\r\n    VoiceServiceRecognizer\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privVoiceAdapter: VoiceServiceRecognizer;\r\n    private privDisposedVoiceAdapter: boolean;\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privVoiceAdapter = this.privReco as VoiceServiceRecognizer;\r\n        this.privDisposedVoiceAdapter = false;\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const profileIds: string[] = await this.privVoiceAdapter.createProfile(profileType, lang);\r\n        return new VoiceProfile(profileIds[0], profileType);\r\n    }\r\n\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        return this.privVoiceAdapter.getAllProfiles(profileType);\r\n        /*\r\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.audioConfig = audioConfig;\r\n        this.privVoiceAdapter.SpeakerAudioSource = configImpl;\r\n\r\n        return this.privVoiceAdapter.enrollProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.deleteProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.resetProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Clean up object and close underlying connection\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @async\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedVoiceAdapter) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedVoiceAdapter = true;\r\n\r\n        if (disposing) {\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ISpeechConfigAudioDevice,\r\n    SpeakerResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeakerServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerRecognizer: SpeakerRecognizer;\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privResultDeferral: Deferred<SpeakerRecognitionResult>;\r\n    private privSpeakerModel: SpeakerRecognitionModel;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: SpeakerRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerRecognizer = recognizer;\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.recognizeSpeaker = (model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> => this.recognizeSpeakerOnce(model);\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speaker.response\":\r\n                const response: SpeakerResponse = JSON.parse(connectionMessage.textBody) as SpeakerResponse;\r\n                let result: SpeakerRecognitionResult;\r\n                if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.Canceled,\r\n                        CancellationErrorCode.ServiceError,\r\n                        response.status.reason\r\n                        );\r\n                } else {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.RecognizedSpeaker,\r\n                        );\r\n                }\r\n                if (!!this.privResultDeferral) {\r\n                    this.privResultDeferral.resolve(result);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privResultDeferral) {\r\n            const result: SpeakerRecognitionResult = new SpeakerRecognitionResult(\r\n                {\r\n                    scenario: this.privSpeakerModel.scenario,\r\n                    status: { statusCode: error, reason: error }\r\n                },\r\n                ResultReason.Canceled,\r\n                errorCode,\r\n                error\r\n                );\r\n            try {\r\n                this.privResultDeferral.resolve(result);\r\n            } catch (error) {\r\n                this.privResultDeferral.reject(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async recognizeSpeakerOnce(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        this.privSpeakerModel = model;\r\n        this.voiceProfileType = model.scenario;\r\n        if (!this.privResultDeferral) {\r\n            this.privResultDeferral = new Deferred<SpeakerRecognitionResult>();\r\n        }\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(this.extractSpeakerContext(model));\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return this.privResultDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(context: SpeakerContext): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await this.sendSpeakerRecognition(connection, context);\r\n        // await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private async sendSpeakerRecognition(connection: IConnection, context: SpeakerContext): Promise<void> {\r\n        const speakerContextJson = JSON.stringify(context);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            speakerContextJson));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Language Identification mode\r\n * @class LanguageIdMode\r\n */\r\nexport enum LanguageIdMode {\r\n\r\n    /**\r\n     * Detect language at audio start\r\n     * @member LanguageIdMode.AtStart\r\n     */\r\n    AtStart,\r\n\r\n    /**\r\n     * Continuously detect language\r\n     * @member LanguageIdMode.Continuous\r\n     */\r\n    Continuous,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeakerRecognitionConnectionFactory,\r\n    SpeakerServiceRecognizer,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privDisposedSpeakerRecognizer: boolean;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n    /**\r\n     * Initializes an instance of the SpeakerRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privDisposedSpeakerRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        return this.recognizeSpeakerOnceAsyncImpl(model);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     * @async\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected async recognizeSpeakerOnceAsyncImpl(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        await this.implRecognizerStop();\r\n        const result: SpeakerRecognitionResult = await this.privReco.recognizeSpeaker(model);\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedSpeakerRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedSpeakerRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n    private privProfileIds: string[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        for (const profile of profiles) {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n            this.privProfileIds.push(profile.profileId);\r\n        }\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privProfileIds.join(\",\");\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return this.privProfileIds;\r\n    }\r\n\r\n    public get scenario(): string {\r\n        return \"TextIndependentIdentification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines SpeakerVerificationModel class for Speaker Recognition\r\n * Model contains a profile against which to verify a speaker\r\n * @class SpeakerVerificationModel\r\n */\r\nexport class SpeakerVerificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfile: VoiceProfile;\r\n\r\n    private constructor(profile: VoiceProfile) {\r\n        Contracts.throwIfNullOrUndefined(profile, \"VoiceProfile\");\r\n        if (profile.profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            throw new Error(\"Verification model cannot be created from Identification profile\");\r\n        }\r\n        this.privVoiceProfile = profile;\r\n    }\r\n\r\n    public static fromProfile(profile: VoiceProfile): SpeakerVerificationModel {\r\n        return new SpeakerVerificationModel(profile);\r\n    }\r\n\r\n    public get voiceProfile(): VoiceProfile {\r\n        return this.privVoiceProfile;\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return [ this.voiceProfile.profileId ];\r\n    }\r\n\r\n    public get scenario(): string {\r\n        if (this.voiceProfile.profileType === VoiceProfileType.TextDependentVerification) {\r\n            return \"TextDependentVerification\";\r\n        } else {\r\n            return \"TextIndependentVerification\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports\";\r\nimport { LanguageIdMode } from \"./LanguageIdMode\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privLanguageIdMode: LanguageIdMode;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig): void => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdMode} mode LID mode desired.\r\n     * @summary Sets LID operation to desired mode\r\n     */\r\n    public set mode(mode: LanguageIdMode) {\r\n        if (mode === LanguageIdMode.Continuous) {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"Continuous\");\r\n        } else { // LanguageIdMode.AtStart\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        }\r\n        this.privLanguageIdMode = mode;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    SpeechRecognitionResult,\r\n    ConversationTranscriptionResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Output format\r\n * @class AutoDetectSourceLanguageResult\r\n */\r\nexport class AutoDetectSourceLanguageResult {\r\n\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n\r\n    private constructor(language: string, languageDetectionConfidence: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        Contracts.throwIfNullOrUndefined(languageDetectionConfidence, \"languageDetectionConfidence\");\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult} result - The recognition result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult): AutoDetectSourceLanguageResult {\r\n        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a ConversationTranscriptionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromConversationTranscriptionResult\r\n     * @function\r\n     * @public\r\n     * @param {ConversationTranscriptionResult} result - The transcription result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n        public static fromConversationTranscriptionResult(result: ConversationTranscriptionResult): AutoDetectSourceLanguageResult {\r\n            return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n        }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Source Language configuration.\r\n * @class SourceLanguageConfig\r\n */\r\nexport class SourceLanguageConfig {\r\n    private privLanguage: string;\r\n    private privEndpointId: string;\r\n\r\n    private constructor(language: string, endpointId?: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        this.privLanguage = language;\r\n        this.privEndpointId = endpointId;\r\n    }\r\n\r\n    /**\r\n     * @member SourceLanguageConfig.fromLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} language language (eg. \"en-US\") value of config.\r\n     * @param {string?} endpointId endpointId of model bound to given language of config.\r\n     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig\r\n     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.\r\n     * Added in version 1.13.0.\r\n     */\r\n    public static fromLanguage(language: string, endpointId?: string): SourceLanguageConfig {\r\n        return new SourceLanguageConfig(language, endpointId);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privEndpointId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IErrorMessages } from \"../common/Exports\";\r\n/**\r\n * HTTP request helper\r\n */\r\nexport interface IRequestOptions {\r\n    headers?: {[key: string]: string};\r\n    ignoreCache?: boolean;\r\n    timeout?: number;\r\n}\r\n\r\nexport interface IRestParams {\r\n    apiVersion: string;\r\n    authorization: string;\r\n    clientAppId: string;\r\n    contentTypeKey: string;\r\n    correlationId: string;\r\n    languageCode: string;\r\n    nickname: string;\r\n    profanity: string;\r\n    requestId: string;\r\n    roomId: string;\r\n    sessionToken: string;\r\n    subscriptionKey: string;\r\n    subscriptionRegion: string;\r\n    token: string;\r\n}\r\n\r\nexport class RestConfigBase {\r\n\r\n    public static get requestOptions(): IRequestOptions {\r\n        return RestConfigBase.privDefaultRequestOptions;\r\n    }\r\n\r\n    public static get configParams(): IRestParams {\r\n        return RestConfigBase.privDefaultParams;\r\n    }\r\n\r\n    public static get restErrors(): IErrorMessages {\r\n        return RestConfigBase.privRestErrors;\r\n    }\r\n\r\n    private static readonly privDefaultRequestOptions: IRequestOptions = {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 10000,\r\n    };\r\n\r\n    private static readonly privRestErrors: IErrorMessages = {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    };\r\n\r\n    private static readonly privDefaultParams: IRestParams = {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        contentTypeKey: \"Content-Type\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    };\r\n\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    RestConfigBase\r\n} from \"../../common.browser/RestConfigBase\";\r\n\r\nexport class ConversationConnectionConfig extends RestConfigBase {\r\n\r\n    private static readonly privHost: string = \"dev.microsofttranslator.com\";\r\n    private static readonly privRestPath: string = \"/capito/room\";\r\n    private static readonly privApiVersion: string = \"2.0\";\r\n    private static readonly privDefaultLanguageCode: string = \"en-US\";\r\n    private static readonly privClientAppId: string = \"FC539C22-1767-4F1F-84BC-B4D811114F15\";\r\n    private static readonly privWebSocketPath: string = \"/capito/translate\";\r\n    private static readonly privTranscriptionEventKeys: string[] = [\"iCalUid\", \"callId\", \"organizer\", \"FLAC\", \"MTUri\", \"DifferentiateGuestSpeakers\", \"audiorecording\", \"Threadid\", \"OrganizerMri\", \"OrganizerTenantId\", \"UserToken\"];\r\n\r\n    public static get host(): string {\r\n        return ConversationConnectionConfig.privHost;\r\n    }\r\n\r\n    public static get apiVersion(): string {\r\n        return ConversationConnectionConfig.privApiVersion;\r\n    }\r\n\r\n    public static get clientAppId(): string {\r\n        return ConversationConnectionConfig.privClientAppId;\r\n    }\r\n\r\n    public static get defaultLanguageCode(): string {\r\n        return ConversationConnectionConfig.privDefaultLanguageCode;\r\n    }\r\n\r\n    public static get restPath(): string {\r\n        return ConversationConnectionConfig.privRestPath;\r\n    }\r\n\r\n    public static get webSocketPath(): string {\r\n        return ConversationConnectionConfig.privWebSocketPath;\r\n    }\r\n\r\n    public static get transcriptionEventKeys(): string[] {\r\n        return ConversationConnectionConfig.privTranscriptionEventKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    SessionEventArgs,\r\n    } from \"../../sdk/Exports\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n    // set programmatically\r\n    isHost: boolean;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    profanity?: boolean;\r\n    preferredLanguage?: string;\r\n    translateToLanguages?: string[];\r\n    voice?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    public constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant): boolean => p.id !== id);\r\n    }\r\n\r\n    /**\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface ConversationRecognizer {\r\n    isDisposed(): boolean;\r\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\r\n    cancelSpeech?: () => Promise<void>;\r\n    close?: () => Promise<void>;\r\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    connected?: (e: ConnectionEventArgs) => void;\r\n    disconnected?: (e: ConnectionEventArgs) => void;\r\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    keepAlive: \"keep_alive\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport bent, { BentResponse, RequestBody } from \"bent\";\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\ninterface JsonError {\r\n    error?: {\r\n        message: string;\r\n    };\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: { [key: string]: string } = {};\r\n            arr.forEach((line: string): void => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: { [key: string]: any } = {},\r\n        body: any = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: JsonError = {}): IRestResponse => {\r\n            const d: { statusText?: string; statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const send = (postData: RequestBody): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : `?${this.queryParams(queryParams)}`;\r\n            sendRequest(params, postData).then( async (data: BentResponse): Promise<void> => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    try {\r\n                        const j: JsonError = await data.json() as JsonError;\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    } catch {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            }).catch((error: string): void => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.Post && body) {\r\n            this.privHeaders[\"content-type\"] = \"application/json\";\r\n            this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n        }\r\n        send(body as RequestBody);\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private queryParams(params: { [key: string]: string } = {}): string {\r\n        return Object.keys(params)\r\n            .map((k: string): string => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            }).catch( (): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                }).catch( (): void => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error as string);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports\";\r\n\r\nexport class ConversationConnectionMessage extends ConnectionMessage {\r\n    private privConversationMessageType: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n            super(messageType, body, headers, id);\r\n            const json: { type: string } = JSON.parse(this.textBody) as { type: string };\r\n            if (json.type !== undefined) {\r\n                this.privConversationMessageType = json.type;\r\n            }\r\n    }\r\n\r\n    public get conversationMessageType(): string {\r\n        return this.privConversationMessageType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConversationConnectionMessage> {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyId } from \"../../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase\";\r\n\r\nexport class ConversationTranslationCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports\";\r\n\r\nexport class ConversationExpirationEventArgs extends SessionEventArgs {\r\n    private privExpirationTime: number;\r\n\r\n    public constructor(expirationTime: number, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privExpirationTime = expirationTime;\r\n    }\r\n\r\n    /** How much longer until the conversation expires (in minutes). */\r\n    public get expirationTime(): number {\r\n        return this.privExpirationTime;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../PropertyCollection\";\r\nimport { ResultReason } from \"../ResultReason\";\r\nimport { TranslationRecognitionResult } from \"../TranslationRecognitionResult\";\r\nimport { Translations } from \"../Translations\";\r\n\r\nexport class ConversationTranslationResult extends TranslationRecognitionResult {\r\n    private privId: string;\r\n    private privOrigLang: string;\r\n\r\n    public constructor(participantId: string,\r\n                       translations: Translations,\r\n                       originalLanguage?: string,\r\n                       resultId?: string,\r\n                       reason?: ResultReason,\r\n                       text?: string,\r\n                       duration?: number,\r\n                       offset?: number,\r\n                       errorDetails?: string,\r\n                       json?: string,\r\n                       properties?: PropertyCollection) {\r\n        super(translations, resultId, reason, text, duration, offset, undefined, undefined, errorDetails, json, properties);\r\n        this.privId = participantId;\r\n        this.privOrigLang = originalLanguage;\r\n    }\r\n\r\n    /**\r\n     * The unique identifier for the participant this result is for.\r\n     */\r\n    public get participantId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * The original language this result was in.\r\n     */\r\n    public get originalLang(): string {\r\n        return this.privOrigLang;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        //\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { ConversationTranslationResult, SessionEventArgs } from \"../../sdk/Exports\";\r\nimport { IInternalParticipant } from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class MuteAllEventArgs extends SessionEventArgs {\r\n    private privIsMuted: boolean;\r\n\r\n    public constructor(isMuted: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsMuted = isMuted;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n}\r\n\r\nexport class LockRoomEventArgs extends SessionEventArgs {\r\n    private privIsLocked: boolean;\r\n\r\n    public constructor(isLocked: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsLocked = isLocked;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsLocked;\r\n    }\r\n}\r\n\r\nexport class ParticipantEventArgs extends SessionEventArgs {\r\n    private privParticipant: IInternalParticipant;\r\n\r\n    public constructor(participant: IInternalParticipant, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privParticipant = participant;\r\n    }\r\n\r\n    public get participant(): IInternalParticipant {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n\r\nexport class ParticipantAttributeEventArgs extends SessionEventArgs {\r\n    private privValue: boolean | number | string | string[];\r\n    private privKey: string;\r\n    private privParticipantId: string;\r\n\r\n    public constructor(participantId: string, key: string, value: boolean | number | string |  string[], sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privKey = key;\r\n        this.privValue = value;\r\n        this.privParticipantId = participantId;\r\n    }\r\n\r\n    public get value(): boolean | number | string |  string[] {\r\n        return this.privValue;\r\n    }\r\n\r\n    public get key(): string {\r\n        return this.privKey;\r\n    }\r\n    public get id(): string {\r\n        return this.privParticipantId;\r\n    }\r\n}\r\n\r\nexport class ParticipantsListEventArgs extends SessionEventArgs {\r\n\r\n    private privRoomId: string;\r\n    private privSessionToken: string;\r\n    private privTranslateTo: string[];\r\n    private privProfanityFilter: string;\r\n    private privRoomProfanityFilter: string;\r\n    private privIsRoomLocked: boolean;\r\n    private privIsMuteAll: boolean;\r\n    private privParticipants: IInternalParticipant[];\r\n\r\n    public constructor(conversationId: string, token: string, translateTo: string[], profanityFilter: string,\r\n                       roomProfanityFilter: string, isRoomLocked: boolean, isMuteAll: boolean, participants: IInternalParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privRoomId = conversationId;\r\n        this.privSessionToken = token;\r\n        this.privTranslateTo = translateTo;\r\n        this.privProfanityFilter = profanityFilter;\r\n        this.privRoomProfanityFilter = roomProfanityFilter;\r\n        this.privIsRoomLocked = isRoomLocked;\r\n        this.privIsRoomLocked = isMuteAll;\r\n        this.privParticipants = participants;\r\n    }\r\n    public get sessionToken(): string {\r\n        return this.privSessionToken;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privRoomId;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privTranslateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privProfanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privRoomProfanityFilter;\r\n    }\r\n\r\n    public get isRoomLocked(): boolean {\r\n        return this.privIsRoomLocked;\r\n    }\r\n\r\n    public get isMuteAll(): boolean {\r\n        return this.privIsMuteAll;\r\n    }\r\n\r\n    public get participants(): IInternalParticipant[] {\r\n        return this.privParticipants;\r\n    }\r\n}\r\n\r\nexport class ConversationReceivedTranslationEventArgs {\r\n    private privPayload: ConversationTranslationResult;\r\n    private privCommand: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(command: string, payload: ConversationTranslationResult,  sessionId?: string) {\r\n        this.privPayload = payload;\r\n        this.privCommand = command;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get payload(): ConversationTranslationResult {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privCommand;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming websocket commands\r\n */\r\nexport interface ICommandResponsePayload {\r\n    type: string;\r\n    command?: string;\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId?: string;\r\n    roomid?: string;\r\n    value: boolean | number | string;\r\n    token?: string;\r\n}\r\n\r\nconst parseCommandResponse = (json: string): ICommandResponsePayload => JSON.parse(json) as ICommandResponsePayload;\r\n\r\nexport class CommandResponsePayload implements ICommandResponsePayload {\r\n    private privCommandResponse: ICommandResponsePayload;\r\n\r\n    public constructor(json: string) {\r\n        this.privCommandResponse = parseCommandResponse(json);\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privCommandResponse.type;\r\n    }\r\n    public get command(): string {\r\n        return this.privCommandResponse.command;\r\n    }\r\n    public get id(): string {\r\n        return this.privCommandResponse.id;\r\n    }\r\n    public get nickname(): string {\r\n        return this.privCommandResponse.nickname;\r\n    }\r\n    public get participantId(): string {\r\n        return this.privCommandResponse.participantId;\r\n    }\r\n    public get roomid(): string {\r\n        return this.privCommandResponse.roomid;\r\n    }\r\n    public get value(): boolean | number | string {\r\n        return this.privCommandResponse.value;\r\n    }\r\n    public get token(): string {\r\n        return this.privCommandResponse.token;\r\n    }\r\n\r\n    public static fromJSON(json: string): CommandResponsePayload {\r\n        return new CommandResponsePayload(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming list of participants\r\n */\r\nexport interface IParticipantsListPayloadResponse {\r\n    roomid: string;\r\n    id: string;\r\n    command: string;\r\n    participants: IParticipantPayloadResponse[];\r\n    token: string;\r\n    translateTo: string[];\r\n    profanityFilter: string;\r\n    roomProfanityFilter: string;\r\n    roomLocked: boolean;\r\n    muteAll: boolean;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Defines the payload for incoming participant\r\n */\r\nexport interface IParticipantPayloadResponse {\r\n    nickname: string;\r\n    locale: string;\r\n    usetts: boolean;\r\n    ismuted: boolean;\r\n    ishost: boolean;\r\n    participantId: string;\r\n    avatar?: string;\r\n}\r\n\r\nconst parseListResponse = (json: string): IParticipantsListPayloadResponse => JSON.parse(json) as IParticipantsListPayloadResponse;\r\nconst parseParticipantResponse = (json: string): IParticipantPayloadResponse => JSON.parse(json) as IParticipantPayloadResponse;\r\n\r\nexport class ParticipantsListPayloadResponse implements IParticipantsListPayloadResponse {\r\n    private privParticipantsPayloadResponse: IParticipantsListPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantsPayloadResponse = parseListResponse(json);\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privParticipantsPayloadResponse.roomid;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privParticipantsPayloadResponse.id;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privParticipantsPayloadResponse.command;\r\n    }\r\n\r\n    public get participants(): IParticipantPayloadResponse[] {\r\n        return this.privParticipantsPayloadResponse.participants;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privParticipantsPayloadResponse.token;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privParticipantsPayloadResponse.translateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.profanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.roomProfanityFilter;\r\n    }\r\n\r\n    public get roomLocked(): boolean {\r\n        return this.privParticipantsPayloadResponse.roomLocked;\r\n    }\r\n\r\n    public get muteAll(): boolean {\r\n        return this.privParticipantsPayloadResponse.muteAll;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privParticipantsPayloadResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantsListPayloadResponse {\r\n        return new ParticipantsListPayloadResponse(json);\r\n    }\r\n\r\n}\r\n\r\nexport class ParticipantPayloadResponse implements IParticipantPayloadResponse {\r\n\r\n    private privParticipantPayloadResponse: IParticipantPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantPayloadResponse = parseParticipantResponse(json);\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privParticipantPayloadResponse.nickname;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privParticipantPayloadResponse.locale;\r\n    }\r\n\r\n    public get usetts(): boolean {\r\n        return this.privParticipantPayloadResponse.usetts;\r\n    }\r\n\r\n    public get ismuted(): boolean {\r\n        return this.privParticipantPayloadResponse.ismuted;\r\n    }\r\n\r\n    public get ishost(): boolean {\r\n        return this.privParticipantPayloadResponse.ishost;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privParticipantPayloadResponse.participantId;\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privParticipantPayloadResponse.avatar;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantPayloadResponse {\r\n        return new ParticipantPayloadResponse(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming translation messages\r\n */\r\nexport interface ITranslationResponsePayload {\r\n    lang: string;\r\n    translation: string;\r\n}\r\n\r\nexport interface ITranslationCommandMessage {\r\n    translations: ITranslationResponsePayload[];\r\n    id: string;\r\n    language: string;\r\n    nickname: string;\r\n    participantId: string;\r\n    roomid: string;\r\n    timestamp: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ISpeechResponsePayload extends ITranslationCommandMessage {\r\n    recognition: string;\r\n    isFinal: boolean;\r\n}\r\n\r\nexport interface ITextResponsePayload extends ITranslationCommandMessage {\r\n    originalText: string;\r\n}\r\n\r\nconst parseSpeechResponse = (json: string): ISpeechResponsePayload => JSON.parse(json) as ISpeechResponsePayload;\r\nconst parseTextResponse = (json: string): ITextResponsePayload => JSON.parse(json) as ITextResponsePayload;\r\n\r\nexport class SpeechResponsePayload implements ISpeechResponsePayload {\r\n\r\n    private privSpeechResponse: ISpeechResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechResponse = parseSpeechResponse(json);\r\n    }\r\n\r\n    public get recognition(): string {\r\n        return this.privSpeechResponse.recognition;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privSpeechResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privSpeechResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privSpeechResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privSpeechResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privSpeechResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privSpeechResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privSpeechResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privSpeechResponse.type;\r\n    }\r\n\r\n    public get isFinal(): boolean {\r\n        return this.privSpeechResponse.type === \"final\";\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechResponsePayload {\r\n        return new SpeechResponsePayload(json);\r\n    }\r\n\r\n}\r\n\r\nexport class TextResponsePayload implements ITextResponsePayload {\r\n\r\n    private privTextResponse: ITextResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privTextResponse = parseTextResponse(json);\r\n    }\r\n\r\n    public get originalText(): string {\r\n        return this.privTextResponse.originalText;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privTextResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privTextResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privTextResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privTextResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privTextResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privTextResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privTextResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privTextResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): TextResponsePayload {\r\n        return new TextResponsePayload(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationResult,\r\n    ResultReason,\r\n    Translations\r\n} from \"../../sdk/Exports\";\r\nimport {\r\n    CognitiveTokenAuthentication,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase\r\n} from \"../Exports\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\r\nimport { ConversationRequestSession } from \"./ConversationRequestSession\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalParticipant\r\n} from \"./ConversationTranslatorInterfaces\";\r\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer\";\r\nimport {\r\n    CommandResponsePayload,\r\n    IParticipantPayloadResponse,\r\n    IParticipantsListPayloadResponse,\r\n    ITranslationResponsePayload,\r\n    ParticipantPayloadResponse,\r\n    ParticipantsListPayloadResponse,\r\n    SpeechResponsePayload,\r\n    TextResponsePayload\r\n} from \"./ServiceMessages/Exports\";\r\n\r\n/**\r\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\r\n */\r\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\r\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\r\n    private privConversationConnectionFactory: IConnectionFactory;\r\n    private privConversationAuthFetchEventId: string;\r\n    private privConversationAuthentication: IAuthentication;\r\n    private privConversationRequestSession: ConversationRequestSession;\r\n    private privConnectionConfigPromise: Promise<IConnection> = undefined;\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private privLastPartialUtteranceId: string;\r\n    private privConversationIsDisposed: boolean;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\r\n\r\n        this.privLastPartialUtteranceId = \"\";\r\n        this.privConversationServiceConnector = conversationServiceConnector;\r\n        this.privConversationAuthentication = authentication;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveConversationMessageOverride();\r\n        this.recognizeOverride = (): Promise<void> => this.noOp();\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.conversationConnectImpl(connection);\r\n        this.configConnectionOverride = (): Promise<IConnection> => this.configConnection();\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\r\n        this.privConversationConnectionFactory = connectionFactory;\r\n        this.privConversationIsDisposed = false;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return super.isDisposed() || this.privConversationIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privConversationIsDisposed = true;\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n        await super.dispose(reason);\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new ConversationConnectionMessage(\r\n            MessageType.Text,\r\n            message));\r\n    }\r\n\r\n    public async sendMessageAsync(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\r\n    }\r\n\r\n    protected privDisconnect(): Promise<void> {\r\n        if (this.terminateMessageLoop) {\r\n            return;\r\n        }\r\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\r\n            this.privConversationRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    protected async processTypeSpecificMessages(): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n            cancellationReason,\r\n            error,\r\n            errorCode,\r\n            undefined,\r\n            sessionId);\r\n\r\n        try {\r\n            if (!!this.privConversationServiceConnector.canceled) {\r\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\r\n            }\r\n        } catch {\r\n            // continue on error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Establishes a websocket connection to the end point.\r\n     */\r\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Process incoming websocket messages\r\n     */\r\n    private async receiveConversationMessageOverride(): Promise<void> {\r\n        if (this.isDisposed() || this.terminateMessageLoop) {\r\n            return Promise.resolve();\r\n        }\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\r\n            if (this.isDisposed() || this.terminateMessageLoop) {\r\n                // We're done.\r\n                communicationCustodian.resolve();\r\n                return Promise.resolve();\r\n            }\r\n\r\n            if (!message) {\r\n                return this.receiveConversationMessageOverride();\r\n            }\r\n\r\n            const sessionId: string = this.privConversationRequestSession.sessionId;\r\n            const conversationMessageType: string = message.conversationMessageType.toLowerCase();\r\n            let sendFinal: boolean = false;\r\n\r\n            try {\r\n                switch (conversationMessageType) {\r\n                    case \"info\":\r\n                    case \"participant_command\":\r\n                    case \"command\":\r\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\r\n                        switch (commandPayload.command.toLowerCase()) {\r\n\r\n                            /**\r\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\r\n                             * The consuming client must wait for this message to arrive\r\n                             * before starting to send their own data.\r\n                             */\r\n                            case \"participantlist\":\r\n\r\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse): IInternalParticipant => {\r\n                                    const participant: IInternalParticipant = {\r\n                                        avatar: p.avatar,\r\n                                        displayName: p.nickname,\r\n                                        id: p.participantId,\r\n                                        isHost: p.ishost,\r\n                                        isMuted: p.ismuted,\r\n                                        isUsingTts: p.usetts,\r\n                                        preferredLanguage: p.locale\r\n                                    };\r\n                                    return participant;\r\n                                });\r\n\r\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\r\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\r\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\r\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\r\n                                            participantsPayload.muteAll, participantsResult, sessionId));\r\n                                }\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\r\n                             * This is sent at the start of the Conversation\r\n                             */\r\n                            case \"settranslatetolanguages\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\r\n                             * If sent by the participant the setting will effect only their own profanity level.\r\n                             * If sent by the host, the setting will effect all participants including the host.\r\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\r\n                             */\r\n                            case \"setprofanityfiltering\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMute' is sent if the participant has been muted by the host.\r\n                             * Check the 'participantId' to determine if the current user has been muted.\r\n                             */\r\n                            case \"setmute\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setMute,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\r\n                             */\r\n                            case \"setmuteall\":\r\n\r\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\r\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\r\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\r\n                             */\r\n                            case \"roomexpirationwarning\":\r\n\r\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\r\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\r\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\r\n                             */\r\n                            case \"setusetts\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setUseTTS,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\r\n                             */\r\n                            case \"setlockstate\":\r\n\r\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\r\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\r\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'ChangeNickname' is received if a user changes their display name.\r\n                             * Any cached particpiants list should be updated to reflect the display name.\r\n                             */\r\n                            case \"changenickname\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.changeNickname,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'JoinSession' is sent when a user joins the Conversation.\r\n                             */\r\n                            case \"joinsession\":\r\n\r\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const joiningParticipant: IInternalParticipant = {\r\n                                    avatar: joinParticipantPayload.avatar,\r\n                                    displayName: joinParticipantPayload.nickname,\r\n                                    id: joinParticipantPayload.participantId,\r\n                                    isHost: joinParticipantPayload.ishost,\r\n                                    isMuted: joinParticipantPayload.ismuted,\r\n                                    isUsingTts: joinParticipantPayload.usetts,\r\n                                    preferredLanguage: joinParticipantPayload.locale,\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(\r\n                                            joiningParticipant,\r\n                                            sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\r\n                             */\r\n                            case \"leavesession\":\r\n\r\n                                const leavingParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\r\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\r\n                             */\r\n                            case \"disconnectsession\":\r\n\r\n                                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                                const disconnectParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                break;\r\n\r\n                            case \"token\":\r\n                                const token = new CognitiveTokenAuthentication(\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    },\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    });\r\n                                this.authentication = token;\r\n                                this.privConversationServiceConnector.onToken(token);\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * Message not recognized.\r\n                             */\r\n                            default:\r\n                                break;\r\n                        }\r\n                        break;\r\n\r\n                    /**\r\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\r\n                     */\r\n                    case \"partial\":\r\n\r\n                    /**\r\n                     * 'final' (or 'phrase') represents a finalized speech message.\r\n                     */\r\n                    case \"final\":\r\n\r\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\r\n                        const conversationResultReason: ResultReason = (conversationMessageType === \"final\") ? ResultReason.TranslatedParticipantSpeech : ResultReason.TranslatingParticipantSpeech;\r\n\r\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\r\n                            this.getTranslations(speechPayload.translations),\r\n                            speechPayload.language,\r\n                            speechPayload.id,\r\n                            conversationResultReason,\r\n                            speechPayload.recognition,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (speechPayload.isFinal) {\r\n                            // check the length, sometimes empty finals are returned\r\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\r\n                                sendFinal = true;\r\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\r\n                                // send final as normal. We had a non-empty partial for this same utterance\r\n                                // so sending the empty final is important\r\n                                sendFinal = true;\r\n                            } else {\r\n                                // suppress unneeded final\r\n                            }\r\n\r\n                            if (sendFinal) {\r\n                                if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\r\n                                }\r\n                            }\r\n                        } else if (speechResult.text !== undefined) {\r\n                            this.privLastPartialUtteranceId = speechPayload.id;\r\n                            if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\r\n                            }\r\n                        }\r\n\r\n                        break;\r\n\r\n                    /**\r\n                     * \"translated_message\" is a text message or instant message (IM).\r\n                     */\r\n                    case \"translated_message\":\r\n\r\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\r\n                        // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not\r\n\r\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\r\n                            this.getTranslations(textPayload.translations),\r\n                            textPayload.language,\r\n                            undefined,\r\n                            undefined,\r\n                            textPayload.originalText,\r\n                            undefined,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (!!this.privConversationServiceConnector.translationReceived) {\r\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore any unsupported message types\r\n                        break;\r\n                }\r\n            } catch (e) {\r\n                // continue\r\n            }\r\n            return this.receiveConversationMessageOverride();\r\n        } catch (e) {\r\n            this.terminateMessageLoop = true;\r\n        }\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve();\r\n        }\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\r\n\r\n        try {\r\n            const r = await messageRetrievalPromise;\r\n            return r;\r\n        } catch (error) {\r\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigPromise = undefined;\r\n                    return this.configConnection();\r\n                }\r\n                return this.privConnectionConfigPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigPromise = undefined;\r\n                return this.configConnection();\r\n            });\r\n        }\r\n        if (this.terminateMessageLoop) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): IConnection => connection);\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResultTranslations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResultTranslations) {\r\n                translations.set(translation.lang, translation.translation);\r\n            }\r\n        }\r\n\r\n        return translations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport enum ParticipantChangedReason {\r\n    /** Participant has joined the conversation. */\r\n    JoinedConversation,\r\n\r\n    /** Participant has left the conversation. This could be voluntary, or involuntary\r\n     * (e.g. they are experiencing networking issues).\r\n     */\r\n    LeftConversation,\r\n\r\n    /** The participants' state has changed (e.g. they became muted, changed their nickname). */\r\n    Updated\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout,\r\n} from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationRecognizer,\r\n} from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        const webWorkerLoadType: string = this.privProperties.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n            this.privClearTimeout = Timeout.clearTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privClearTimeout = window.clearTimeout.bind(window);\r\n            } else {\r\n                this.privSetTimeout = setTimeout;\r\n                this.privClearTimeout = clearTimeout;\r\n            }\r\n        }\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle update of service auth token (#694)\r\n     */\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversation.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n            }\r\n            this.privConnection = undefined;\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        const PromiseToEmptyCallback = <T>(promise: Promise<T>, cb?: Callback, err?: Callback): void => {\r\n            if (promise !== undefined) {\r\n                promise.then((): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e as string}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any): void => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        // eslint-disable-next-line no-empty\r\n                    } catch (error) { }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        };\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports\";\r\nimport { ParticipantChangedReason } from \"./Exports\";\r\nimport { IParticipant } from \"./IParticipant\";\r\n\r\nexport class ConversationParticipantsChangedEventArgs extends SessionEventArgs {\r\n    private privReason: ParticipantChangedReason;\r\n    private privParticipant: IParticipant[];\r\n\r\n    public constructor(reason: ParticipantChangedReason, participants: IParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privReason = reason;\r\n        this.privParticipant = participants;\r\n    }\r\n\r\n    public get reason(): ParticipantChangedReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get participants(): IParticipant[] {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { RecognitionEventArgs } from \"../Exports\";\r\nimport { ConversationTranslationResult } from \"./Exports\";\r\n\r\nexport class ConversationTranslationEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranslationResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranslationResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranslationResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @returns {ConversationTranslationResult} the recognition result.\r\n     */\r\n    public get result(): ConversationTranslationResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PropertyCollection } from \"../Exports\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    public constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IAuthentication,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig\";\r\nimport { Callback, ConversationInfo, ConversationProperties, IConversation } from \"./IConversation\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        let conversationImpl: ConversationImpl;\r\n        let cb: Callback;\r\n        let err: Callback;\r\n        if (typeof arg2 === \"string\") {\r\n            conversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        } else {\r\n            conversationImpl = new ConversationImpl(speechConfig);\r\n            cb = arg2;\r\n            err = arg3;\r\n            conversationImpl.createConversationAsync(\r\n                ((): void => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }),\r\n                (error: any): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n        }\r\n        return conversationImpl;\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            Contracts.throwIfNullOrTooLong(hostNickname, \"nickname\", 50);\r\n            Contracts.throwIfNullOrTooShort(hostNickname, \"nickname\", 2);\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: ConversationProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\r\n        this.privConversationTranslator = conversationTranslator;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversationTranslator.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this, this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\r\n            queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n        }\r\n\r\n        if (language && !(QueryParameterNames.Language in queryParams)) {\r\n            queryParams[QueryParameterNames.Language] = language;\r\n        }\r\n\r\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\r\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\r\n        if (wordLevelTimings || detailed) {\r\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    RestConfigBase,\r\n    WebsocketConnection,\r\n} from \"../../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../../common/Exports\";\r\nimport { StringUtils } from \"../../common/StringUtils\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    PropertyId\r\n} from \"../../sdk/Exports\";\r\nimport {\r\n    ConversationImpl\r\n} from \"../../sdk/Transcription/Conversation\";\r\nimport { HeaderNames } from \"../HeaderNames\";\r\nimport { QueryParameterNames } from \"../QueryParameterNames\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./../ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    TranscriberConnectionFactory,\r\n    TranslationConnectionFactory,\r\n    WebsocketMessageFormatter,\r\n} from \"./../Exports\";\r\n\r\n/**\r\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\r\n * as well as the virtual microphone array transcription endpoint\r\n */\r\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly CTS_VIRT_MIC_PATH: string = \"/speech/recognition/dynamicaudio\";\r\n\r\n    private privConvGetter: () => ConversationImpl;\r\n\r\n    public constructor(convGetter: () => ConversationImpl) {\r\n        super();\r\n\r\n        Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\r\n        this.privConvGetter = convGetter;\r\n    }\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\r\n\r\n        const convInfo = this.privConvGetter().room;\r\n        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\r\n\r\n        const replacementValues: IStringDictionary<string> = {\r\n            hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\r\n            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\r\n            region: encodeURIComponent(region)\r\n        };\r\n        replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\r\n        replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\r\n        replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\r\n        replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : (\"&\" + QueryParameterNames.CtsIsParticipant);\r\n\r\n        let endpointUrl: string = \"\";\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (isVirtMicArrayEndpoint) {\r\n            // connecting to the conversation transcription virtual microphone array endpoint\r\n            endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n            if (!endpointUrl) {\r\n                const hostName = config.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    \"transcribe.{region}.cts.speech{hostSuffix}\");\r\n\r\n                endpointUrl = \"wss://\" + hostName + \"{path}\";\r\n            }\r\n\r\n            // because the region can change during a session, we support being passed a format string which we can then\r\n            // replace with the correct information.\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            const parsedUrl = new URL(endpointUrl);\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                queryParams[key] = val;\r\n            });\r\n\r\n            const connFactory = new TranscriberConnectionFactory();\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n\r\n            // Some query parameters are required for the CTS endpoint, let's explicity set them here\r\n            queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\r\n            queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\r\n            if (!convInfo.isHost) {\r\n                queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\r\n            }\r\n\r\n            if (!(QueryParameterNames.Format in queryParams)) {\r\n                queryParams[QueryParameterNames.Format] = \"simple\";\r\n            }\r\n\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                parsedUrl.searchParams.set(key, queryParams[key]);\r\n                delete queryParams[key];\r\n            });\r\n\r\n            endpointUrl = parsedUrl.toString();\r\n\r\n        } else {\r\n            // connecting to regular translation endpoint\r\n            const connFactory = new TranslationConnectionFactory();\r\n\r\n            endpointUrl = connFactory.getEndpointUrl(config, true);\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n        }\r\n\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[RestConfigBase.configParams.token] = convInfo.token;\r\n        if (!!authInfo.token) {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\r\n        return new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioConfig,\r\n    SpeechTranslationConfig\r\n} from \"../Exports\";\r\nimport { Callback } from \"./IConversation\";\r\n\r\nexport class ConversationCommon {\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    protected privSpeechTranslationConfig: SpeechTranslationConfig;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    protected handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    protected handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    IAuthentication,\r\n    ServicePropertiesPropertyName,\r\n} from \"../../common.speech/Exports\";\r\nimport { ConversationTranslatorConnectionFactory } from \"../../common.speech/Transcription/ConversationTranslatorConnectionFactory\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports\";\r\nimport { ConversationImpl } from \"./Conversation\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig: AudioConfig, translator: ConversationTranslator, convGetter: () => ConversationImpl) {\r\n\r\n        super(speechConfig, audioConfig, new ConversationTranslatorConnectionFactory(convGetter));\r\n\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            this.recognizing = (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): void => {\r\n                if (!!this.privTranslator.recognizing) {\r\n                    this.privTranslator.recognizing(this.privTranslator, e);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                } else {\r\n                    if (!!this.privTranslator.recognized) {\r\n                        this.privTranslator.recognized(this.privTranslator, e);\r\n                    }\r\n                }\r\n                return;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public set authentication(token: IAuthentication) {\r\n        this.privReco.authentication = token;\r\n    }\r\n\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onCancelSpeech(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for whole conversation results\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for detecting speech/translation results from self\r\n    public recognized: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n    public recognizing: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privCTRecognizer.authentication = token;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | IConversation, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const propertyIdsToCopy: (string | PropertyId)[] = [\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    PropertyId.ConversationTranslator_Host,\r\n                    PropertyId.SpeechServiceConnection_Endpoint,\r\n                    PropertyId.SpeechServiceConnection_ProxyHostName,\r\n                    PropertyId.SpeechServiceConnection_ProxyPassword,\r\n                    PropertyId.SpeechServiceConnection_ProxyPort,\r\n                    PropertyId.SpeechServiceConnection_ProxyUserName,\r\n                    \"ConversationTranslator_MultiChannelAudio\",\r\n                    \"ConversationTranslator_Region\"\r\n                ];\r\n\r\n                for (const prop of propertyIdsToCopy) {\r\n                    const value = this.privProperties.getProperty(prop);\r\n                    if (value) {\r\n                        const key = typeof prop === \"string\" ? prop : PropertyId[prop];\r\n                        this.privSpeechTranslationConfig.setProperty(key, value);\r\n                    }\r\n                }\r\n\r\n                const currentProperties  = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n                for (const prop of Object.keys(currentProperties)) {\r\n                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], ServicePropertyChannel.UriQueryParameter);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n                        this.privConversation.room.isHost = false;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n                this.privConversation.room.isHost = true;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onCancelSpeech();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            const convGetter = (): ConversationImpl => this.privConversation;\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\r\n    private readonly universalUri: string = \"/speech/universal/v2\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setV2UrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = `${host}${this.universalUri}`;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n    protected setV2UrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"../Exports\";\r\n\r\n/**\r\n * Defines result of conversation transcription.\r\n * @class ConversationTranscriptionResult\r\n */\r\nexport class ConversationTranscriptionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id\r\n     * @member ConversationTranscriptionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class ConversationTranscriptionCanceledEventArgs\r\n */\r\nexport class ConversationTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionResult,\r\n    ConversationTranscriber,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\nimport { PhraseDetection, SpeakerDiarization } from \"./ServiceRecognizerBase\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class ConversationTranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privConversationTranscriber: ConversationTranscriber;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationTranscriber: ConversationTranscriber) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationTranscriber);\r\n        this.privConversationTranscriber = conversationTranscriber;\r\n        this.setSpeakerDiarizationJson();\r\n    }\r\n\r\n    protected setSpeakerDiarizationJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = \"Conversation\";\r\n            const speakerDiarization: SpeakerDiarization = {};\r\n            speakerDiarization.mode = \"Anonymous\";\r\n            speakerDiarization.audioSessionId = this.privDiarizationSessionId;\r\n            speakerDiarization.audioOffsetMs = 0;\r\n            phraseDetection.speakerDiarization = speakerDiarization;\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: ConversationTranscriptionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new ConversationTranscriptionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new ConversationTranscriptionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privConversationTranscriber.transcribing) {\r\n                    try {\r\n                        this.privConversationTranscriber.transcribing(this.privConversationTranscriber, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: ConversationTranscriptionEventArgs = new ConversationTranscriptionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privConversationTranscriber.transcribed) {\r\n                            try {\r\n                                this.privConversationTranscriber.transcribed(this.privConversationTranscriber, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privConversationTranscriber.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privConversationTranscriber.canceled(this.privConversationTranscriber, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    // SpeechConnectionFactory,\r\n    ConversationTranscriberConnectionFactory,\r\n    SpeechServiceConfig,\r\n    ConversationTranscriptionServiceRecognizer,\r\n} from \"../../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../Audio/AudioConfig\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n} from \"../Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"../SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class ConversationTranscriber\r\n */\r\nexport class ConversationTranscriber extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new ConversationTranscriberConnectionFactory());\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): ConversationTranscriber {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event transcribing signals that an intermediate transcription result is received.\r\n     * @member ConversationTranscriber.prototype.transcribing\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribing: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event transcriber signals that a final recognition result is received.\r\n     * @member ConversationTranscriber.prototype.transcribed\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribed: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: ConversationTranscriptionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for transcription.\r\n     * @member ConversationTranscriber.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of transcription.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of transcription.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of transcription.\r\n     * @member ConversationTranscriber.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of transcription.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this conversation transcriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops conversation transcription.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        recognizerConfig.isSpeakerDiarizationEnabled = true;\r\n        return new ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig\";\r\nimport { Callback, MeetingInfo, MeetingProperties, IMeeting } from \"./IMeeting\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\r\n\r\nexport abstract class Meeting implements IMeeting {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get meetingId(): string;\r\n    public abstract get meetingInfo(): MeetingInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a meeting\r\n     * @param speechConfig\r\n     * @param meetingId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createMeetingAsync(speechConfig: SpeechTranslationConfig, meetingId: string, arg3?: Callback, arg4?: Callback): Meeting {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        Contracts.throwIfNull(meetingId, \"meetingId\");\r\n        if (meetingId.length === 0) {\r\n            throw new Error(\"meetingId cannot be empty\");\r\n        }\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        const meetingImpl = new MeetingImpl(speechConfig, meetingId);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        return meetingImpl;\r\n    }\r\n\r\n    /** Start a meeting. */\r\n    public abstract startMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a meeting. After this no one will be able to join the meeting. */\r\n    public abstract deleteMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a meeting. */\r\n    public abstract endMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a meeting. This will prevent new participants from joining. */\r\n    public abstract lockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Meeting. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the Meeting. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a meeting using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a meeting. */\r\n    public abstract unlockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the meeting. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class MeetingImpl extends Meeting implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a Meeting impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        this.privConversationId = id;\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the meeting Id\r\n    public get meetingId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get meetingInfo(): MeetingInfo {\r\n        const convId: string = this.meetingId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: MeetingProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: MeetingInfo = { id: convId, participants: p, meetingProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    /**\r\n     * Create a new meeting as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new meeting as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param meeting\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinMeetingAsync(meetingId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(meetingId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, meetingId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteMeetingImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public endMeetingImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.meeting = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const meetingInfo = this.meetingInfo;\r\n                meetingInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const meetingInfo = this.meetingInfo;\r\n        meetingInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingd\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase\";\r\n\r\n/**\r\n * Defines content of a MeetingTranscriptionCanceledEvent.\r\n * @class MeetingTranscriptionCanceledEventArgs\r\n */\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    MeetingTranscriptionCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { ConversationInfo, MeetingInfo } from \"../sdk/Transcription/Exports\";\r\nimport { ConversationProperties } from \"../sdk/Transcription/IConversation\";\r\nimport { MeetingProperties } from \"../sdk/Transcription/IMeeting\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    TranscriberRecognizer\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ConversationServiceRecognizer {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = (connection: IConnection): Promise<void> => this.sendTranscriptionStartJSON(connection);\r\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\r\n            this.privSpeechContext.setWordLevelTimings();\r\n        }\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    public async sendMeetingSpeechEventAsync(info: MeetingInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createMeetingSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        return this.processSpeechMessages(connectionMessage);\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, offset, sessionId);\r\n            this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n            if (!!this.privSuccessCallback) {\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                } catch (e) {\r\n                    if (!!this.privErrorCallback) {\r\n                        this.privErrorCallback(e as string);\r\n                    }\r\n                }\r\n                // Only invoke the call back once.\r\n                // and if it's successful don't invoke the\r\n                // error after that.\r\n                this.privSuccessCallback = undefined;\r\n                this.privErrorCallback = undefined;\r\n            }\r\n        /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new SpeechRecognitionEventArgs(result, duration, sessionId);\r\n            this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: MeetingTranscriptionCanceledEventArgs = new MeetingTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        } else {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection, true);\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            const info: MeetingInfo = this.privTranscriberRecognizer.getMeetingInfo();\r\n            const payload: { [id: string]: any } = this.createMeetingSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        } else {\r\n            const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n            const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        }\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent(connection: IConnection, payload: { [id: string]: any }): Promise<void> {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: ConversationProperties } = { id: \"meeting\", name: command, meeting: info.conversationProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n    private createMeetingSpeechEventPayload(info: MeetingInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: MeetingProperties } = { id: \"meeting\", name: command, meeting: info.meetingProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { AudioStreamFormatImpl } from \"../../sdk/Audio/AudioStreamFormat\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n    private privMeeting: Meeting;\r\n    private isMeetingRecognizer: boolean;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        const audioConfigImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n        this.isMeetingRecognizer = false;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.isMeetingRecognizer = false;\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public set meeting(m: Meeting) {\r\n        Contracts.throwIfNullOrUndefined(m, \"Meeting\");\r\n        this.isMeetingRecognizer = true;\r\n        this.privMeeting = m;\r\n    }\r\n\r\n    public getMeetingInfo(): MeetingInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\r\n        return this.privMeeting.meetingInfo;\r\n    }\r\n\r\n    public IsMeetingRecognizer(): boolean {\r\n        return this.isMeetingRecognizer;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    // Push async join/leave meeting message via serviceRecognizer\r\n    public async pushMeetingEvent(meetingInfo: MeetingInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendMeetingSpeechEventAsync(meetingInfo, command);\r\n    }\r\n\r\n    public async enforceAudioGating(): Promise<void> {\r\n        const audioConfigImpl = this.audioConfig as AudioConfigImpl;\r\n        const format: AudioStreamFormatImpl = await audioConfigImpl.format;\r\n        const channels = format.channels;\r\n        if (channels === 1) {\r\n            if (this.properties.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() !== \"true\") {\r\n                throw new Error(\"Single channel audio configuration for MeetingTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details\");\r\n            }\r\n        } else if (channels !== 8) {\r\n            throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\r\n        }\r\n        return;\r\n    }\r\n\r\n    public connectMeetingCallbacks(transcriber: MeetingTranscriber): void {\r\n        this.isMeetingRecognizer = true;\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports\";\r\nimport {\r\n    Context,\r\n    ISynthesisSectionVideo,\r\n    SpeechServiceConfig\r\n    } from \"./Exports\";\r\n\r\nexport enum SynthesisServiceType {\r\n    Standard,\r\n    Custom,\r\n}\r\n\r\nexport class SynthesizerConfig {\r\n    private privSynthesisServiceType: SynthesisServiceType = SynthesisServiceType.Standard;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privParameters: PropertyCollection;\r\n    public avatarEnabled: boolean = false;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get synthesisServiceType(): SynthesisServiceType {\r\n        return this.privSynthesisServiceType;\r\n    }\r\n\r\n    public set synthesisServiceType(value: SynthesisServiceType) {\r\n        this.privSynthesisServiceType = value;\r\n    }\r\n\r\n    public set synthesisVideoSection(value: ISynthesisSectionVideo) {\r\n        this.privSpeechServiceConfig.Context.synthesis = {\r\n            video: value\r\n        };\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Connection,\r\n    MeetingTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs\r\n} from \"../Exports\";\r\nimport {\r\n    MeetingHandler,\r\n    MeetingImpl,\r\n    MeetingTranscriptionHandler\r\n} from \"./Exports\";\r\nimport { Callback, IMeeting } from \"./IMeeting\";\r\n\r\nexport class MeetingTranscriber implements MeetingTranscriptionHandler {\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the meeting.\r\n     * @member MeetingTranscriber.prototype.MeetingCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingCanceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member MeetingTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognized signals that a final meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member MeetingTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member MeetingTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting started events.\r\n     * @member MeetingTranscriber.prototype.MeetingStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting stopped events.\r\n     * @member MeetingTranscriber.prototype.MeetingStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public meetingStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * MeetingTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member MeetingTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this MeetingTranscriber.\r\n     * @member MeetingTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privRecognizer.internalData;\r\n    }\r\n\r\n    /**\r\n     * @Deprecated\r\n     * @Obsolete\r\n     * Please use the Connection.fromRecognizer pattern to obtain a connection object\r\n     */\r\n    public get connection(): Connection {\r\n        return Connection.fromRecognizer(this.privRecognizer);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * @param {Meeting} meeting - meeting to be recognized\r\n     */\r\n    public joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void {\r\n        /* eslint-disable no-console */\r\n        // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\r\n        /* eslint-enable no-console */\r\n        const meetingImpl = meeting as MeetingImpl;\r\n        Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\r\n\r\n        // ref the meeting object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectMeetingCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current meeting. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        // eslint-disable-next-line\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member MeetingTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member MeetingTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the gender of synthesis voices.\r\n * Added in version 1.20.0.\r\n */\r\nexport enum SynthesisVoiceGender {\r\n\r\n    /** Gender unknown */\r\n    Unknown,\r\n\r\n    /** Female voice */\r\n    Female,\r\n\r\n    /** Male voice */\r\n    Male\r\n}\r\n\r\nexport enum SynthesisVoiceType {\r\n    OnlineNeural = 1,\r\n    OnlineStandard = 2,\r\n    OfflineNeural = 3,\r\n    OfflineStandard = 4,\r\n}\r\n\r\n/**\r\n * Information about Speech Synthesis voice\r\n * Added in version 1.20.0.\r\n * @class VoiceInfo\r\n */\r\nexport class VoiceInfo {\r\n    private privName: string;\r\n    private privLocale: string;\r\n    private privShortName: string;\r\n    private privDisplayName: string;\r\n    private privLocalName: string;\r\n    private privLocaleName: string;\r\n    private privGender: SynthesisVoiceGender;\r\n    private privVoiceType: SynthesisVoiceType;\r\n    private privStyleList: string[] = [];\r\n    private privVoicePath: string;\r\n\r\n    public constructor(json: { Name: string; LocalName: string; DisplayName: string; ShortName: string; Gender: string; VoiceType: string; LocaleName: string ; Locale: string; StyleList: string[] }) {\r\n        this.privVoicePath = \"\";\r\n        if (!!json) {\r\n            this.privName = json.Name;\r\n            this.privLocale = json.Locale;\r\n            this.privShortName = json.ShortName;\r\n            this.privLocaleName = json.LocaleName;\r\n            this.privDisplayName = json.DisplayName;\r\n            this.privLocalName = json.LocalName;\r\n            this.privVoiceType = json.VoiceType.endsWith(\"Standard\") ? SynthesisVoiceType.OnlineStandard : SynthesisVoiceType.OnlineNeural;\r\n            this.privGender = json.Gender === \"Male\" ? SynthesisVoiceGender.Male : json.Gender === \"Female\" ? SynthesisVoiceGender.Female : SynthesisVoiceGender.Unknown;\r\n            if (!!json.StyleList && Array.isArray(json.StyleList)) {\r\n                for (const style of json.StyleList) {\r\n                    this.privStyleList.push(style);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privLocale;\r\n    }\r\n\r\n    public get shortName(): string {\r\n        return this.privShortName;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get localName(): string {\r\n        return this.privLocalName;\r\n    }\r\n\r\n    public get localeName(): string {\r\n        return this.privLocaleName;\r\n    }\r\n\r\n    public get gender(): SynthesisVoiceGender {\r\n        return this.privGender;\r\n    }\r\n\r\n    public get voiceType(): SynthesisVoiceType {\r\n        return this.privVoiceType;\r\n    }\r\n\r\n    public get styleList(): string[] {\r\n        return this.privStyleList;\r\n    }\r\n\r\n    public get voicePath(): string {\r\n        return this.privVoicePath;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig } from \"../common.speech/Exports\";\r\nimport { IAudioDestination, IStringDictionary, Queue } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { PropertyCollection, PropertyId, SpeechConfig, SpeechConfigImpl, SpeechSynthesisResult } from \"./Exports\";\r\n\r\nexport abstract class Synthesizer {\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privRestAdapter: SynthesisRestAdapter;\r\n    protected privProperties: PropertyCollection;\r\n    protected privConnectionFactory: ISynthesisConnectionFactory;\r\n    protected privDisposed: boolean;\r\n    protected privSynthesizing: boolean;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this Synthesizer.\r\n     * @member Synthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member Synthesizer.prototype.autoDetectSourceLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config to initialize the synthesizer.\r\n     */\r\n    protected constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"af-ZA\"]: \"af-ZA-AdriNeural\",\r\n            [\"am-ET\"]: \"am-ET-AmehaNeural\",\r\n            [\"ar-AE\"]: \"ar-AE-FatimaNeural\",\r\n            [\"ar-BH\"]: \"ar-BH-AliNeural\",\r\n            [\"ar-DZ\"]: \"ar-DZ-AminaNeural\",\r\n            [\"ar-EG\"]: \"ar-EG-SalmaNeural\",\r\n            [\"ar-IQ\"]: \"ar-IQ-BasselNeural\",\r\n            [\"ar-JO\"]: \"ar-JO-SanaNeural\",\r\n            [\"ar-KW\"]: \"ar-KW-FahedNeural\",\r\n            [\"ar-LY\"]: \"ar-LY-ImanNeural\",\r\n            [\"ar-MA\"]: \"ar-MA-JamalNeural\",\r\n            [\"ar-QA\"]: \"ar-QA-AmalNeural\",\r\n            [\"ar-SA\"]: \"ar-SA-HamedNeural\",\r\n            [\"ar-SY\"]: \"ar-SY-AmanyNeural\",\r\n            [\"ar-TN\"]: \"ar-TN-HediNeural\",\r\n            [\"ar-YE\"]: \"ar-YE-MaryamNeural\",\r\n            [\"bg-BG\"]: \"bg-BG-BorislavNeural\",\r\n            [\"bn-BD\"]: \"bn-BD-NabanitaNeural\",\r\n            [\"bn-IN\"]: \"bn-IN-BashkarNeural\",\r\n            [\"ca-ES\"]: \"ca-ES-JoanaNeural\",\r\n            [\"cs-CZ\"]: \"cs-CZ-AntoninNeural\",\r\n            [\"cy-GB\"]: \"cy-GB-AledNeural\",\r\n            [\"da-DK\"]: \"da-DK-ChristelNeural\",\r\n            [\"de-AT\"]: \"de-AT-IngridNeural\",\r\n            [\"de-CH\"]: \"de-CH-JanNeural\",\r\n            [\"de-DE\"]: \"de-DE-KatjaNeural\",\r\n            [\"el-GR\"]: \"el-GR-AthinaNeural\",\r\n            [\"en-AU\"]: \"en-AU-NatashaNeural\",\r\n            [\"en-CA\"]: \"en-CA-ClaraNeural\",\r\n            [\"en-GB\"]: \"en-GB-LibbyNeural\",\r\n            [\"en-HK\"]: \"en-HK-SamNeural\",\r\n            [\"en-IE\"]: \"en-IE-ConnorNeural\",\r\n            [\"en-IN\"]: \"en-IN-NeerjaNeural\",\r\n            [\"en-KE\"]: \"en-KE-AsiliaNeural\",\r\n            [\"en-NG\"]: \"en-NG-AbeoNeural\",\r\n            [\"en-NZ\"]: \"en-NZ-MitchellNeural\",\r\n            [\"en-PH\"]: \"en-PH-JamesNeural\",\r\n            [\"en-SG\"]: \"en-SG-LunaNeural\",\r\n            [\"en-TZ\"]: \"en-TZ-ElimuNeural\",\r\n            [\"en-US\"]: \"en-US-JennyNeural\",\r\n            [\"en-ZA\"]: \"en-ZA-LeahNeural\",\r\n            [\"es-AR\"]: \"es-AR-ElenaNeural\",\r\n            [\"es-BO\"]: \"es-BO-MarceloNeural\",\r\n            [\"es-CL\"]: \"es-CL-CatalinaNeural\",\r\n            [\"es-CO\"]: \"es-CO-GonzaloNeural\",\r\n            [\"es-CR\"]: \"es-CR-JuanNeural\",\r\n            [\"es-CU\"]: \"es-CU-BelkysNeural\",\r\n            [\"es-DO\"]: \"es-DO-EmilioNeural\",\r\n            [\"es-EC\"]: \"es-EC-AndreaNeural\",\r\n            [\"es-ES\"]: \"es-ES-AlvaroNeural\",\r\n            [\"es-GQ\"]: \"es-GQ-JavierNeural\",\r\n            [\"es-GT\"]: \"es-GT-AndresNeural\",\r\n            [\"es-HN\"]: \"es-HN-CarlosNeural\",\r\n            [\"es-MX\"]: \"es-MX-DaliaNeural\",\r\n            [\"es-NI\"]: \"es-NI-FedericoNeural\",\r\n            [\"es-PA\"]: \"es-PA-MargaritaNeural\",\r\n            [\"es-PE\"]: \"es-PE-AlexNeural\",\r\n            [\"es-PR\"]: \"es-PR-KarinaNeural\",\r\n            [\"es-PY\"]: \"es-PY-MarioNeural\",\r\n            [\"es-SV\"]: \"es-SV-LorenaNeural\",\r\n            [\"es-US\"]: \"es-US-AlonsoNeural\",\r\n            [\"es-UY\"]: \"es-UY-MateoNeural\",\r\n            [\"es-VE\"]: \"es-VE-PaolaNeural\",\r\n            [\"et-EE\"]: \"et-EE-AnuNeural\",\r\n            [\"fa-IR\"]: \"fa-IR-DilaraNeural\",\r\n            [\"fi-FI\"]: \"fi-FI-SelmaNeural\",\r\n            [\"fil-PH\"]: \"fil-PH-AngeloNeural\",\r\n            [\"fr-BE\"]: \"fr-BE-CharlineNeural\",\r\n            [\"fr-CA\"]: \"fr-CA-SylvieNeural\",\r\n            [\"fr-CH\"]: \"fr-CH-ArianeNeural\",\r\n            [\"fr-FR\"]: \"fr-FR-DeniseNeural\",\r\n            [\"ga-IE\"]: \"ga-IE-ColmNeural\",\r\n            [\"gl-ES\"]: \"gl-ES-RoiNeural\",\r\n            [\"gu-IN\"]: \"gu-IN-DhwaniNeural\",\r\n            [\"he-IL\"]: \"he-IL-AvriNeural\",\r\n            [\"hi-IN\"]: \"hi-IN-MadhurNeural\",\r\n            [\"hr-HR\"]: \"hr-HR-GabrijelaNeural\",\r\n            [\"hu-HU\"]: \"hu-HU-NoemiNeural\",\r\n            [\"id-ID\"]: \"id-ID-ArdiNeural\",\r\n            [\"is-IS\"]: \"is-IS-GudrunNeural\",\r\n            [\"it-IT\"]: \"it-IT-IsabellaNeural\",\r\n            [\"ja-JP\"]: \"ja-JP-NanamiNeural\",\r\n            [\"jv-ID\"]: \"jv-ID-DimasNeural\",\r\n            [\"kk-KZ\"]: \"kk-KZ-AigulNeural\",\r\n            [\"km-KH\"]: \"km-KH-PisethNeural\",\r\n            [\"kn-IN\"]: \"kn-IN-GaganNeural\",\r\n            [\"ko-KR\"]: \"ko-KR-SunHiNeural\",\r\n            [\"lo-LA\"]: \"lo-LA-ChanthavongNeural\",\r\n            [\"lt-LT\"]: \"lt-LT-LeonasNeural\",\r\n            [\"lv-LV\"]: \"lv-LV-EveritaNeural\",\r\n            [\"mk-MK\"]: \"mk-MK-AleksandarNeural\",\r\n            [\"ml-IN\"]: \"ml-IN-MidhunNeural\",\r\n            [\"mr-IN\"]: \"mr-IN-AarohiNeural\",\r\n            [\"ms-MY\"]: \"ms-MY-OsmanNeural\",\r\n            [\"mt-MT\"]: \"mt-MT-GraceNeural\",\r\n            [\"my-MM\"]: \"my-MM-NilarNeural\",\r\n            [\"nb-NO\"]: \"nb-NO-PernilleNeural\",\r\n            [\"nl-BE\"]: \"nl-BE-ArnaudNeural\",\r\n            [\"nl-NL\"]: \"nl-NL-ColetteNeural\",\r\n            [\"pl-PL\"]: \"pl-PL-AgnieszkaNeural\",\r\n            [\"ps-AF\"]: \"ps-AF-GulNawazNeural\",\r\n            [\"pt-BR\"]: \"pt-BR-FranciscaNeural\",\r\n            [\"pt-PT\"]: \"pt-PT-DuarteNeural\",\r\n            [\"ro-RO\"]: \"ro-RO-AlinaNeural\",\r\n            [\"ru-RU\"]: \"ru-RU-SvetlanaNeural\",\r\n            [\"si-LK\"]: \"si-LK-SameeraNeural\",\r\n            [\"sk-SK\"]: \"sk-SK-LukasNeural\",\r\n            [\"sl-SI\"]: \"sl-SI-PetraNeural\",\r\n            [\"so-SO\"]: \"so-SO-MuuseNeural\",\r\n            [\"sr-RS\"]: \"sr-RS-NicholasNeural\",\r\n            [\"su-ID\"]: \"su-ID-JajangNeural\",\r\n            [\"sv-SE\"]: \"sv-SE-SofieNeural\",\r\n            [\"sw-KE\"]: \"sw-KE-RafikiNeural\",\r\n            [\"sw-TZ\"]: \"sw-TZ-DaudiNeural\",\r\n            [\"ta-IN\"]: \"ta-IN-PallaviNeural\",\r\n            [\"ta-LK\"]: \"ta-LK-KumarNeural\",\r\n            [\"ta-SG\"]: \"ta-SG-AnbuNeural\",\r\n            [\"te-IN\"]: \"te-IN-MohanNeural\",\r\n            [\"th-TH\"]: \"th-TH-PremwadeeNeural\",\r\n            [\"tr-TR\"]: \"tr-TR-AhmetNeural\",\r\n            [\"uk-UA\"]: \"uk-UA-OstapNeural\",\r\n            [\"ur-IN\"]: \"ur-IN-GulNeural\",\r\n            [\"ur-PK\"]: \"ur-PK-AsadNeural\",\r\n            [\"uz-UZ\"]: \"uz-UZ-MadinaNeural\",\r\n            [\"vi-VN\"]: \"vi-VN-HoaiMyNeural\",\r\n            [\"zh-CN\"]: \"zh-CN-XiaoxiaoNeural\",\r\n            [\"zh-HK\"]: \"zh-HK-HiuMaanNeural\",\r\n            [\"zh-TW\"]: \"zh-TW-HsiaoChenNeural\",\r\n            [\"zu-ZA\"]: \"zu-ZA-ThandoNeural\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = Synthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Synthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected abstract createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase;\r\n\r\n    // Creates the REST synthesis adapter\r\n    protected abstract createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter;\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Does the generic synthesizer setup that is common across all synthesizer types.\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig: SynthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            synthesizerConfig);\r\n\r\n        this.privRestAdapter = this.createRestSynthesisAdapter(\r\n            authentication,\r\n            synthesizerConfig);\r\n    }\r\n\r\n    protected static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    public constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined && endpointId !== \"\") {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomVoiceDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n            }\r\n        }\r\n\r\n        if (config.avatarEnabled) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.EnableAvatar) === -1) {\r\n                queryParams[QueryParameterNames.EnableAvatar] = \"true\";\r\n            }\r\n        }\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisResult } from \"./Exports\";\r\n\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    private readonly privResult: SpeechSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    public constructor(result: SpeechSynthesisResult) {\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    public get result(): SpeechSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioDestination } from \"../common/Exports\";\r\nimport {\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n    Synthesizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\n\r\nexport class SpeechSynthesisAdapter extends SynthesisAdapterBase {\r\n    private privSpeechSynthesizer: SpeechSynthesizer;\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n            super(authentication, connectionFactory, synthesizerConfig, audioDestination);\r\n            this.privSpeechSynthesizer = speechSynthesizer;\r\n            this.privSynthesizer = speechSynthesizer as Synthesizer;\r\n        }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(this.privSpeechSynthesizer);\r\n    }\r\n\r\n    protected onSynthesisStarted(requestId: string): void {\r\n        const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n            new SpeechSynthesisResult(\r\n                requestId,\r\n                ResultReason.SynthesizingAudioStarted,\r\n            )\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n            this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n        }\r\n    }\r\n\r\n    protected onSynthesizing(audio: ArrayBuffer): void {\r\n        if (!!this.privSpeechSynthesizer.synthesizing) {\r\n            try {\r\n                const audioWithHeader = this.privSynthesisTurn.audioOutputFormat.addHeader(audio);\r\n                const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                    new SpeechSynthesisResult(\r\n                        this.privSynthesisTurn.requestId,\r\n                        ResultReason.SynthesizingAudio,\r\n                        audioWithHeader));\r\n                this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCancelled(result: SpeechSynthesisResult): void {\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCompleted(result: SpeechSynthesisResult): void {\r\n        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n            try {\r\n                this.privSpeechSynthesizer.synthesisCompleted(\r\n                    this.privSpeechSynthesizer,\r\n                    new SpeechSynthesisEventArgs(result)\r\n                );\r\n            } catch (e) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onWordBoundary(wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n            try {\r\n                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onVisemeReceived(visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n            try {\r\n                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onBookmarkReached(bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n            try {\r\n                this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, IAuthentication, SynthesizerConfig } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privAuthentication: IAuthentication;\r\n\r\n    public constructor(config: SynthesizerConfig, authentication: IAuthentication) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n        this.privAuthentication = authentication;\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privAuthentication.fetch(connectionId).then((authInfo: AuthInfo): Promise<IRestResponse> => {\r\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\r\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SynthesisResult, VoiceInfo } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SynthesisVoicesResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisVoicesResult extends SynthesisResult {\r\n    private privVoices: VoiceInfo[];\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param requestId - result id for request.\r\n     * @param json - json payload from endpoint.\r\n     */\r\n    public constructor(requestId: string, json: any, errorDetails: string ) {\r\n        if (Array.isArray(json)) {\r\n            super(requestId, ResultReason.VoicesListRetrieved, undefined, new PropertyCollection());\r\n            this.privVoices = [];\r\n            for (const item of json) {\r\n                this.privVoices.push(new VoiceInfo(item as { Name: string; LocalName: string; DisplayName: string; LocaleName: string; ShortName: string; Gender: string; VoiceType: string; Locale: string; StyleList: string[] }));\r\n            }\r\n        } else {\r\n            super(requestId, ResultReason.Canceled, errorDetails ? errorDetails : \"Error information unavailable\", new PropertyCollection());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The list of voices\r\n     * @member SynthesisVoicesResult.prototype.voices\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceInfo[]} List of synthesized voices.\r\n     */\r\n    public get voices(): VoiceInfo[] {\r\n        return this.privVoices;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the boundary type of speech synthesis boundary event.\r\n * @class SpeechSynthesisBoundaryType\r\n * Added in version 1.21.0\r\n */\r\nexport enum SpeechSynthesisBoundaryType {\r\n    /**\r\n     * Indicates the boundary text is a word.\r\n     * @member SpeechSynthesisBoundaryType.Word\r\n     */\r\n    Word = \"WordBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a punctuation.\r\n     * @member SpeechSynthesisBoundaryType.Punctuation\r\n     */\r\n    Punctuation = \"PunctuationBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a sentence.\r\n     * @member SpeechSynthesisBoundaryType.Sentence\r\n     */\r\n    Sentence = \"SentenceBoundary\"\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the point system for pronunciation score calibration; default value is FivePoint.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGradingSystem\r\n */\r\nexport enum PronunciationAssessmentGradingSystem {\r\n    /**\r\n     * Five point calibration\r\n     * @member PronunciationAssessmentGradingSystem.FivePoint\r\n     */\r\n    FivePoint = 1,\r\n\r\n    /**\r\n     * Hundred mark\r\n     * @member PronunciationAssessmentGradingSystem.HundredMark\r\n     */\r\n    HundredMark,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the pronunciation evaluation granularity; default value is Phoneme.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGranularity\r\n */\r\nexport enum PronunciationAssessmentGranularity {\r\n    /**\r\n     * Shows the score on the full text, word and phoneme level\r\n     * @member PronunciationAssessmentGranularity.Phoneme\r\n     */\r\n    Phoneme = 1,\r\n\r\n    /**\r\n     * Shows the score on the full text and word level\r\n     * @member PronunciationAssessmentGranularity.Word\r\n     */\r\n    Word,\r\n\r\n    /**\r\n     * Shows the score on the full text level only\r\n     * @member PronunciationAssessmentGranularity.FullText\r\n     */\r\n    FullText,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum AvatarEventTypes {\r\n    SwitchedToSpeaking = \"SwitchedToSpeaking\",\r\n    SwitchedToIdle = \"SwitchedToIdle\",\r\n    SessionClosed = \"SessionClosed\",\r\n}\r\n\r\n/**\r\n * Defines content for talking avatar events.\r\n * @class AvatarEventArgs\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarEventArgs {\r\n    private privType: AvatarEventTypes;\r\n    private privOffset: number;\r\n    private privDescription: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} description - The description of the event.\r\n     */\r\n    public constructor(audioOffset: number, description: string) {\r\n        this.privOffset = audioOffset;\r\n        this.privDescription = description;\r\n    }\r\n\r\n    /**\r\n     * The type of the event.\r\n     * @public\r\n     * @returns {AvatarEventTypes} The type of the event.\r\n     */\r\n    public get type(): AvatarEventTypes {\r\n        return this.privType;\r\n    }\r\n\r\n    /**\r\n     * The time offset associated with this event.\r\n     * @public\r\n     * @returns {number} The time offset associated with this event.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * The description of the event.\r\n     * @public\r\n     * @returns {string} The description of the event.\r\n     */\r\n    public get description(): string {\r\n        return this.privDescription;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport { IRestResponse } from \"../common.browser/RestMessageAdapter\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SpeechSynthesisAdapter,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    marshalPromiseToCallbacks,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SynthesisVoicesResult,\r\n    Synthesizer\r\n} from \"./Exports\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\nimport { SynthesisRequest } from \"./Synthesizer\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer extends Synthesizer {\r\n    protected audioConfig: AudioConfig;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        super(speechConfig);\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    public async getVoicesAsync(locale: string = \"\"): Promise<SynthesisVoicesResult> {\r\n        return this.getVoices(locale);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SpeechSynthesisAdapter(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return new SynthesisRestAdapter(synthesizerConfig, authentication);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* eslint-disable no-empty */\r\n                this.adapterSpeak().catch((): void => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* eslint-disable no-empty-function */\r\n            this.adapterSpeak().catch((): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* eslint-disable no-empty */\r\n            this.dispose(true).catch((): void => { });\r\n        }\r\n    }\r\n\r\n    protected async getVoices(locale: string): Promise<SynthesisVoicesResult> {\r\n        const requestId = createNoDashGuid();\r\n        const response: IRestResponse = await this.privRestAdapter.getVoicesList(requestId);\r\n        if (response.ok && Array.isArray(response.json)) {\r\n            let json = response.json;\r\n            if (!!locale && locale.length > 0) {\r\n                json = json.filter((item: { Locale: string }): boolean => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase() );\r\n            }\r\n            return new SynthesisVoicesResult(requestId, json, undefined);\r\n        } else {\r\n            return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\r\n        }\r\n   }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports\";\r\n\r\ninterface PronunciationAssessmentJSON {\r\n    referenceText: string;\r\n    gradingSystem: string;\r\n    granularity: string;\r\n    phonemeAlphabet: string;\r\n    nbestPhonemeCount: number;\r\n    dimension: string;\r\n    enableMiscue: boolean;\r\n    enableProsodyAssessment: boolean;\r\n}\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n    private privEnableProsodyAssessment: boolean;\r\n    private privContentAssessmentTopic: string;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     * This method is designed to support the pronunciation assessment parameters still in preview.\r\n     * Under normal circumstances, use the constructor instead.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(\r\n            this.properties.getProperty(PropertyId.PronunciationAssessment_Params),\r\n            this.privContentAssessmentTopic,\r\n            recoBase.isSpeakerDiarizationEnabled);\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public set enableMiscue(enableMiscue: boolean) {\r\n        const enableMiscueString = enableMiscue ? \"true\" : \"false\";\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, enableMiscueString);\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @return {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public get enableMiscue(): boolean {\r\n        const enableMiscueString = this.properties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue, \"false\");\r\n        return (enableMiscueString.toLowerCase() === \"true\");\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * Enables the prosody assessment.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableProsodyAssessment\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableProsodyAssessment - enable prosody assessment.\r\n     */\r\n    public set enableProsodyAssessment(enableProsodyAssessment: boolean) {\r\n        this.privEnableProsodyAssessment = enableProsodyAssessment;\r\n    }\r\n\r\n    /**\r\n     * Enables content assessment and sets the topic.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableContentAssessmentWithTopic\r\n     * @function\r\n     * @public\r\n     * @param {string} topic - Topic for content assessment.\r\n     */\r\n    public enableContentAssessmentWithTopic(topic: string): void {\r\n        this.privContentAssessmentTopic = topic;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        paramsJson.enableProsodyAssessment = this.privEnableProsodyAssessment;\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString) {\r\n            paramsJson.enableMiscue = this.enableMiscue;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyId,\r\n    RecognitionResult\r\n} from \"./Exports\";\r\n\r\ninterface AssessmentResult {\r\n    NBest: DetailResult[];\r\n}\r\n\r\ninterface DetailResult {\r\n    Words: WordResult[];\r\n    PronunciationAssessment: {\r\n        AccuracyScore: number;\r\n        CompletenessScore: number;\r\n        FluencyScore: number;\r\n        PronScore: number;\r\n        ProsodyScore: number;\r\n    };\r\n    ContentAssessment: {\r\n        GrammarScore: number;\r\n        VocabularyScore: number;\r\n        TopicScore: number;\r\n    };\r\n}\r\n\r\ninterface WordResult {\r\n    Word: string;\r\n    Phonemes: {\r\n        Phoneme?: string;\r\n        PronunciationAssessment?: {\r\n            NBestPhonemes: { Phoneme: string }[];\r\n        };\r\n     }[];\r\n    PronunciationAssessment?: {\r\n        AccuracyScore: number;\r\n        ErrorType: string;\r\n    };\r\n    Syllables: { Syllable: string }[];\r\n}\r\n\r\nexport class ContentAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally.\r\n     */\r\n    public constructor(detailResult: DetailResult) {\r\n        this.privPronJson = detailResult;\r\n    }\r\n\r\n    /**\r\n     * Correctness in using grammar and variety of sentence patterns.\r\n     * Grammatical errors are jointly evaluated by lexical accuracy,\r\n     * grammatical accuracy and diversity of sentence structures.\r\n     * @member ContentAssessmentResult.prototype.grammarScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Grammar score.\r\n     */\r\n    public get grammarScore(): number {\r\n        return this.privPronJson.ContentAssessment.GrammarScore;\r\n    }\r\n\r\n    /**\r\n     * Proficiency in lexical usage. It evaluates the speaker's effective usage\r\n     * of words and their appropriateness within the given context to express\r\n     * ideas accurately, as well as level of lexical complexity.\r\n     * @member ContentAssessmentResult.prototype.vocabularyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Vocabulary score.\r\n     */\r\n    public get vocabularyScore(): number {\r\n        return this.privPronJson.ContentAssessment.VocabularyScore;\r\n    }\r\n\r\n    /**\r\n     * Level of understanding and engagement with the topic, which provides\r\n     * insights into the speaker’s ability to express their thoughts and ideas\r\n     * effectively and the ability to engage with the topic.\r\n     * @member ContentAssessmentResult.prototype.topicScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Topic score.\r\n     */\r\n    public get topicScore(): number {\r\n        return this.privPronJson.ContentAssessment.TopicScore;\r\n    }\r\n}\r\n\r\n/**\r\n * Pronunciation assessment results.\r\n * @class PronunciationAssessmentResult\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    private constructor(jsonString: string) {\r\n        const j = JSON.parse(jsonString) as AssessmentResult;\r\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\r\n        this.privPronJson = j.NBest[0];\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result The recognition result.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\r\n     */\r\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\r\n        Contracts.throwIfNullOrUndefined(result, \"result\");\r\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        return new PronunciationAssessmentResult(json);\r\n    }\r\n\r\n    /**\r\n     * Gets the detail result of pronunciation assessment.\r\n     * @member PronunciationAssessmentConfig.prototype.detailResult\r\n     * @function\r\n     * @public\r\n     * @returns {DetailResult} detail result.\r\n     */\r\n    public get detailResult(): DetailResult {\r\n        return this.privPronJson;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\r\n     * how closely the phonemes match a native speaker's pronunciation.\r\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Accuracy score.\r\n     */\r\n    public get accuracyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.AccuracyScore;\r\n    }\r\n\r\n    /**\r\n     * The overall score indicating the pronunciation quality of the given speech.\r\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\r\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Pronunciation score.\r\n     */\r\n    public get pronunciationScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.PronScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\r\n     * @member PronunciationAssessmentResult.prototype.completenessScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Completeness score.\r\n     */\r\n    public get completenessScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.CompletenessScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the fluency of the given speech.\r\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Fluency score.\r\n     */\r\n    public get fluencyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.FluencyScore;\r\n    }\r\n\r\n    /**\r\n     * The prosody score, which indicates how nature of the given speech, including stress, intonation, speaking speed and rhythm.\r\n     * @member PronunciationAssessmentResult.prototype.prosodyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Prosody score.\r\n     */\r\n    public get prosodyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.ProsodyScore;\r\n    }\r\n\r\n    /**\r\n     * The concent assessment result.\r\n     * Only available when content assessment is enabled.\r\n     * @member PronunciationAssessmentResult.prototype.contentAssessmentResult\r\n     * @function\r\n     * @public\r\n     * @returns {ContentAssessmentResult} Content assessment result.\r\n     */\r\n    public get contentAssessmentResult(): ContentAssessmentResult {\r\n        if (this.detailResult.ContentAssessment === undefined) {\r\n            return undefined;\r\n        }\r\n        return new ContentAssessmentResult(this.detailResult);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * Defines a coordinate in 2D space.\r\n * @class Coordinate\r\n * Added in version 1.33.0\r\n */\r\nexport class Coordinate {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the avatar output video format.\r\n * @class AvatarVideoFormat\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarVideoFormat {\r\n    /**\r\n     * Defines the video codec.\r\n     * @default \"H264\"\r\n     */\r\n    public codec: string;\r\n    /**\r\n     * Defines the video bitrate.\r\n     * @default 2000000\r\n     */\r\n    public bitrate: number;\r\n    /**\r\n     * Defines the video width.\r\n     * @default 1920\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Defines the video height.\r\n     * @default 1080\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Sets the video crop range.\r\n     */\r\n    public setCropRange(topLeft: Coordinate, bottomRight: Coordinate): void {\r\n        this.cropRange = {\r\n            bottomRight,\r\n            topLeft,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Defines the video crop range.\r\n     * @default undefined\r\n     * @internal\r\n     */\r\n    public cropRange: {\r\n        topLeft: Coordinate;\r\n        bottomRight: Coordinate;\r\n    };\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} codec - The video codec.\r\n     * @param {number} bitrate - The video bitrate.\r\n     * @param {number} width - The video width.\r\n     * @param {number} height - The video height.\r\n     */\r\n    public constructor(codec: string = \"H264\",\r\n                       bitrate: number = 2000000,\r\n                       width: number = 1920,\r\n                       height: number = 1080,\r\n    ) {\r\n        this.codec = codec;\r\n        this.bitrate = bitrate;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { AvatarVideoFormat } from \"./Exports\";\r\n\r\n/**\r\n * Defines the talking avatar configuration.\r\n * @class AvatarConfig\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarConfig {\r\n    private privCustomized: boolean = false;\r\n    private privBackgroundColor: string;\r\n\r\n    /**\r\n     * Defines the avatar character.\r\n     */\r\n    public character: string;\r\n    /**\r\n     * Defines the avatar style.\r\n     */\r\n    public style: string;\r\n    /**\r\n     * Defines the talking avatar output video format.\r\n     */\r\n    public videoFormat: AvatarVideoFormat;\r\n\r\n    /**\r\n     * Indicates if the talking avatar is customized.\r\n     */\r\n    public get customized(): boolean {\r\n        return this.privCustomized;\r\n    }\r\n\r\n    /**\r\n     * Sets if the talking avatar is customized.\r\n     */\r\n    public set customized(value: boolean) {\r\n        this.privCustomized = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the background color.\r\n     */\r\n    public get backgroundColor(): string {\r\n        return this.privBackgroundColor;\r\n    }\r\n\r\n    /**\r\n     * Gets the background color.\r\n     */\r\n    public set backgroundColor(value: string) {\r\n        this.privBackgroundColor = value;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} character - The avatar character.\r\n     * @param {string} style - The avatar style.\r\n     * @param {AvatarVideoFormat} videoFormat - The talking avatar output video format.\r\n     */\r\n    public constructor(character: string, style: string, videoFormat: AvatarVideoFormat) {\r\n        Contracts.throwIfNullOrWhitespace(character, \"character\");\r\n        this.character = character;\r\n        this.style = style;\r\n        if (videoFormat === undefined) {\r\n            videoFormat = new AvatarVideoFormat();\r\n        }\r\n        this.videoFormat = videoFormat;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    AvatarSynthesizer,\r\n    PropertyId,\r\n    Synthesizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    ISynthesisSectionVideo,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\n\r\nexport class AvatarSynthesisAdapter extends SynthesisAdapterBase {\r\n    private readonly privAvatarSynthesizer: AvatarSynthesizer;\r\n    private readonly privAvatarConfig: AvatarConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        avatarSynthesizer: AvatarSynthesizer,\r\n        avatarConfig: AvatarConfig,\r\n        ) {\r\n\r\n        super(authentication, connectionFactory,\r\n            synthesizerConfig, undefined);\r\n        this.privAvatarSynthesizer = avatarSynthesizer;\r\n        this.privSynthesizer = avatarSynthesizer as Synthesizer;\r\n        this.privAvatarConfig = avatarConfig;\r\n    }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(undefined);\r\n    }\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        this.privSynthesizerConfig.synthesisVideoSection = {\r\n            format: {\r\n                bitrate: this.privAvatarConfig.videoFormat?.bitrate,\r\n                codec: this.privAvatarConfig.videoFormat?.codec,\r\n                crop: {\r\n                    bottomRight: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.y,\r\n                    },\r\n                    topLeft: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.y,\r\n                    },\r\n                },\r\n                resolution: {\r\n                    height: this.privAvatarConfig.videoFormat?.height,\r\n                    width: this.privAvatarConfig.videoFormat?.width,\r\n                },\r\n            },\r\n            protocol: {\r\n                name: \"WebRTC\",\r\n                webrtcConfig: {\r\n                    clientDescription: btoa(this.privSynthesizerConfig.parameters.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP)),\r\n                    iceServers: this.privAvatarSynthesizer.iceServers,\r\n                },\r\n            },\r\n            talkingAvatar: {\r\n                background: {\r\n                    color: this.privAvatarConfig.backgroundColor,\r\n                },\r\n                character: this.privAvatarConfig.character,\r\n                customized: this.privAvatarConfig.customized,\r\n                style: this.privAvatarConfig.style,\r\n            }\r\n        } as ISynthesisSectionVideo;\r\n    }\r\n\r\n\r\n    protected onAvatarEvent(metadata: ISynthesisMetadata): void {\r\n        if (!!this.privAvatarSynthesizer.avatarEventReceived) {\r\n            const avatarEventArgs: AvatarEventArgs = new AvatarEventArgs(\r\n                metadata.Data.Offset,\r\n                metadata.Data.Name);\r\n            try {\r\n                this.privAvatarSynthesizer.avatarEventReceived(this.privAvatarSynthesizer, avatarEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisConnectionFactory } from \"../common.speech/SpeechSynthesisConnectionFactory\";\r\nimport { SynthesisRestAdapter } from \"../common.speech/SynthesisRestAdapter\";\r\nimport { SynthesizerConfig } from \"../common.speech/SynthesizerConfig\";\r\nimport {\r\n    AvatarSynthesisAdapter,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase\r\n} from \"../common.speech/Exports\";\r\nimport { createNoDashGuid, Deferred, Events, EventType, PlatformEvent } from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SynthesisResult,\r\n    Synthesizer\r\n} from \"./Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { SynthesisRequest } from \"./Synthesizer\";\r\n\r\n/**\r\n * Defines the avatar synthesizer.\r\n * @class AvatarSynthesizer\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarSynthesizer extends Synthesizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAvatarConfig: AvatarConfig;\r\n    private privIceServers: RTCIceServer[];\r\n    /**\r\n     * Defines event handler for avatar events.\r\n     * @member AvatarSynthesizer.prototype.avatarEventReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public avatarEventReceived: (sender: AvatarSynthesizer, event: AvatarEventArgs) => void;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config.\r\n     * @param {AvatarConfig} avatarConfig - The talking avatar config.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, avatarConfig: AvatarConfig) {\r\n        super(speechConfig);\r\n\r\n        Contracts.throwIfNullOrUndefined(avatarConfig, \"avatarConfig\");\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.privAvatarConfig = avatarConfig;\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        // The service checks the audio format setting while it ignores it in avatar synthesis.\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Starts the talking avatar session and establishes the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.startAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @param {AvatarWebRTCConnectionInfo} peerConnection - The peer connection.\r\n     * @returns {Promise<SynthesisResult>} The promise of the connection result.\r\n     */\r\n    public async startAvatarAsync(peerConnection: RTCPeerConnection): Promise<SynthesisResult> {\r\n        Contracts.throwIfNullOrUndefined(peerConnection, \"peerConnection\");\r\n        this.privIceServers = peerConnection.getConfiguration().iceServers;\r\n        Contracts.throwIfNullOrUndefined(this.privIceServers, \"Ice servers must be set.\");\r\n        const iceGatheringDone = new Deferred<void>();\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\r\n        peerConnection.onicegatheringstatechange = (): void => {\r\n            Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering state: \" + peerConnection.iceGatheringState, EventType.Debug));\r\n            if (peerConnection.iceGatheringState === \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering complete.\", EventType.Info));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        const sdp: RTCSessionDescriptionInit = await peerConnection.createOffer();\r\n        await peerConnection.setLocalDescription(sdp);\r\n        await iceGatheringDone.promise;\r\n        Events.instance.onEvent(new PlatformEvent(\"peer connection: got local SDP.\", EventType.Info));\r\n        this.privProperties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, JSON.stringify(peerConnection.localDescription));\r\n\r\n        const result: SpeechSynthesisResult = await this.speak(\"\", false);\r\n        const sdpAnswerString: string = atob(result.properties.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP));\r\n        const sdpAnswer: RTCSessionDescription = new RTCSessionDescription(\r\n            JSON.parse(sdpAnswerString) as RTCSessionDescriptionInit,\r\n        );\r\n        await peerConnection.setRemoteDescription(sdpAnswer);\r\n        return new SynthesisResult(\r\n            result.resultId,\r\n            result.reason,\r\n            undefined,\r\n            result.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks plain text asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} text - The plain text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakTextAsync(text: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(text, false);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks SSML asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} ssml - The SSML text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakSsmlAsync(ssml: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(ssml, true);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks text asynchronously. The avatar will switch to idle state.\r\n     * @member AvatarSynthesizer.prototype.stopSpeakingAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopSpeakingAsync(): Promise<void> {\r\n        return this.privAdapter.stopSpeaking();\r\n    }\r\n\r\n    /**\r\n     * Stops the talking avatar session and closes the WebRTC connection.\r\n     * For now, this is the same as close().\r\n     * You need to create a new AvatarSynthesizer instance to start a new session.\r\n     * @member AvatarSynthesizer.prototype.stopAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopAvatarAsync(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member AvatarSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the ICE servers. Internal use only.\r\n     */\r\n    public get iceServers(): RTCIceServer[] {\r\n        return this.privIceServers;\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new AvatarSynthesisAdapter(\r\n            authentication,\r\n            connectionFactory,\r\n            synthesizerConfig,\r\n            this,\r\n            this.privAvatarConfig);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        _authentication: IAuthentication,\r\n        _synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return undefined;\r\n    }\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        const config = super.createSynthesizerConfig(speechConfig);\r\n        config.avatarEnabled = true;\r\n        return config;\r\n    }\r\n\r\n    protected async speak(text: string, isSSML: boolean): Promise<SpeechSynthesisResult> {\r\n        const requestId = createNoDashGuid();\r\n        const deferredResult = new Deferred<SpeechSynthesisResult>();\r\n        this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, isSSML,\r\n            (e: SpeechSynthesisResult): void => {\r\n                deferredResult.resolve(e);\r\n                this.privSynthesizing = false;\r\n                void this.adapterSpeak();\r\n            },\r\n            (e: string): void => {\r\n                deferredResult.reject(e);\r\n                this.privSynthesizing = false;\r\n            }));\r\n        void this.adapterSpeak();\r\n        return deferredResult.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ResultReason,\r\n    PropertyCollection,\r\n    SynthesisResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the avatar WebRTC connection result.\r\n * @class AvatarWebRTCConnectionResult\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarWebRTCConnectionResult extends SynthesisResult {\r\n    private readonly privSDPAnswer: RTCSessionDescriptionInit;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {RTCSessionDescriptionInit} SDPAnswer - The SDP answer of WebRTC connection.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(SDPAnswer?: RTCSessionDescriptionInit, resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privSDPAnswer = SDPAnswer;\r\n    }\r\n\r\n    /**\r\n     * Specifies SDP (Session Description Protocol) answer of WebRTC connection.\r\n     * @member AvatarWebRTCConnectionResult.prototype.SDPAnswer\r\n     * @function\r\n     * @public\r\n     * @returns {RTCSessionDescriptionInit} Specifies the SDP answer of WebRTC connection.\r\n     */\r\n    public get SDPAnswer(): RTCSessionDescriptionInit {\r\n        return this.privSDPAnswer;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { ConsoleLoggingListener } from \"../common.browser/Exports\";\r\nimport { Events } from \"../common/Exports\";\r\nimport { LogLevel } from \"./LogLevel\";\r\n\r\n/**\r\n * Defines diagnostics API for managing console output\r\n * Added in version 1.21.0\r\n */\r\nexport class Diagnostics {\r\n    private static privListener: ConsoleLoggingListener = undefined;\r\n\r\n    public static SetLoggingLevel(logLevel: LogLevel): void {\r\n        this.privListener = new ConsoleLoggingListener(logLevel);\r\n        Events.instance.attachConsoleListener(this.privListener);\r\n    }\r\n\r\n    public static StartConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = true;\r\n        }\r\n    }\r\n\r\n    public static StopConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = false;\r\n        }\r\n    }\r\n\r\n    public static SetLogOutputPath(path: string): void {\r\n        if (typeof window === \"undefined\") {\r\n            if (!!this.privListener) {\r\n                this.privListener.logPath = path;\r\n            }\r\n        } else {\r\n            throw new Error(\"File system logging not available in browser.\");\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ConsoleLoggingListener } from \"./src/common.browser/Exports\";\r\nimport { Events } from \"./src/common/Exports\";\r\n\r\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\r\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\r\nEvents.instance.attachConsoleListener(new ConsoleLoggingListener());\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* webpackChunkName: 'script_processor_audioWorklet' */\r\n// eslint-disable-next-line @typescript-eslint/tslint/config\r\nexport const getAudioWorkerUrl = (): string => new URL(\"speech-processor.js\", import.meta.url).toString();\r\n","/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),ca=require(\"scheduler\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+\"Capture\",b)}\nfunction ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}\nvar ia=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,la=\n{},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction qa(a,b,c,d){if(null===b||\"undefined\"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ra,\nsa);z[b]=new v(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});\nz.xlinkHref=new v(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}\nvar ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for(\"react.element\"),wa=Symbol.for(\"react.portal\"),ya=Symbol.for(\"react.fragment\"),za=Symbol.for(\"react.strict_mode\"),Aa=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Ca=Symbol.for(\"react.context\"),Da=Symbol.for(\"react.forward_ref\"),Ea=Symbol.for(\"react.suspense\"),Fa=Symbol.for(\"react.suspense_list\"),Ga=Symbol.for(\"react.memo\"),Ha=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar Ia=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Ja=Symbol.iterator;function Ka(a){if(null===a||\"object\"!==typeof a)return null;a=Ja&&a[Ja]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);La=b&&b[1]||\"\"}return\"\\n\"+La+a}var Na=!1;\nfunction Oa(a,b){if(!a||Na)return\"\";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Ma(a):\"\"}\nfunction Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma(\"Lazy\");case 13:return Ma(\"Suspense\");case 19:return Ma(\"SuspenseList\");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return\"\"}}\nfunction Qa(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ya:return\"Fragment\";case wa:return\"Portal\";case Aa:return\"Profiler\";case za:return\"StrictMode\";case Ea:return\"Suspense\";case Fa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||\"Context\")+\".Consumer\";case Ba:return(a._context.displayName||\"Context\")+\".Provider\";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||\"Memo\";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}\nfunction Ra(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return Qa(b);case 8:return b===za?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"string\":case \"undefined\":return a;case \"object\":return a;default:return\"\"}}\nfunction Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,\"checked\",b,!1)}\nfunction bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?cb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction db(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction cb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}var eb=Array.isArray;\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nfunction lb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?kb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar mb,nb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(\"http://www.w3.org/2000/svg\"!==a.namespaceURI||\"innerHTML\"in a)a.innerHTML=b;else{mb=mb||document.createElement(\"div\");mb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,\nzoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(\"\"+b).trim():b+\"px\"}\nfunction sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=rb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if(\"object\"!==typeof b.dangerouslySetInnerHTML||!(\"__html\"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(p(62));}}\nfunction vb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}\nfunction Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,\"passive\",{get:function(){Lb=!0}});window.addEventListener(\"test\",Mb,Mb);window.removeEventListener(\"test\",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}\nfunction Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}\nfunction Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}\nvar ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&\"function\"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}\nvar oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;\nfunction tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction Sc(a,b){switch(a){case \"focusin\":case \"focusout\":Lc=null;break;case \"dragenter\":case \"dragleave\":Mc=null;break;case \"mouseover\":case \"mouseout\":Nc=null;break;case \"pointerover\":case \"pointerout\":Oc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Pc.delete(b.pointerId)}}\nfunction Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction Uc(a,b,c,d,e){switch(b){case \"focusin\":return Lc=Tc(Lc,a,b,c,d,e),!0;case \"dragenter\":return Mc=Tc(Mc,a,b,c,d,e),!0;case \"mouseover\":return Nc=Tc(Nc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}\nfunction ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}\nfunction bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;\nfunction ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}\nfunction fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;\nfunction Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}\nfunction jd(a){switch(a){case \"cancel\":case \"click\":case \"close\":case \"contextmenu\":case \"copy\":case \"cut\":case \"auxclick\":case \"dblclick\":case \"dragend\":case \"dragstart\":case \"drop\":case \"focusin\":case \"focusout\":case \"input\":case \"invalid\":case \"keydown\":case \"keypress\":case \"keyup\":case \"mousedown\":case \"mouseup\":case \"paste\":case \"pause\":case \"play\":case \"pointercancel\":case \"pointerdown\":case \"pointerup\":case \"ratechange\":case \"reset\":case \"resize\":case \"seeked\":case \"submit\":case \"touchcancel\":case \"touchend\":case \"touchstart\":case \"volumechange\":case \"change\":case \"selectionchange\":case \"textInput\":case \"compositionstart\":case \"compositionend\":case \"compositionupdate\":case \"beforeblur\":case \"afterblur\":case \"beforeinput\":case \"blur\":case \"fullscreenchange\":case \"focus\":case \"hashchange\":case \"popstate\":case \"select\":case \"selectstart\":return 1;case \"drag\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"mousemove\":case \"mouseout\":case \"mouseover\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"scroll\":case \"toggle\":case \"touchmove\":case \"wheel\":case \"mouseenter\":case \"mouseleave\":case \"pointerenter\":case \"pointerleave\":return 4;\ncase \"message\":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}\nfunction od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&\"CompositionEvent\"in window,be=null;ia&&\"documentMode\"in document&&(be=document.documentMode);var ce=ia&&\"TextEvent\"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge;\nfunction Ie(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nfunction Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,\nd);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});\"function\"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}\nvar Pe=ia&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nfunction Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var We={animationend:Ve(\"Animation\",\"AnimationEnd\"),animationiteration:Ve(\"Animation\",\"AnimationIteration\"),animationstart:Ve(\"Animation\",\"AnimationStart\"),transitionend:Ve(\"Transition\",\"TransitionEnd\")},Xe={},Ye={};\nia&&(Ye=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),\"TransitionEvent\"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze(\"animationend\"),af=Ze(\"animationiteration\"),bf=Ze(\"animationstart\"),cf=Ze(\"transitionend\"),df=new Map,ef=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");\nfunction ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,\"on\"+kf)}ff($e,\"onAnimationEnd\");ff(af,\"onAnimationIteration\");ff(bf,\"onAnimationStart\");ff(\"dblclick\",\"onDoubleClick\");ff(\"focusin\",\"onFocus\");ff(\"focusout\",\"onBlur\");ff(cf,\"onTransitionEnd\");ha(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);ha(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ha(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);\nha(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);fa(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));fa(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));fa(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);fa(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));fa(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));\nfa(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var lf=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),mf=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(lf));\nfunction nf(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}\nfunction D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+\"__bubble\";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf=\"_reactListening\"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){\"selectionchange\"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf(\"selectionchange\",!1,b))}}\nfunction pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];\na:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":n=\"focus\";k=Fd;break;case \"focusout\":n=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var t=0!==(b&4),J=!t&&\"scroll\"===a,x=t?null!==h?h+\"Capture\":null:h;t=[];for(var w=d,u;null!==\nw;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==\nn&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F=\"onMouseLeave\";x=\"onMouseEnter\";w=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)t=Td,F=\"onPointerLeave\",x=\"onPointerEnter\",w=\"pointer\";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+\"leave\",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+\"enter\",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=\nvf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);\"focusout\"===a&&(xa=h._wrapperState)&&\nxa.controlled&&\"number\"===h.type&&cb(h,\"number\",h.value)}xa=d?ue(d):window;switch(a){case \"focusin\":if(me(xa)||\"true\"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case \"compositionstart\":var ba=\"onCompositionStart\";break b;case \"compositionend\":ba=\"onCompositionEnd\";\nbreak b;case \"compositionupdate\":ba=\"onCompositionUpdate\";break b}ba=void 0}else ie?ge(a,c)&&(ba=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(ba=\"onCompositionStart\");ba&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==ba?\"onCompositionEnd\"===ba&&ie&&($a=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),\n0<d.length&&(e=new Ld(\"onBeforeInput\",\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\\r\\n?/g,yf=/\\u0000|\\uFFFD/g;function zf(a){return(\"string\"===typeof a?a:\"\"+a).replace(xf,\"\\n\").replace(yf,\"\")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}\nvar Cf=null,Df=null;function Ef(a,b){return\"textarea\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}\nvar Ff=\"function\"===typeof setTimeout?setTimeout:void 0,Gf=\"function\"===typeof clearTimeout?clearTimeout:void 0,Hf=\"function\"===typeof Promise?Promise:void 0,Jf=\"function\"===typeof queueMicrotask?queueMicrotask:\"undefined\"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}\nfunction Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,\"/$\"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else\"$\"!==c&&\"$?\"!==c&&\"$!\"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if(\"$\"===b||\"$!\"===b||\"$?\"===b)break;if(\"/$\"===b)return null}}return a}\nfunction Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of=\"__reactFiber$\"+Nf,Pf=\"__reactProps$\"+Nf,uf=\"__reactContainer$\"+Nf,of=\"__reactEvents$\"+Nf,Qf=\"__reactListeners$\"+Nf,Rf=\"__reactHandles$\"+Nf;\nfunction Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}\nfunction E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||\"Unknown\",e));return A({},c,d)}\nfunction cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}\nfunction jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg=\"\";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}\nfunction ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;\nfunction Ag(a,b){var c=Bg(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=\nnull,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}\nfunction Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b=\"head\"!==b&&\"body\"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}yg=\nnull}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b}\nfunction Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null)}\nfunction Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a}}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a)}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}\nfunction Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function ch(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nfunction fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if(\"function\"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r=\"function\"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;\nh=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q}}\nfunction ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(p(191,e));e.call(d)}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar nh={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=\nlh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d))}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}\nfunction ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction qh(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null)}\nfunction rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}\nfunction sh(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}\nfunction th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function uh(a){var b=a._init;return b(a._payload)}\nfunction vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=xh(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),\nc.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,\nb,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c)}return null}function y(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d)}return null}\nfunction n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===\nx.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if(\"function\"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,\nm),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=\nf.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==\nd;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=zh(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):\n(c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(Eh);G(Eh,b)}function Jh(){E(Eh);E(Fh);E(Gh)}\nfunction Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c))}function Lh(a){Fh.current===a&&(E(Eh),E(Fh))}var M=Uf(0);\nfunction Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Nh=[];\nfunction Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e)}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}\nfunction ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}\nfunction ei(a,b){return\"function\"===typeof b?b(a):b}\nfunction fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function hi(){}\nfunction ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e)}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a)}function ki(a,b,c){return c(function(){oi(b)&&pi(a)})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1)}\nfunction qi(a){var b=ci();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return[b.memoizedState,a]}\nfunction li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d)}\nfunction ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d)}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}\nfunction yi(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b()}finally{C=c,Qh.transition=d}}function Fi(){return di().memoizedState}\nfunction Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d)}}\nfunction ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d))}}\nfunction Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nvar ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,\n4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=\nci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,\nf,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Uh++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Vh++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},\nuseDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===\nO?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c=\"\",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}\nfunction Mi(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Ni=\"function\"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b)};return c}\nfunction Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);\"function\"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a))}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d)}\nfunction Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}\nfunction aj(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}\nfunction ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}\nfunction ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;q||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||\n(h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?(\"function\"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m=\"function\"===typeof y||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?(\"function\"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,n,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return kj(a,b,c,d,f,e)}\nfunction kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo)}\nfunction mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:\"$!\"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=\ng):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction rj(a,b){b=qj({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:\"visible\",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if(\"$!\"===e.data){d=e.nextSibling&&e.nextSibling.dataset;\nif(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;\n0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1))}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if(\"$?\"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c)}\nfunction xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(M,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}xj(b,!0,c,null,f);break;case \"together\":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&\nb.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;\nAj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Bj=function(){};\nCj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"select\":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&\n(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,\nc)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ea.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&D(\"scroll\",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4)};\nfunction Ej(a,b){if(!I)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);\nc=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case \"dialog\":D(\"cancel\",d);D(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",d);break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],d);break;case \"source\":D(\"error\",d);break;case \"img\":case \"image\":case \"link\":D(\"error\",\nd);D(\"load\",d);break;case \"details\":D(\"toggle\",d);break;case \"input\":Za(d,f);D(\"invalid\",d);break;case \"select\":d._wrapperState={wasMultiple:!!f.multiple};D(\"invalid\",d);break;case \"textarea\":hb(d,f),D(\"invalid\",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,\nh,a),e=[\"children\",\"\"+h]):ea.hasOwnProperty(g)&&null!=h&&\"onScroll\"===g&&D(\"scroll\",d)}switch(c){case \"input\":Va(d);db(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;\"http://www.w3.org/1999/xhtml\"===a&&(a=kb(c));\"http://www.w3.org/1999/xhtml\"===a?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\n\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case \"dialog\":D(\"cancel\",a);D(\"close\",a);e=d;break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case \"source\":D(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":D(\"error\",\na);D(\"load\",a);e=d;break;case \"details\":D(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);D(\"invalid\",a);break;case \"option\":e=d;break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D(\"invalid\",a);break;case \"textarea\":hb(a,d);e=gb(a,d);D(\"invalid\",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?sb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==\nc||\"\"!==k)&&ob(a,k):\"number\"===typeof k&&ob(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ea.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&D(\"scroll\",a):null!=k&&ta(a,f,k,g))}switch(c){case \"input\":Va(a);db(a,d,!1);break;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,\n!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case \"button\":case \"input\":case \"select\":case \"textarea\":d=!!d.autoFocus;break a;case \"img\":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=\nxg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===\na){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),\nBj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,\ng=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=\na.sibling}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304)}else{if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&\"hidden\"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=\nb,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}\nfunction Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),\nnull;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj=\"function\"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Nj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Oj=!1;\nfunction Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if(\"selectionStart\"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=\nq.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;\ncase 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent=\"\":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Oj;Oj=!1;return n}\nfunction Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f)}e=e.next}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}\nfunction Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}\nfunction Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling}\nfunction ak(a,b,c){if(lc&&\"function\"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;\nZj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==\nc.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c)}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling}\nfunction ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a)}catch(t){W(a,a.return,t)}try{Qj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,\"\")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;\na.updateQueue=null;if(null!==k)try{\"input\"===h&&\"radio\"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];\"style\"===m?sb(e,q):\"dangerouslySetInnerHTML\"===m?nb(e,q):\"children\"===m?ob(e,q):ta(e,m,q,l)}switch(h){case \"input\":bb(e,f);break;case \"textarea\":ib(e,f);break;case \"select\":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,\nf.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:\"\",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||\nnull!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if(\"function\"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=\nb.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty(\"display\")?k.display:null,h.style.display=\nrb(\"display\",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?\"\":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,\na),fk(a)}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,\"\"),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function ik(a,b,c){V=a;jk(a,b,c)}\nfunction jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f,b,c),f=f.sibling;V=e;Kj=h;U=l}lk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a,b,c)}}\nfunction lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nb.child.stateNode;break;case 1:c=b.child.stateNode}ih(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case \"button\":case \"input\":case \"select\":case \"textarea\":k.autoFocus&&c.focus();break;case \"img\":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;\ndefault:throw Error(p(163));}U||b.flags&512&&Sj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}\nfunction kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Sj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Sj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}\nvar mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}\nfunction lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg())}\nfunction Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Gk(c,Hk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else{b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h)}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);\nelse{e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===\nd)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}\nfunction Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a)}\nfunction Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d))}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}\nfunction Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg())}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg()}}function Ij(){gj=fj.current;E(fj)}\nfunction Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij()}c=c.return}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=\n0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}Wg=null}return a}\nfunction Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Sh=!1}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,\nm.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;\nb&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof w.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return}while(null!==f)}Tk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}\nfunction uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z)}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e)}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y)}function Mk(){for(;null!==Y&&!cc();)Vk(Y)}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null}\nfunction Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else{c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d)}finally{pk.transition=e,C=d}return null}\nfunction Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;\nvar g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c,a,e);dc();K=h;C=g;pk.transition=f}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode,d);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}\nfunction Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else{a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===\nl){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&\"function\"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,pk.transition=b}}return!1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b))}\nfunction W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return}}\nfunction Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b)}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c))}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c)}\nfunction ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c)}var Wk;\nWk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=\nnull,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c)}b=b.child}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),\nhj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,\nc,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Yi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),\nb.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}\nfunction al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction $k(a){if(\"function\"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}\nfunction wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction yh(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)bj(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;\nbreak a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,\"\"));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}\nfunction zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=\nnull}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}\nfunction fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}\nfunction hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b)}function kl(){return null}var ll=\"function\"===typeof reportError?reportError:function(a){console.error(a)};function ml(a){this._internalRoot=a}\nnl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null)};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null)});b[uf]=null}};function nl(a){this._internalRoot=a}\nnl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function ql(){}\nfunction rl(a,b,c,d,e){if(e){if(\"function\"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a)}}var g=fl(b,d,a,0,null,!1,!1,\"\",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if(\"function\"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a)}}var k=cl(a,0,!1,null,null,!1,!1,\"\",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d)});return k}\nfunction sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if(\"function\"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a)}}gl(b,g,a,e)}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()))}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c)}}),jl(a,1)}};\nFc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c)}jl(a,134217728)}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d)}jl(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};\nyb=function(a,b,c){switch(b){case \"input\":bb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Rk;Hb=Sk;\nvar tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:\"18.2.0\",rendererPackageName:\"react-dom\"};\nvar vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||\nkl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.2.0-next-9e3b772b8-20220608\"};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;\nexports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};exports.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d=\"\",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(\",\");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Sk(a)};exports.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};\nexports.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f=\"\",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,\ne);return new nl(b)};exports.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Rk;\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};exports.version=\"18.2.0-next-9e3b772b8-20220608\";\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;\nexports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\");};\nexports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};\nexports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};\nexports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.2.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"1c860e1a\" + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"prototype_chatgpt_voice_assistant:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/ChatGPT-voice-assistant/\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkprototype_chatgpt_voice_assistant\"] = self[\"webpackChunkprototype_chatgpt_voice_assistant\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { TracingContext } from \"./tracing\";\n\n/**\n * Represents a credential capable of providing an authentication token.\n */\nexport interface TokenCredential {\n  /**\n   * Gets the token provided by this credential.\n   *\n   * This method is called automatically by Azure SDK client libraries. You may call this method\n   * directly, but you must also handle token caching and token refreshing.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes: string | string[], options?: GetTokenOptions): Promise<AccessToken | null>;\n}\n\n/**\n * Defines options for TokenCredential.getToken.\n */\nexport interface GetTokenOptions {\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Options used when creating and sending HTTP requests for this operation.\n   */\n  requestOptions?: {\n    /**\n     * The number of milliseconds a request can take before automatically being terminated.\n     */\n    timeout?: number;\n  };\n  /**\n   * Options used when tracing is enabled.\n   */\n  tracingOptions?: {\n    /**\n     * Tracing Context for the current request.\n     */\n    tracingContext?: TracingContext;\n  };\n  /**\n   * Claim details to perform the Continuous Access Evaluation authentication flow\n   */\n  claims?: string;\n  /**\n   * Indicates whether to enable the Continuous Access Evaluation authentication flow\n   */\n  enableCae?: boolean;\n  /**\n   * Allows specifying a tenantId. Useful to handle challenges that provide tenant Id hints.\n   */\n  tenantId?: string;\n}\n\n/**\n * Represents an access token with an expiration time.\n */\nexport interface AccessToken {\n  /**\n   * The access token returned by the authentication service.\n   */\n  token: string;\n\n  /**\n   * The access token's expiration timestamp in milliseconds, UNIX epoch time.\n   */\n  expiresOnTimestamp: number;\n}\n\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential - The assumed TokenCredential to be tested.\n */\nexport function isTokenCredential(credential: unknown): credential is TokenCredential {\n  // Check for an object with a 'getToken' function and possibly with\n  // a 'signRequest' function.  We do this check to make sure that\n  // a ServiceClientCredentials implementor (like TokenClientCredentials\n  // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n  // it doesn't actually implement TokenCredential also.\n  const castCredential = credential as {\n    getToken: unknown;\n    signRequest: unknown;\n  };\n  return (\n    castCredential &&\n    typeof castCredential.getToken === \"function\" &&\n    (castCredential.signRequest === undefined || castCredential.getToken.length > 0)\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../shims-public.d.ts\" />\n\ntype AbortEventListener = (this: AbortSignalLike, ev?: any) => any;\n\nconst listenersMap = new WeakMap<AbortSignal, AbortEventListener[]>();\nconst abortedMap = new WeakMap<AbortSignal, boolean>();\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  /**\n   * Indicates if the signal has already been aborted.\n   */\n  readonly aborted: boolean;\n  /**\n   * Add new \"abort\" event listener, only support \"abort\" event.\n   */\n  addEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   */\n  removeEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n}\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport class AbortSignal implements AbortSignalLike {\n  constructor() {\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n  public get aborted(): boolean {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this)!;\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   */\n  public static get none(): AbortSignal {\n    return new AbortSignal();\n  }\n\n  /**\n   * onabort event listener.\n   */\n  public onabort: ((ev?: Event) => any) | null = null;\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be added\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n    listeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be removed\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n  dispatchEvent(_event: Event): boolean {\n    throw new Error(\n      \"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\"\n    );\n  }\n}\n\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal: AbortSignal): void {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal)!;\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach((listener) => {\n      listener.call(signal, { type: \"abort\" });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignal, AbortSignalLike, abortSignal } from \"./AbortSignal\";\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nexport class AbortController {\n  private _signal: AbortSignal;\n\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(parentSignals?: AbortSignalLike[]);\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(...parentSignals: AbortSignalLike[]);\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(parentSignals?: any) {\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n    for (const parentSignal of parentSignals) {\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", () => {\n          this.abort();\n        });\n      }\n    }\n  }\n\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   */\n  public get signal(): AbortSignal {\n    return this._signal;\n  }\n\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   */\n  abort(): void {\n    abortSignal(this._signal);\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   * @param ms - Elapsed time in milliseconds to trigger an abort.\n   */\n  public static timeout(ms: number): AbortSignal {\n    const signal = new AbortSignal();\n    const timer = setTimeout(abortSignal, ms, signal);\n    // Prevent the active Timer from keeping the Node.js event loop active.\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n    return signal;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, AbortSignalLike } from \"@azure/abort-controller\";\nimport { PipelineResponse } from \"../interfaces\";\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *                  - abortSignal - The abortSignal associated with containing operation.\n *                  - abortErrorMsg - The abort error message associated with containing operation.\n * @returns Resolved promise\n */\nexport function delay<T>(\n  delayInMs: number,\n  value?: T,\n  options?: {\n    abortSignal?: AbortSignalLike;\n    abortErrorMsg?: string;\n  }\n): Promise<T | void> {\n  return new Promise((resolve, reject) => {\n    let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n    let onAborted: (() => void) | undefined = undefined;\n\n    const rejectOnAbort = (): void => {\n      return reject(\n        new AbortError(options?.abortErrorMsg ? options?.abortErrorMsg : StandardAbortMessage)\n      );\n    };\n\n    const removeListeners = (): void => {\n      if (options?.abortSignal && onAborted) {\n        options.abortSignal.removeEventListener(\"abort\", onAborted);\n      }\n    };\n\n    onAborted = (): void => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n      removeListeners();\n      return rejectOnAbort();\n    };\n\n    if (options?.abortSignal && options.abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n\n    timer = setTimeout(() => {\n      removeListeners();\n      resolve(value);\n    }, delayInMs);\n\n    if (options?.abortSignal) {\n      options.abortSignal.addEventListener(\"abort\", onAborted);\n    }\n  });\n}\n\n/**\n * @internal\n * @returns the parsed value or undefined if the parsed value is invalid.\n */\nexport function parseHeaderValueAsNumber(\n  response: PipelineResponse,\n  headerName: string\n): number | undefined {\n  const value = response.headers.get(headerName);\n  if (!value) return;\n  const valueAsNum = Number(value);\n  if (Number.isNaN(valueAsNum)) return;\n  return valueAsNum;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { delay } from \"./helpers\";\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\nexport type AccessTokenGetter = (\n  scopes: string | string[],\n  options: GetTokenOptions\n) => Promise<AccessToken>;\n\nexport interface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  refreshTimeout: number\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < refreshTimeout) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(\n  credential: TokenCredential,\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n  let tenantId: string | undefined;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(\n    scopes: string | string[],\n    getTokenOptions: GetTokenOptions\n  ): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now()\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          tenantId = getTokenOptions.tenantId;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          tenantId = undefined;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (scopes: string | string[], tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    // If the tenantId passed in token options is different to the one we have\n    // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n    // refresh the token with the new tenantId or token.\n    const mustRefresh =\n      tenantId !== tokenOptions.tenantId || Boolean(tokenOptions.claims) || cycler.mustRefresh;\n\n    if (mustRefresh) return refresh(scopes, tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(scopes, tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { log } from \"./log\";\n\n/**\n * A simple mechanism for enabling logging.\n * Intended to mimic the publicly available `debug` package.\n */\nexport interface Debug {\n  /**\n   * Creates a new logger with the given namespace.\n   */\n  (namespace: string): Debugger;\n  /**\n   * The default log method (defaults to console)\n   */\n  log: (...args: any[]) => void;\n  /**\n   * Enables a particular set of namespaces.\n   * To enable multiple separate them with commas, e.g. \"info,debug\".\n   * Supports wildcards, e.g. \"azure:*\"\n   * Supports skip syntax, e.g. \"azure:*,-azure:storage:*\" will enable\n   * everything under azure except for things under azure:storage.\n   */\n  enable: (namespaces: string) => void;\n  /**\n   * Checks if a particular namespace is enabled.\n   */\n  enabled: (namespace: string) => boolean;\n  /**\n   * Disables all logging, returns what was previously enabled.\n   */\n  disable: () => string;\n}\n\n/**\n * A log function that can be dynamically enabled and redirected.\n */\nexport interface Debugger {\n  /**\n   * Logs the given arguments to the `log` method.\n   */\n  (...args: any[]): void;\n  /**\n   * True if this logger is active and logging.\n   */\n  enabled: boolean;\n  /**\n   * Used to cleanup/remove this logger.\n   */\n  destroy: () => boolean;\n  /**\n   * The current log method. Can be overridden to redirect output.\n   */\n  log: (...args: any[]) => void;\n  /**\n   * The namespace of this logger.\n   */\n  namespace: string;\n  /**\n   * Extends this logger with a child namespace.\n   * Namespaces are separated with a ':' character.\n   */\n  extend: (namespace: string) => Debugger;\n}\n\nconst debugEnvVariable =\n  (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\n\nlet enabledString: string | undefined;\nlet enabledNamespaces: RegExp[] = [];\nlet skippedNamespaces: RegExp[] = [];\nconst debuggers: Debugger[] = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj: Debug = Object.assign(\n  (namespace: string): Debugger => {\n    return createDebugger(namespace);\n  },\n  {\n    enable,\n    enabled,\n    disable,\n    log,\n  }\n);\n\nfunction enable(namespaces: string): void {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace: string): boolean {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction disable(): string {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace: string): Debugger {\n  const newDebugger: Debugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend,\n  });\n\n  function debug(...args: any[]): void {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n\n  return newDebugger;\n}\n\nfunction destroy(this: Debugger): boolean {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction extend(this: Debugger, namespace: string): Debugger {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function log(...args: any[]): void {\n  if (args.length > 0) {\n    const firstArg = String(args[0]);\n    if (firstArg.includes(\":error\")) {\n      console.error(...args);\n    } else if (firstArg.includes(\":warning\")) {\n      console.warn(...args);\n    } else if (firstArg.includes(\":info\")) {\n      console.info(...args);\n    } else if (firstArg.includes(\":verbose\")) {\n      console.debug(...args);\n    } else {\n      console.debug(...args);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport debug, { Debugger } from \"./debug\";\nexport { Debugger } from \"./debug\";\n\nconst registeredLoggers = new Set<AzureDebugger>();\nconst logLevelFromEnv =\n  (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\n\nlet azureLogLevel: AzureLogLevel | undefined;\n\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger: AzureClientLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n  debug.log(...args);\n};\n\n/**\n * The log levels supported by the logger.\n * The log levels in order of most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport type AzureLogLevel = \"verbose\" | \"info\" | \"warning\" | \"error\";\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\n\ntype AzureDebugger = Debugger & { level: AzureLogLevel };\n\n/**\n * An AzureClientLogger is a function that can log to an appropriate severity level.\n */\nexport type AzureClientLogger = Debugger;\n\nif (logLevelFromEnv) {\n  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n  if (isAzureLogLevel(logLevelFromEnv)) {\n    setLogLevel(logLevelFromEnv);\n  } else {\n    console.error(\n      `AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\n        \", \"\n      )}.`\n    );\n  }\n}\n\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level?: AzureLogLevel): void {\n  if (level && !isAzureLogLevel(level)) {\n    throw new Error(\n      `Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`\n    );\n  }\n  azureLogLevel = level;\n\n  const enabledNamespaces = [];\n  for (const logger of registeredLoggers) {\n    if (shouldEnable(logger)) {\n      enabledNamespaces.push(logger.namespace);\n    }\n  }\n\n  debug.enable(enabledNamespaces.join(\",\"));\n}\n\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel(): AzureLogLevel | undefined {\n  return azureLogLevel;\n}\n\nconst levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100,\n};\n\n/**\n * Defines the methods available on the SDK-facing logger.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface AzureLogger {\n  /**\n   * Used for failures the program is unlikely to recover from,\n   * such as Out of Memory.\n   */\n  error: Debugger;\n  /**\n   * Used when a function fails to perform its intended task.\n   * Usually this means the function will throw an exception.\n   * Not used for self-healing events (e.g. automatic retry)\n   */\n  warning: Debugger;\n  /**\n   * Used when a function operates normally.\n   */\n  info: Debugger;\n  /**\n   * Used for detailed troubleshooting scenarios. This is\n   * intended for use by developers / system administrators\n   * for diagnosing specific failures.\n   */\n  verbose: Debugger;\n}\n\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace: string): AzureLogger {\n  const clientRootLogger: AzureClientLogger = AzureLogger.extend(namespace);\n  patchLogMethod(AzureLogger, clientRootLogger);\n  return {\n    error: createLogger(clientRootLogger, \"error\"),\n    warning: createLogger(clientRootLogger, \"warning\"),\n    info: createLogger(clientRootLogger, \"info\"),\n    verbose: createLogger(clientRootLogger, \"verbose\"),\n  };\n}\n\nfunction patchLogMethod(parent: AzureClientLogger, child: AzureClientLogger | AzureDebugger): void {\n  child.log = (...args) => {\n    parent.log(...args);\n  };\n}\n\nfunction createLogger(parent: AzureClientLogger, level: AzureLogLevel): AzureDebugger {\n  const logger: AzureDebugger = Object.assign(parent.extend(level), {\n    level,\n  });\n\n  patchLogMethod(parent, logger);\n\n  if (shouldEnable(logger)) {\n    const enabledNamespaces = debug.disable();\n    debug.enable(enabledNamespaces + \",\" + logger.namespace);\n  }\n\n  registeredLoggers.add(logger);\n\n  return logger;\n}\n\nfunction shouldEnable(logger: AzureDebugger): boolean {\n  return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\n\nfunction isAzureLogLevel(logLevel: string): logLevel is AzureLogLevel {\n  return AZURE_LOG_LEVELS.includes(logLevel as any);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-rest-pipeline\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { AzureLogger } from \"@azure/logger\";\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\nimport { createTokenCycler } from \"../util/tokenCycler\";\nimport { logger as coreLogger } from \"../log\";\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexport const bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n\n/**\n * Options sent to the authorizeRequest callback\n */\nexport interface AuthorizeRequestOptions {\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string[];\n  /**\n   * Function that retrieves either a cached access token or a new access token.\n   */\n  getAccessToken: (scopes: string[], options: GetTokenOptions) => Promise<AccessToken | null>;\n  /**\n   * Request that the policy is trying to fulfill.\n   */\n  request: PipelineRequest;\n  /**\n   * A logger, if one was sent through the HTTP pipeline.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Options sent to the authorizeRequestOnChallenge callback\n */\nexport interface AuthorizeRequestOnChallengeOptions {\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string[];\n  /**\n   * Function that retrieves either a cached access token or a new access token.\n   */\n  getAccessToken: (scopes: string[], options: GetTokenOptions) => Promise<AccessToken | null>;\n  /**\n   * Request that the policy is trying to fulfill.\n   */\n  request: PipelineRequest;\n  /**\n   * Response containing the challenge.\n   */\n  response: PipelineResponse;\n  /**\n   * A logger, if one was sent through the HTTP pipeline.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Options to override the processing of [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation) challenges.\n */\nexport interface ChallengeCallbacks {\n  /**\n   * Allows for the authorization of the main request of this policy before it's sent.\n   */\n  authorizeRequest?(options: AuthorizeRequestOptions): Promise<void>;\n  /**\n   * Allows to handle authentication challenges and to re-authorize the request.\n   * The response containing the challenge is `options.response`.\n   * If this method returns true, the underlying request will be sent once again.\n   * The request may be modified before being sent.\n   */\n  authorizeRequestOnChallenge?(options: AuthorizeRequestOnChallengeOptions): Promise<boolean>;\n}\n\n/**\n * Options to configure the bearerTokenAuthenticationPolicy\n */\nexport interface BearerTokenAuthenticationPolicyOptions {\n  /**\n   * The TokenCredential implementation that can supply the bearer token.\n   */\n  credential?: TokenCredential;\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string | string[];\n  /**\n   * Allows for the processing of [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation) challenges.\n   * If provided, it must contain at least the `authorizeRequestOnChallenge` method.\n   * If provided, after a request is sent, if it has a challenge, it can be processed to re-send the original request with the relevant challenge information.\n   */\n  challengeCallbacks?: ChallengeCallbacks;\n  /**\n   * A logger can be sent for debugging purposes.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options: AuthorizeRequestOptions): Promise<void> {\n  const { scopes, getAccessToken, request } = options;\n  const getTokenOptions: GetTokenOptions = {\n    abortSignal: request.abortSignal,\n    tracingOptions: request.tracingOptions,\n  };\n  const accessToken = await getAccessToken(scopes, getTokenOptions);\n\n  if (accessToken) {\n    options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n  }\n}\n\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response: PipelineResponse): string | undefined {\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n  return;\n}\n\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nexport function bearerTokenAuthenticationPolicy(\n  options: BearerTokenAuthenticationPolicyOptions\n): PipelinePolicy {\n  const { credential, scopes, challengeCallbacks } = options;\n  const logger = options.logger || coreLogger;\n  const callbacks = {\n    authorizeRequest: challengeCallbacks?.authorizeRequest ?? defaultAuthorizeRequest,\n    authorizeRequestOnChallenge: challengeCallbacks?.authorizeRequestOnChallenge,\n    // keep all other properties\n    ...challengeCallbacks,\n  };\n\n  // This function encapsulates the entire process of reliably retrieving the token\n  // The options are left out of the public API until there's demand to configure this.\n  // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n  // in order to pass through the `options` object.\n  const getAccessToken = credential\n    ? createTokenCycler(credential /* , options */)\n    : () => Promise.resolve(null);\n\n  return {\n    name: bearerTokenAuthenticationPolicyName,\n    /**\n     * If there's no challenge parameter:\n     * - It will try to retrieve the token using the cache, or the credential's getToken.\n     * - Then it will try the next policy with or without the retrieved token.\n     *\n     * It uses the challenge parameters to:\n     * - Skip a first attempt to get the token from the credential if there's no cached token,\n     *   since it expects the token to be retrievable only after the challenge.\n     * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n     * - Send an initial request to receive the challenge if it fails.\n     * - Process a challenge if the response contains it.\n     * - Retrieve a token with the challenge information, then re-send the request.\n     */\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\"\n        );\n      }\n\n      await callbacks.authorizeRequest({\n        scopes: Array.isArray(scopes) ? scopes : [scopes],\n        request,\n        getAccessToken,\n        logger,\n      });\n\n      let response: PipelineResponse;\n      let error: Error | undefined;\n      try {\n        response = await next(request);\n      } catch (err: any) {\n        error = err;\n        response = err.response;\n      }\n\n      if (\n        callbacks.authorizeRequestOnChallenge &&\n        response?.status === 401 &&\n        getChallenge(response)\n      ) {\n        // processes challenge\n        const shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n          scopes: Array.isArray(scopes) ? scopes : [scopes],\n          request,\n          response,\n          getAccessToken,\n          logger,\n        });\n\n        if (shouldSendRequest) {\n          return next(request);\n        }\n      }\n\n      if (error) {\n        throw error;\n      } else {\n        return response;\n      }\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A generic shape for a plain JS object.\n */\nexport type UnknownObject = { [s: string]: unknown };\n\n/**\n * Helper to determine when an input is a generic JS object.\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input: unknown): input is UnknownObject {\n  return (\n    typeof input === \"object\" &&\n    input !== null &&\n    !Array.isArray(input) &&\n    !(input instanceof RegExp) &&\n    !(input instanceof Date)\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { UnknownObject, isObject } from \"@azure/core-util\";\n\n/**\n * @internal\n */\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Accept-Encoding\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"WWW-Authenticate\",\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\n/**\n * @internal\n */\nexport class Sanitizer {\n  private allowedHeaderNames: Set<string>;\n  private allowedQueryParameters: Set<string>;\n\n  constructor({\n    additionalAllowedHeaderNames: allowedHeaderNames = [],\n    additionalAllowedQueryParameters: allowedQueryParameters = [],\n  }: SanitizerOptions = {}) {\n    allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n    allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    const seen = new Set<unknown>();\n    return JSON.stringify(\n      obj,\n      (key: string, value: unknown) => {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return {\n            ...value,\n            name: value.name,\n            message: value.message,\n          };\n        }\n\n        if (key === \"headers\") {\n          return this.sanitizeHeaders(value as UnknownObject);\n        } else if (key === \"url\") {\n          return this.sanitizeUrl(value as string);\n        } else if (key === \"query\") {\n          return this.sanitizeQuery(value as UnknownObject);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n\n        return value;\n      },\n      2\n    );\n  }\n\n  private sanitizeHeaders(obj: UnknownObject): UnknownObject {\n    const sanitized: UnknownObject = {};\n    for (const key of Object.keys(obj)) {\n      if (this.allowedHeaderNames.has(key.toLowerCase())) {\n        sanitized[key] = obj[key];\n      } else {\n        sanitized[key] = RedactedString;\n      }\n    }\n    return sanitized;\n  }\n\n  private sanitizeQuery(value: UnknownObject): UnknownObject {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: UnknownObject = {};\n\n    for (const k of Object.keys(value)) {\n      if (this.allowedQueryParameters.has(k.toLowerCase())) {\n        sanitized[k] = value[k];\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const url = new URL(value);\n\n    if (!url.search) {\n      return value;\n    }\n\n    for (const [key] of url.searchParams) {\n      if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n        url.searchParams.set(key, RedactedString);\n      }\n    }\n\n    return url.toString();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Debugger } from \"@azure/logger\";\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n\n/**\n * Options to configure the logPolicy.\n */\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n\n  /**\n   * The log function to use for writing pipeline logs.\n   * Defaults to core-http's built-in logger.\n   * Compatible with the `debug` library.\n   */\n  logger?: Debugger;\n}\n\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy(options: LogPolicyOptions = {}): PipelinePolicy {\n  const logger = options.logger ?? coreLogger.info;\n  const sanitizer = new Sanitizer({\n    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n  });\n  return {\n    name: logPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!logger.enabled) {\n        return next(request);\n      }\n\n      logger(`Request: ${sanitizer.sanitize(request)}`);\n\n      const response = await next(request);\n\n      logger(`Response status code: ${response.status}`);\n      logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n\n      return response;\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpClient, PipelineRequest, PipelineResponse, SendRequest } from \"./interfaces\";\n\n/**\n * Policies are executed in phases.\n * The execution order is:\n * 1. Serialize Phase\n * 2. Policies not in a phase\n * 3. Deserialize Phase\n * 4. Retry Phase\n * 5. Sign Phase\n */\nexport type PipelinePhase = \"Deserialize\" | \"Serialize\" | \"Retry\" | \"Sign\";\n\nconst ValidPhaseNames = new Set<PipelinePhase>([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n\n/**\n * Options when adding a policy to the pipeline.\n * Used to express dependencies on other policies.\n */\nexport interface AddPolicyOptions {\n  /**\n   * Policies that this policy must come before.\n   */\n  beforePolicies?: string[];\n  /**\n   * Policies that this policy must come after.\n   */\n  afterPolicies?: string[];\n  /**\n   * The phase that this policy must come after.\n   */\n  afterPhase?: PipelinePhase;\n  /**\n   * The phase this policy belongs to.\n   */\n  phase?: PipelinePhase;\n}\n\n/**\n * A pipeline policy manipulates a request as it travels through the pipeline.\n * It is conceptually a middleware that is allowed to modify the request before\n * it is made as well as the response when it is received.\n */\nexport interface PipelinePolicy {\n  /**\n   * The policy name. Must be a unique string in the pipeline.\n   */\n  name: string;\n  /**\n   * The main method to implement that manipulates a request/response.\n   * @param request - The request being performed.\n   * @param next - The next policy in the pipeline. Must be called to continue the pipeline.\n   */\n  sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse>;\n}\n\n/**\n * Represents a pipeline for making a HTTP request to a URL.\n * Pipelines can have multiple policies to manage manipulating each request\n * before and after it is made to the server.\n */\nexport interface Pipeline {\n  /**\n   * Add a new policy to the pipeline.\n   * @param policy - A policy that manipulates a request.\n   * @param options - A set of options for when the policy should run.\n   */\n  addPolicy(policy: PipelinePolicy, options?: AddPolicyOptions): void;\n  /**\n   * Remove a policy from the pipeline.\n   * @param options - Options that let you specify which policies to remove.\n   */\n  removePolicy(options: { name?: string; phase?: PipelinePhase }): PipelinePolicy[];\n  /**\n   * Uses the pipeline to make a HTTP request.\n   * @param httpClient - The HttpClient that actually performs the request.\n   * @param request - The request to be made.\n   */\n  sendRequest(httpClient: HttpClient, request: PipelineRequest): Promise<PipelineResponse>;\n  /**\n   * Returns the current set of policies in the pipeline in the order in which\n   * they will be applied to the request. Later in the list is closer to when\n   * the request is performed.\n   */\n  getOrderedPolicies(): PipelinePolicy[];\n  /**\n   * Duplicates this pipeline to allow for modifying an existing one without mutating it.\n   */\n  clone(): Pipeline;\n}\n\ninterface PipelineDescriptor {\n  policy: PipelinePolicy;\n  options: AddPolicyOptions;\n}\n\ninterface PolicyGraphNode {\n  policy: PipelinePolicy;\n  dependsOn: Set<PolicyGraphNode>;\n  dependants: Set<PolicyGraphNode>;\n  afterPhase?: Phase;\n}\n\ninterface Phase {\n  name: PipelinePhase | \"None\";\n  policies: Set<PolicyGraphNode>;\n  hasRun: boolean;\n  hasAfterPolicies: boolean;\n}\n\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline implements Pipeline {\n  private _policies: PipelineDescriptor[] = [];\n  private _orderedPolicies?: PipelinePolicy[];\n\n  private constructor(policies?: PipelineDescriptor[]) {\n    this._policies = policies?.slice(0) ?? [];\n    this._orderedPolicies = undefined;\n  }\n\n  public addPolicy(policy: PipelinePolicy, options: AddPolicyOptions = {}): void {\n    if (options.phase && options.afterPhase) {\n      throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n    }\n    if (options.phase && !ValidPhaseNames.has(options.phase)) {\n      throw new Error(`Invalid phase name: ${options.phase}`);\n    }\n    if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n      throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n    }\n    this._policies.push({\n      policy,\n      options,\n    });\n    this._orderedPolicies = undefined;\n  }\n\n  public removePolicy(options: { name?: string; phase?: string }): PipelinePolicy[] {\n    const removedPolicies: PipelinePolicy[] = [];\n\n    this._policies = this._policies.filter((policyDescriptor) => {\n      if (\n        (options.name && policyDescriptor.policy.name === options.name) ||\n        (options.phase && policyDescriptor.options.phase === options.phase)\n      ) {\n        removedPolicies.push(policyDescriptor.policy);\n        return false;\n      } else {\n        return true;\n      }\n    });\n    this._orderedPolicies = undefined;\n\n    return removedPolicies;\n  }\n\n  public sendRequest(httpClient: HttpClient, request: PipelineRequest): Promise<PipelineResponse> {\n    const policies = this.getOrderedPolicies();\n\n    const pipeline = policies.reduceRight<SendRequest>(\n      (next, policy) => {\n        return (req: PipelineRequest) => {\n          return policy.sendRequest(req, next);\n        };\n      },\n      (req: PipelineRequest) => httpClient.sendRequest(req)\n    );\n\n    return pipeline(request);\n  }\n\n  public getOrderedPolicies(): PipelinePolicy[] {\n    if (!this._orderedPolicies) {\n      this._orderedPolicies = this.orderPolicies();\n    }\n    return this._orderedPolicies;\n  }\n\n  public clone(): Pipeline {\n    return new HttpPipeline(this._policies);\n  }\n\n  public static create(): Pipeline {\n    return new HttpPipeline();\n  }\n\n  private orderPolicies(): PipelinePolicy[] {\n    /**\n     * The goal of this method is to reliably order pipeline policies\n     * based on their declared requirements when they were added.\n     *\n     * Order is first determined by phase:\n     *\n     * 1. Serialize Phase\n     * 2. Policies not in a phase\n     * 3. Deserialize Phase\n     * 4. Retry Phase\n     * 5. Sign Phase\n     *\n     * Within each phase, policies are executed in the order\n     * they were added unless they were specified to execute\n     * before/after other policies or after a particular phase.\n     *\n     * To determine the final order, we will walk the policy list\n     * in phase order multiple times until all dependencies are\n     * satisfied.\n     *\n     * `afterPolicies` are the set of policies that must be\n     * executed before a given policy. This requirement is\n     * considered satisfied when each of the listed policies\n     * have been scheduled.\n     *\n     * `beforePolicies` are the set of policies that must be\n     * executed after a given policy. Since this dependency\n     * can be expressed by converting it into a equivalent\n     * `afterPolicies` declarations, they are normalized\n     * into that form for simplicity.\n     *\n     * An `afterPhase` dependency is considered satisfied when all\n     * policies in that phase have scheduled.\n     *\n     */\n    const result: PipelinePolicy[] = [];\n\n    // Track all policies we know about.\n    const policyMap: Map<string, PolicyGraphNode> = new Map<string, PolicyGraphNode>();\n\n    function createPhase(name: PipelinePhase | \"None\"): Phase {\n      return {\n        name,\n        policies: new Set<PolicyGraphNode>(),\n        hasRun: false,\n        hasAfterPolicies: false,\n      };\n    }\n\n    // Track policies for each phase.\n    const serializePhase = createPhase(\"Serialize\");\n    const noPhase = createPhase(\"None\");\n    const deserializePhase = createPhase(\"Deserialize\");\n    const retryPhase = createPhase(\"Retry\");\n    const signPhase = createPhase(\"Sign\");\n\n    // a list of phases in order\n    const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];\n\n    // Small helper function to map phase name to each Phase\n    function getPhase(phase: PipelinePhase | undefined): Phase {\n      if (phase === \"Retry\") {\n        return retryPhase;\n      } else if (phase === \"Serialize\") {\n        return serializePhase;\n      } else if (phase === \"Deserialize\") {\n        return deserializePhase;\n      } else if (phase === \"Sign\") {\n        return signPhase;\n      } else {\n        return noPhase;\n      }\n    }\n\n    // First walk each policy and create a node to track metadata.\n    for (const descriptor of this._policies) {\n      const policy = descriptor.policy;\n      const options = descriptor.options;\n      const policyName = policy.name;\n      if (policyMap.has(policyName)) {\n        throw new Error(\"Duplicate policy names not allowed in pipeline\");\n      }\n      const node: PolicyGraphNode = {\n        policy,\n        dependsOn: new Set<PolicyGraphNode>(),\n        dependants: new Set<PolicyGraphNode>(),\n      };\n      if (options.afterPhase) {\n        node.afterPhase = getPhase(options.afterPhase);\n        node.afterPhase.hasAfterPolicies = true;\n      }\n      policyMap.set(policyName, node);\n      const phase = getPhase(options.phase);\n      phase.policies.add(node);\n    }\n\n    // Now that each policy has a node, connect dependency references.\n    for (const descriptor of this._policies) {\n      const { policy, options } = descriptor;\n      const policyName = policy.name;\n      const node = policyMap.get(policyName);\n      if (!node) {\n        throw new Error(`Missing node for policy ${policyName}`);\n      }\n\n      if (options.afterPolicies) {\n        for (const afterPolicyName of options.afterPolicies) {\n          const afterNode = policyMap.get(afterPolicyName);\n          if (afterNode) {\n            // Linking in both directions helps later\n            // when we want to notify dependants.\n            node.dependsOn.add(afterNode);\n            afterNode.dependants.add(node);\n          }\n        }\n      }\n      if (options.beforePolicies) {\n        for (const beforePolicyName of options.beforePolicies) {\n          const beforeNode = policyMap.get(beforePolicyName);\n          if (beforeNode) {\n            // To execute before another node, make it\n            // depend on the current node.\n            beforeNode.dependsOn.add(node);\n            node.dependants.add(beforeNode);\n          }\n        }\n      }\n    }\n\n    function walkPhase(phase: Phase): void {\n      phase.hasRun = true;\n      // Sets iterate in insertion order\n      for (const node of phase.policies) {\n        if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n          // If this node is waiting on a phase to complete,\n          // we need to skip it for now.\n          // Even if the phase is empty, we should wait for it\n          // to be walked to avoid re-ordering policies.\n          continue;\n        }\n        if (node.dependsOn.size === 0) {\n          // If there's nothing else we're waiting for, we can\n          // add this policy to the result list.\n          result.push(node.policy);\n          // Notify anything that depends on this policy that\n          // the policy has been scheduled.\n          for (const dependant of node.dependants) {\n            dependant.dependsOn.delete(node);\n          }\n          policyMap.delete(node.policy.name);\n          phase.policies.delete(node);\n        }\n      }\n    }\n\n    function walkPhases(): void {\n      for (const phase of orderedPhases) {\n        walkPhase(phase);\n        // if the phase isn't complete\n        if (phase.policies.size > 0 && phase !== noPhase) {\n          if (!noPhase.hasRun) {\n            // Try running noPhase to see if that unblocks this phase next tick.\n            // This can happen if a phase that happens before noPhase\n            // is waiting on a noPhase policy to complete.\n            walkPhase(noPhase);\n          }\n          // Don't proceed to the next phase until this phase finishes.\n          return;\n        }\n\n        if (phase.hasAfterPolicies) {\n          // Run any policies unblocked by this phase\n          walkPhase(noPhase);\n        }\n      }\n    }\n\n    // Iterate until we've put every node in the result list.\n    let iteration = 0;\n    while (policyMap.size > 0) {\n      iteration++;\n      const initialResultLength = result.length;\n      // Keep walking each phase in order until we can order every node.\n      walkPhases();\n      // The result list *should* get at least one larger each time\n      // after the first full pass.\n      // Otherwise, we're going to loop forever.\n      if (result.length <= initialResultLength && iteration > 1) {\n        throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nexport function createEmptyPipeline(): Pipeline {\n  return HttpPipeline.create();\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\n\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectPolicyOptions {\n  /**\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy(options: RedirectPolicyOptions = {}): PipelinePolicy {\n  const { maxRetries = 20 } = options;\n  return {\n    name: redirectPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      const response = await next(request);\n      return handleRedirect(next, response, maxRetries);\n    },\n  };\n}\n\nasync function handleRedirect(\n  next: SendRequest,\n  response: PipelineResponse,\n  maxRetries: number,\n  currentRetries: number = 0\n): Promise<PipelineResponse> {\n  const { request, status, headers } = response;\n  const locationHeader = headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && allowedRedirect.includes(request.method)) ||\n      (status === 302 && allowedRedirect.includes(request.method)) ||\n      (status === 303 && request.method === \"POST\") ||\n      status === 307) &&\n    currentRetries < maxRetries\n  ) {\n    const url = new URL(locationHeader, request.url);\n    request.url = url.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      request.headers.delete(\"Content-Length\");\n      delete request.body;\n    }\n\n    request.headers.delete(\"Authorization\");\n\n    const res = await next(request);\n    return handleRedirect(next, res, maxRetries, currentRetries + 1);\n  }\n\n  return response;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION: string = \"1.12.2\";\n\nexport const DEFAULT_RETRY_POLICY_COUNT = 3;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getHeaderName, setPlatformSpecificData } from \"./userAgentPlatform\";\nimport { SDK_VERSION } from \"../constants\";\n\nfunction getUserAgentString(telemetryInfo: Map<string, string>): string {\n  const parts: string[] = [];\n  for (const [key, value] of telemetryInfo) {\n    const token = value ? `${key}/${value}` : key;\n    parts.push(token);\n  }\n  return parts.join(\" \");\n}\n\n/**\n * @internal\n */\nexport function getUserAgentHeaderName(): string {\n  return getHeaderName();\n}\n\n/**\n * @internal\n */\nexport function getUserAgentValue(prefix?: string): string {\n  const runtimeInfo = new Map<string, string>();\n  runtimeInfo.set(\"core-rest-pipeline\", SDK_VERSION);\n  setPlatformSpecificData(runtimeInfo);\n  const defaultAgent = getUserAgentString(runtimeInfo);\n  const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n  return userAgentValue;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json.\n */\n\n/**\n * @internal\n */\nexport function getHeaderName(): string {\n  return \"x-ms-useragent\";\n}\n\ninterface NavigatorEx extends Navigator {\n  userAgentData?: {\n    platform?: string;\n  };\n}\n\n/**\n * @internal\n */\nexport function setPlatformSpecificData(map: Map<string, string>): void {\n  const localNavigator = globalThis.navigator as NavigatorEx;\n  map.set(\n    \"OS\",\n    (localNavigator?.userAgentData?.platform ?? localNavigator?.platform ?? \"unknown\").replace(\n      \" \",\n      \"\"\n    )\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\nimport { getUserAgentHeaderName, getUserAgentValue } from \"../util/userAgent\";\n\nconst UserAgentHeaderName = getUserAgentHeaderName();\n\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nexport const userAgentPolicyName = \"userAgentPolicy\";\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentPolicyOptions {\n  /**\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nexport function userAgentPolicy(options: UserAgentPolicyOptions = {}): PipelinePolicy {\n  const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n  return {\n    name: userAgentPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(UserAgentHeaderName)) {\n        request.headers.set(UserAgentHeaderName, userAgentValue);\n      }\n      return next(request);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineResponse } from \"..\";\nimport { parseHeaderValueAsNumber } from \"../util/helpers\";\nimport { RetryStrategy } from \"./retryStrategy\";\n\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders: string[] = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response?: PipelineResponse): number | undefined {\n  if (!(response && [429, 503].includes(response.status))) return undefined;\n  try {\n    // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n    for (const header of AllRetryAfterHeaders) {\n      const retryAfterValue = parseHeaderValueAsNumber(response, header);\n      if (retryAfterValue === 0 || retryAfterValue) {\n        // \"Retry-After\" header ==> seconds\n        // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n        const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n        return retryAfterValue * multiplyingFactor; // in milli-seconds\n      }\n    }\n\n    // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n    const retryAfterHeader = response.headers.get(RetryAfterHeader);\n    if (!retryAfterHeader) return;\n\n    const date = Date.parse(retryAfterHeader);\n    const diff = date - Date.now();\n    // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n    return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n  } catch (e: any) {\n    return undefined;\n  }\n}\n\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response?: PipelineResponse): boolean {\n  return Number.isFinite(getRetryAfterInMs(response));\n}\n\nexport function throttlingRetryStrategy(): RetryStrategy {\n  return {\n    name: \"throttlingRetryStrategy\",\n    retry({ response }) {\n      const retryAfterInMs = getRetryAfterInMs(response);\n      if (!Number.isFinite(retryAfterInMs)) {\n        return { skipStrategy: true };\n      }\n      return {\n        retryAfterInMs,\n      };\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineResponse } from \"../interfaces\";\nimport { RestError } from \"../restError\";\nimport { getRandomIntegerInclusive } from \"@azure/core-util\";\nimport { RetryStrategy } from \"./retryStrategy\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy\";\n\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nexport function exponentialRetryStrategy(\n  options: {\n    /**\n     * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n     * (1 second.) The delay increases exponentially with each retry up to a maximum\n     * specified by maxRetryDelayInMs.\n     */\n    retryDelayInMs?: number;\n\n    /**\n     * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n     * to 64000 (64 seconds).\n     */\n    maxRetryDelayInMs?: number;\n\n    /**\n     * If true it won't retry if it received a system error.\n     */\n    ignoreSystemErrors?: boolean;\n\n    /**\n     * If true it won't retry if it received a non-fatal HTTP status code.\n     */\n    ignoreHttpStatusCodes?: boolean;\n  } = {}\n): RetryStrategy {\n  const retryInterval = options.retryDelayInMs ?? DEFAULT_CLIENT_RETRY_INTERVAL;\n  const maxRetryInterval = options.maxRetryDelayInMs ?? DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n\n  let retryAfterInMs = retryInterval;\n\n  return {\n    name: \"exponentialRetryStrategy\",\n    retry({ retryCount, response, responseError }) {\n      const matchedSystemError = isSystemError(responseError);\n      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n\n      const isExponential = isExponentialRetryResponse(response);\n      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n      const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n\n      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n        return { skipStrategy: true };\n      }\n\n      if (responseError && !matchedSystemError && !isExponential) {\n        return { errorToThrow: responseError };\n      }\n\n      // Exponentially increase the delay each time\n      const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n      // Don't let the delay exceed the maximum\n      const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n      // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n      // that retries across multiple clients don't occur simultaneously.\n      retryAfterInMs =\n        clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n      return { retryAfterInMs };\n    },\n  };\n}\n\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nexport function isExponentialRetryResponse(response?: PipelineResponse): boolean {\n  return Boolean(\n    response &&\n      response.status !== undefined &&\n      (response.status >= 500 || response.status === 408) &&\n      response.status !== 501 &&\n      response.status !== 505\n  );\n}\n\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nexport function isSystemError(err?: RestError): boolean {\n  if (!err) {\n    return false;\n  }\n  return (\n    err.code === \"ETIMEDOUT\" ||\n    err.code === \"ESOCKETTIMEDOUT\" ||\n    err.code === \"ECONNREFUSED\" ||\n    err.code === \"ECONNRESET\" ||\n    err.code === \"ENOENT\" ||\n    err.code === \"ENOTFOUND\"\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min: number, max: number): number {\n  // Make sure inputs are integers.\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  // Pick a random offset from zero to the size of the range.\n  // Since Math.random() can never return 1, we have to make the range one larger\n  // in order to be inclusive of the maximum value after we take the floor.\n  const offset = Math.floor(Math.random() * (max - min + 1));\n  return offset + min;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\nimport { delay } from \"../util/helpers\";\nimport { createClientLogger } from \"@azure/logger\";\nimport { RetryStrategy } from \"../retryStrategies/retryStrategy\";\nimport { RestError } from \"../restError\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { AzureLogger } from \"@azure/logger\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants\";\n\nconst retryPolicyLogger = createClientLogger(\"core-rest-pipeline retryPolicy\");\n\n/**\n * The programmatic identifier of the retryPolicy.\n */\nconst retryPolicyName = \"retryPolicy\";\n\n/**\n * Options to the {@link retryPolicy}\n */\nexport interface RetryPolicyOptions {\n  /**\n   * Maximum number of retries. If not specified, it will limit to 3 retries.\n   */\n  maxRetries?: number;\n  /**\n   * Logger. If it's not provided, a default logger is used.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nexport function retryPolicy(\n  strategies: RetryStrategy[],\n  options: RetryPolicyOptions = { maxRetries: DEFAULT_RETRY_POLICY_COUNT }\n): PipelinePolicy {\n  const logger = options.logger || retryPolicyLogger;\n  return {\n    name: retryPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      let response: PipelineResponse | undefined;\n      let responseError: RestError | undefined;\n      let retryCount = -1;\n\n      // eslint-disable-next-line no-constant-condition\n      retryRequest: while (true) {\n        retryCount += 1;\n        response = undefined;\n        responseError = undefined;\n\n        try {\n          logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);\n          response = await next(request);\n          logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);\n        } catch (e: any) {\n          logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);\n\n          // RestErrors are valid targets for the retry strategies.\n          // If none of the retry strategies can work with them, they will be thrown later in this policy.\n          // If the received error is not a RestError, it is immediately thrown.\n          responseError = e as RestError;\n          if (!e || responseError.name !== \"RestError\") {\n            throw e;\n          }\n\n          response = responseError.response;\n        }\n\n        if (request.abortSignal?.aborted) {\n          logger.error(`Retry ${retryCount}: Request aborted.`);\n          const abortError = new AbortError();\n          throw abortError;\n        }\n\n        if (retryCount >= (options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT)) {\n          logger.info(\n            `Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`\n          );\n          if (responseError) {\n            throw responseError;\n          } else if (response) {\n            return response;\n          } else {\n            throw new Error(\"Maximum retries reached with no response or error to throw\");\n          }\n        }\n\n        logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);\n\n        strategiesLoop: for (const strategy of strategies) {\n          const strategyLogger = strategy.logger || retryPolicyLogger;\n          strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);\n\n          const modifiers = strategy.retry({\n            retryCount,\n            response,\n            responseError,\n          });\n\n          if (modifiers.skipStrategy) {\n            strategyLogger.info(`Retry ${retryCount}: Skipped.`);\n            continue strategiesLoop;\n          }\n\n          const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;\n\n          if (errorToThrow) {\n            strategyLogger.error(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`,\n              errorToThrow\n            );\n            throw errorToThrow;\n          }\n\n          if (retryAfterInMs || retryAfterInMs === 0) {\n            strategyLogger.info(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`\n            );\n            await delay(retryAfterInMs, undefined, { abortSignal: request.abortSignal });\n            continue retryRequest;\n          }\n\n          if (redirectTo) {\n            strategyLogger.info(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`\n            );\n            request.url = redirectTo;\n            continue retryRequest;\n          }\n        }\n\n        if (responseError) {\n          logger.info(\n            `None of the retry strategies could work with the received error. Throwing it.`\n          );\n          throw responseError;\n        }\n        if (response) {\n          logger.info(\n            `None of the retry strategies could work with the received response. Returning it.`\n          );\n          return response;\n        }\n\n        // If all the retries skip and there's no response,\n        // we're still in the retry loop, so a new request will be sent\n        // until `maxRetries` is reached.\n      }\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRetryOptions } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy\";\nimport { throttlingRetryStrategy } from \"../retryStrategies/throttlingRetryStrategy\";\nimport { retryPolicy } from \"./retryPolicy\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants\";\n\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nexport const defaultRetryPolicyName = \"defaultRetryPolicy\";\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface DefaultRetryPolicyOptions extends PipelineRetryOptions {}\n\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nexport function defaultRetryPolicy(options: DefaultRetryPolicyOptions = {}): PipelinePolicy {\n  return {\n    name: defaultRetryPolicyName,\n    sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {\n      maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT,\n    }).sendRequest,\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\n\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nexport const formDataPolicyName = \"formDataPolicy\";\n\n/**\n * A policy that encodes FormData on the request into the body.\n */\nexport function formDataPolicy(): PipelinePolicy {\n  return {\n    name: formDataPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (request.formData) {\n        const formData = request.formData;\n        const requestForm = new FormData();\n        for (const formKey of Object.keys(formData)) {\n          const formValue = formData[formKey];\n          if (Array.isArray(formValue)) {\n            for (const subValue of formValue) {\n              requestForm.append(formKey, subValue);\n            }\n          } else {\n            requestForm.append(formKey, formValue);\n          }\n        }\n\n        request.body = requestForm;\n        request.formData = undefined;\n        const contentType = request.headers.get(\"Content-Type\");\n        if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n          request.body = new URLSearchParams(requestForm as any).toString();\n        } else if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n          // browser will automatically apply a suitable content-type header\n          request.headers.delete(\"Content-Type\");\n        }\n      }\n      return next(request);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  interface Window {\n    document: unknown;\n  }\n\n  interface DedicatedWorkerGlobalScope {\n    constructor: {\n      name: string;\n    };\n\n    importScripts: (...paths: string[]) => void;\n  }\n\n  interface Navigator {\n    product: string;\n  }\n\n  interface DenoGlobal {\n    version: {\n      deno: string;\n    };\n  }\n\n  interface BunGlobal {\n    version: string;\n  }\n\n  // eslint-disable-next-line @azure/azure-sdk/ts-no-window\n  const window: Window;\n  const self: DedicatedWorkerGlobalScope;\n  const Deno: DenoGlobal;\n  const Bun: BunGlobal;\n  const navigator: Navigator;\n}\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\nexport const isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexport const isWebWorker =\n  typeof self === \"object\" &&\n  typeof self?.importScripts === \"function\" &&\n  (self.constructor?.name === \"DedicatedWorkerGlobalScope\" ||\n    self.constructor?.name === \"ServiceWorkerGlobalScope\" ||\n    self.constructor?.name === \"SharedWorkerGlobalScope\");\n\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexport const isDeno =\n  typeof Deno !== \"undefined\" &&\n  typeof Deno.version !== \"undefined\" &&\n  typeof Deno.version.deno !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexport const isNode =\n  typeof process !== \"undefined\" &&\n  Boolean(process.version) &&\n  Boolean(process.versions?.node) &&\n  // Deno thought it was a good idea to spoof process.versions.node, see https://deno.land/std@0.177.0/node/process.ts?s=versions\n  !isDeno;\n\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexport const isBun = typeof Bun !== \"undefined\" && typeof Bun.version !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\n// https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js\nexport const isReactNative =\n  typeof navigator !== \"undefined\" && navigator?.product === \"ReactNative\";\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n */\n\nexport const proxyPolicyName = \"proxyPolicy\";\nconst errorMessage = \"proxyPolicy is not supported in browser environment\";\n\nexport function getDefaultProxySettings(): never {\n  throw new Error(errorMessage);\n}\n\n/**\n * proxyPolicy is not supported in the browser and attempting\n * to use it will raise an error.\n */\nexport function proxyPolicy(): never {\n  throw new Error(errorMessage);\n}\n\n/**\n * A function to reset the cached agents.\n * proxyPolicy is not supported in the browser and attempting\n * to use it will raise an error.\n * @internal\n */\nexport function resetCachedProxyAgents(): never {\n  throw new Error(errorMessage);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\n\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nexport const setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nexport function setClientRequestIdPolicy(\n  requestIdHeaderName = \"x-ms-client-request-id\"\n): PipelinePolicy {\n  return {\n    name: setClientRequestIdPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(requestIdHeaderName)) {\n        request.headers.set(requestIdHeaderName, request.requestId);\n      }\n      return next(request);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelinePolicy } from \"../pipeline\";\nimport { TlsSettings } from \"../interfaces\";\n\n/**\n * Name of the TLS Policy\n */\nexport const tlsPolicyName = \"tlsPolicy\";\n\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nexport function tlsPolicy(tlsSettings?: TlsSettings): PipelinePolicy {\n  return {\n    name: tlsPolicyName,\n    sendRequest: async (req, next) => {\n      // Users may define a request tlsSettings, honor those over the client level one\n      if (!req.tlsSettings) {\n        req.tlsSettings = tlsSettings;\n      }\n      return next(req);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TracingContext, TracingSpan } from \"./interfaces\";\n\n/** @internal */\nexport const knownContextKeys = {\n  span: Symbol.for(\"@azure/core-tracing span\"),\n  namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nexport function createTracingContext(options: CreateTracingContextOptions = {}): TracingContext {\n  let context: TracingContext = new TracingContextImpl(options.parentContext);\n  if (options.span) {\n    context = context.setValue(knownContextKeys.span, options.span);\n  }\n  if (options.namespace) {\n    context = context.setValue(knownContextKeys.namespace, options.namespace);\n  }\n  return context;\n}\n\n/** @internal */\nexport class TracingContextImpl implements TracingContext {\n  private _contextMap: Map<symbol, unknown>;\n  constructor(initialContext?: TracingContext) {\n    this._contextMap =\n      initialContext instanceof TracingContextImpl\n        ? new Map<symbol, unknown>(initialContext._contextMap)\n        : new Map();\n  }\n\n  setValue(key: symbol, value: unknown): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.set(key, value);\n    return newContext;\n  }\n\n  getValue(key: symbol): unknown {\n    return this._contextMap.get(key);\n  }\n\n  deleteValue(key: symbol): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.delete(key);\n    return newContext;\n  }\n}\n\n/**\n * Represents a set of items that can be set when creating a new {@link TracingContext}.\n */\nexport interface CreateTracingContextOptions {\n  /** The {@link parentContext} - the newly created context will contain all the values of the parent context unless overridden. */\n  parentContext?: TracingContext;\n  /** An initial span to set on the context. */\n  span?: TracingSpan;\n  /** The namespace to set on any child spans. */\n  namespace?: string;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Instrumenter, InstrumenterSpanOptions, TracingContext, TracingSpan } from \"./interfaces\";\nimport { createTracingContext } from \"./tracingContext\";\n\nexport function createDefaultTracingSpan(): TracingSpan {\n  return {\n    end: () => {\n      // noop\n    },\n    isRecording: () => false,\n    recordException: () => {\n      // noop\n    },\n    setAttribute: () => {\n      // noop\n    },\n    setStatus: () => {\n      // noop\n    },\n  };\n}\n\nexport function createDefaultInstrumenter(): Instrumenter {\n  return {\n    createRequestHeaders: (): Record<string, string> => {\n      return {};\n    },\n    parseTraceparentHeader: (): TracingContext | undefined => {\n      return undefined;\n    },\n    startSpan: (\n      _name: string,\n      spanOptions: InstrumenterSpanOptions\n    ): { span: TracingSpan; tracingContext: TracingContext } => {\n      return {\n        span: createDefaultTracingSpan(),\n        tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext }),\n      };\n    },\n    withContext<\n      CallbackArgs extends unknown[],\n      Callback extends (...args: CallbackArgs) => ReturnType<Callback>\n    >(\n      _context: TracingContext,\n      callback: Callback,\n      ...callbackArgs: CallbackArgs\n    ): ReturnType<Callback> {\n      return callback(...callbackArgs);\n    },\n  };\n}\n\n/** @internal */\nlet instrumenterImplementation: Instrumenter | undefined;\n\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter: Instrumenter): void {\n  instrumenterImplementation = instrumenter;\n}\n\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter(): Instrumenter {\n  if (!instrumenterImplementation) {\n    instrumenterImplementation = createDefaultInstrumenter();\n  }\n  return instrumenterImplementation;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isObject } from \"./object\";\n\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e: unknown): e is Error {\n  if (isObject(e)) {\n    const hasName = typeof e.name === \"string\";\n    const hasMessage = typeof e.message === \"string\";\n    return hasName && hasMessage;\n  }\n  return false;\n}\n\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e: unknown): string {\n  if (isError(e)) {\n    return e.message;\n  } else {\n    let stringified: string;\n    try {\n      if (typeof e === \"object\" && e) {\n        stringified = JSON.stringify(e);\n      } else {\n        stringified = String(e);\n      }\n    } catch (err: any) {\n      stringified = \"[unable to stringify input]\";\n    }\n    return `Unknown error ${stringified}`;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const custom = {};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isError } from \"@azure/core-util\";\nimport { PipelineRequest, PipelineResponse } from \"./interfaces\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\n\nconst errorSanitizer = new Sanitizer();\n\n/**\n * The options supported by RestError.\n */\nexport interface RestErrorOptions {\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  response?: PipelineResponse;\n}\n\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n  /**\n   * Something went wrong when making the request.\n   * This means the actual request failed for some reason,\n   * such as a DNS issue or the connection being lost.\n   */\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  /**\n   * This means that parsing the response from the server failed.\n   * It may have been malformed.\n   */\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  public code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  public statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  public request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  public response?: PipelineResponse;\n  /**\n   * Bonus property set by the throw site.\n   */\n  public details?: unknown;\n\n  constructor(message: string, options: RestErrorOptions = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n    this.request = options.request;\n    this.response = options.response;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom](): string {\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n  }\n}\n\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e: unknown): e is RestError {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TracingClient,\n  TracingContext,\n  TracingSpan,\n  createTracingClient,\n} from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants\";\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\nimport { getUserAgentValue } from \"../util/userAgent\";\nimport { logger } from \"../log\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError\";\n\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n\n/**\n * Options to configure the tracing policy.\n */\nexport interface TracingPolicyOptions {\n  /**\n   * String prefix to add to the user agent logged as metadata\n   * on the generated Span.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options: TracingPolicyOptions = {}): PipelinePolicy {\n  const userAgent = getUserAgentValue(options.userAgentPrefix);\n  const tracingClient = tryCreateTracingClient();\n\n  return {\n    name: tracingPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!tracingClient || !request.tracingOptions?.tracingContext) {\n        return next(request);\n      }\n\n      const { span, tracingContext } = tryCreateSpan(tracingClient, request, userAgent) ?? {};\n\n      if (!span || !tracingContext) {\n        return next(request);\n      }\n\n      try {\n        const response = await tracingClient.withContext(tracingContext, next, request);\n        tryProcessResponse(span, response);\n        return response;\n      } catch (err: any) {\n        tryProcessError(span, err);\n        throw err;\n      }\n    },\n  };\n}\n\nfunction tryCreateTracingClient(): TracingClient | undefined {\n  try {\n    return createTracingClient({\n      namespace: \"\",\n      packageName: \"@azure/core-rest-pipeline\",\n      packageVersion: SDK_VERSION,\n    });\n  } catch (e: unknown) {\n    logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\n\nfunction tryCreateSpan(\n  tracingClient: TracingClient,\n  request: PipelineRequest,\n  userAgent?: string\n): { span: TracingSpan; tracingContext: TracingContext } | undefined {\n  try {\n    // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n    const { span, updatedOptions } = tracingClient.startSpan(\n      `HTTP ${request.method}`,\n      { tracingOptions: request.tracingOptions },\n      {\n        spanKind: \"client\",\n        spanAttributes: {\n          \"http.method\": request.method,\n          \"http.url\": request.url,\n          requestId: request.requestId,\n        },\n      }\n    );\n\n    // If the span is not recording, don't do any more work.\n    if (!span.isRecording()) {\n      span.end();\n      return undefined;\n    }\n\n    if (userAgent) {\n      span.setAttribute(\"http.user_agent\", userAgent);\n    }\n\n    // set headers\n    const headers = tracingClient.createRequestHeaders(\n      updatedOptions.tracingOptions.tracingContext\n    );\n    for (const [key, value] of Object.entries(headers)) {\n      request.headers.set(key, value);\n    }\n    return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n  } catch (e: any) {\n    logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\n\nfunction tryProcessError(span: TracingSpan, error: unknown): void {\n  try {\n    span.setStatus({\n      status: \"error\",\n      error: isError(error) ? error : undefined,\n    });\n    if (isRestError(error) && error.statusCode) {\n      span.setAttribute(\"http.status_code\", error.statusCode);\n    }\n    span.end();\n  } catch (e: any) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\n\nfunction tryProcessResponse(span: TracingSpan, response: PipelineResponse): void {\n  try {\n    span.setAttribute(\"http.status_code\", response.status);\n    const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n    if (serviceRequestId) {\n      span.setAttribute(\"serviceRequestId\", serviceRequestId);\n    }\n    span.setStatus({\n      status: \"success\",\n    });\n    span.end();\n  } catch (e: any) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  OperationTracingOptions,\n  OptionsWithTracingContext,\n  Resolved,\n  TracingClient,\n  TracingClientOptions,\n  TracingContext,\n  TracingSpan,\n  TracingSpanOptions,\n} from \"./interfaces\";\nimport { getInstrumenter } from \"./instrumenter\";\nimport { knownContextKeys } from \"./tracingContext\";\n\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nexport function createTracingClient(options: TracingClientOptions): TracingClient {\n  const { namespace, packageName, packageVersion } = options;\n\n  function startSpan<Options extends { tracingOptions?: OperationTracingOptions }>(\n    name: string,\n    operationOptions?: Options,\n    spanOptions?: TracingSpanOptions\n  ): {\n    span: TracingSpan;\n    updatedOptions: OptionsWithTracingContext<Options>;\n  } {\n    const startSpanResult = getInstrumenter().startSpan(name, {\n      ...spanOptions,\n      packageName: packageName,\n      packageVersion: packageVersion,\n      tracingContext: operationOptions?.tracingOptions?.tracingContext,\n    });\n    let tracingContext = startSpanResult.tracingContext;\n    const span = startSpanResult.span;\n    if (!tracingContext.getValue(knownContextKeys.namespace)) {\n      tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);\n    }\n    span.setAttribute(\"az.namespace\", tracingContext.getValue(knownContextKeys.namespace));\n    const updatedOptions: OptionsWithTracingContext<Options> = Object.assign({}, operationOptions, {\n      tracingOptions: { ...operationOptions?.tracingOptions, tracingContext },\n    });\n\n    return {\n      span,\n      updatedOptions,\n    };\n  }\n\n  async function withSpan<\n    Options extends { tracingOptions?: OperationTracingOptions },\n    Callback extends (\n      updatedOptions: Options,\n      span: Omit<TracingSpan, \"end\">\n    ) => ReturnType<Callback>\n  >(\n    name: string,\n    operationOptions: Options,\n    callback: Callback,\n    spanOptions?: TracingSpanOptions\n  ): Promise<Resolved<ReturnType<Callback>>> {\n    const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n    try {\n      const result = await withContext(updatedOptions.tracingOptions.tracingContext, () =>\n        Promise.resolve(callback(updatedOptions, span))\n      );\n      span.setStatus({ status: \"success\" });\n      return result as ReturnType<typeof withSpan>;\n    } catch (err: any) {\n      span.setStatus({ status: \"error\", error: err });\n      throw err;\n    } finally {\n      span.end();\n    }\n  }\n\n  function withContext<\n    CallbackArgs extends unknown[],\n    Callback extends (...args: CallbackArgs) => ReturnType<Callback>\n  >(\n    context: TracingContext,\n    callback: Callback,\n    ...callbackArgs: CallbackArgs\n  ): ReturnType<Callback> {\n    return getInstrumenter().withContext(context, callback, ...callbackArgs);\n  }\n\n  /**\n   * Parses a traceparent header value into a span identifier.\n   *\n   * @param traceparentHeader - The traceparent header to parse.\n   * @returns An implementation-specific identifier for the span.\n   */\n  function parseTraceparentHeader(traceparentHeader: string): TracingContext | undefined {\n    return getInstrumenter().parseTraceparentHeader(traceparentHeader);\n  }\n\n  /**\n   * Creates a set of request headers to propagate tracing information to a backend.\n   *\n   * @param tracingContext - The context containing the span to serialize.\n   * @returns The set of headers to add to a request.\n   */\n  function createRequestHeaders(tracingContext?: TracingContext): Record<string, string> {\n    return getInstrumenter().createRequestHeaders(tracingContext);\n  }\n\n  return {\n    startSpan,\n    withSpan,\n    withContext,\n    parseTraceparentHeader,\n    createRequestHeaders,\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LogPolicyOptions, logPolicy } from \"./policies/logPolicy\";\nimport { Pipeline, createEmptyPipeline } from \"./pipeline\";\nimport { PipelineRetryOptions, TlsSettings } from \"./interfaces\";\nimport { RedirectPolicyOptions, redirectPolicy } from \"./policies/redirectPolicy\";\nimport { UserAgentPolicyOptions, userAgentPolicy } from \"./policies/userAgentPolicy\";\n\nimport { ProxySettings } from \".\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy\";\nimport { formDataPolicy } from \"./policies/formDataPolicy\";\nimport { isNode } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy\";\nimport { tlsPolicy } from \"./policies/tlsPolicy\";\nimport { tracingPolicy } from \"./policies/tracingPolicy\";\n\n/**\n * Defines options that are used to configure the HTTP pipeline for\n * an SDK client.\n */\nexport interface PipelineOptions {\n  /**\n   * Options that control how to retry failed requests.\n   */\n  retryOptions?: PipelineRetryOptions;\n\n  /**\n   * Options to configure a proxy for outgoing requests.\n   */\n  proxyOptions?: ProxySettings;\n\n  /** Options for configuring TLS authentication */\n  tlsOptions?: TlsSettings;\n\n  /**\n   * Options for how redirect responses are handled.\n   */\n  redirectOptions?: RedirectPolicyOptions;\n\n  /**\n   * Options for adding user agent details to outgoing requests.\n   */\n  userAgentOptions?: UserAgentPolicyOptions;\n\n  /**\n   * Options for setting common telemetry and tracing info to outgoing requests.\n   */\n  telemetryOptions?: TelemetryOptions;\n}\n\n/**\n * Defines options that are used to configure common telemetry and tracing info\n */\nexport interface TelemetryOptions {\n  /**\n   * The name of the header to pass the request ID to.\n   */\n  clientRequestIdHeaderName?: string;\n}\n\n/**\n * Defines options that are used to configure internal options of\n * the HTTP pipeline for an SDK client.\n */\nexport interface InternalPipelineOptions extends PipelineOptions {\n  /**\n   * Options to configure request/response logging.\n   */\n  loggingOptions?: LogPolicyOptions;\n}\n\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options: InternalPipelineOptions): Pipeline {\n  const pipeline = createEmptyPipeline();\n\n  if (isNode) {\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n\n  pipeline.addPolicy(formDataPolicy());\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  pipeline.addPolicy(setClientRequestIdPolicy(options.telemetryOptions?.clientRequestIdHeaderName));\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n  pipeline.addPolicy(tracingPolicy(options.userAgentOptions), { afterPhase: \"Retry\" });\n  if (isNode) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n  }\n  pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n\n  return pipeline;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n */\n\nexport const decompressResponsePolicyName = \"decompressResponsePolicy\";\n\n/**\n * decompressResponsePolicy is not supported in the browser and attempting\n * to use it will raise an error.\n */\nexport function decompressResponsePolicy(): never {\n  throw new Error(\"decompressResponsePolicy is not supported in browser environment\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders, RawHttpHeaders, RawHttpHeadersInput } from \"./interfaces\";\n\ninterface HeaderEntry {\n  name: string;\n  value: string;\n}\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase();\n}\n\nfunction* headerIterator(map: Map<string, HeaderEntry>): IterableIterator<[string, string]> {\n  for (const entry of map.values()) {\n    yield [entry.name, entry.value];\n  }\n}\n\nclass HttpHeadersImpl implements HttpHeaders {\n  private readonly _headersMap: Map<string, HeaderEntry>;\n\n  constructor(rawHeaders?: RawHttpHeaders | RawHttpHeadersInput) {\n    this._headersMap = new Map<string, HeaderEntry>();\n    if (rawHeaders) {\n      for (const headerName of Object.keys(rawHeaders)) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n  public set(name: string, value: string | number | boolean): void {\n    this._headersMap.set(normalizeName(name), { name, value: String(value) });\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param name - The name of the header. This value is case-insensitive.\n   */\n  public get(name: string): string | undefined {\n    return this._headersMap.get(normalizeName(name))?.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   */\n  public has(name: string): boolean {\n    return this._headersMap.has(normalizeName(name));\n  }\n\n  /**\n   * Remove the header with the provided headerName.\n   * @param name - The name of the header to remove.\n   */\n  public delete(name: string): void {\n    this._headersMap.delete(normalizeName(name));\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJSON(options: { preserveCase?: boolean } = {}): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    if (options.preserveCase) {\n      for (const entry of this._headersMap.values()) {\n        result[entry.name] = entry.value;\n      }\n    } else {\n      for (const [normalizedName, entry] of this._headersMap) {\n        result[normalizedName] = entry.value;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJSON({ preserveCase: true }));\n  }\n\n  /**\n   * Iterate over tuples of header [name, value] pairs.\n   */\n  [Symbol.iterator](): Iterator<[string, string]> {\n    return headerIterator(this._headersMap);\n  }\n}\n\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders?: RawHttpHeadersInput): HttpHeaders {\n  return new HttpHeadersImpl(rawHeaders);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport {\n  HttpClient,\n  HttpHeaders as PipelineHeaders,\n  PipelineRequest,\n  PipelineResponse,\n  TransferProgressEvent,\n} from \"./interfaces\";\nimport { RestError } from \"./restError\";\nimport { createHttpHeaders } from \"./httpHeaders\";\n\n/**\n * Checks if the body is a NodeReadable stream which is not supported in Browsers\n */\nfunction isNodeReadableStream(body: any): body is NodeJS.ReadableStream {\n  return body && typeof body.pipe === \"function\";\n}\n\n/**\n * Checks if the body is a ReadableStream supported by browsers\n */\nfunction isReadableStream(body: unknown): body is ReadableStream {\n  return Boolean(\n    body &&\n      typeof (body as ReadableStream).getReader === \"function\" &&\n      typeof (body as ReadableStream).tee === \"function\"\n  );\n}\n\n/**\n * Checks if the body is a Blob or Blob-like\n */\nfunction isBlob(body: unknown): body is Blob {\n  // File objects count as a type of Blob, so we want to use instanceof explicitly\n  return (typeof Blob === \"function\" || typeof Blob === \"object\") && body instanceof Blob;\n}\n\n/**\n * A HttpClient implementation that uses window.fetch to send HTTP requests.\n * @internal\n */\nclass FetchHttpClient implements HttpClient {\n  /**\n   * Makes a request over an underlying transport layer and returns the response.\n   * @param request - The request to be made.\n   */\n  public async sendRequest(request: PipelineRequest): Promise<PipelineResponse> {\n    const url = new URL(request.url);\n    const isInsecure = url.protocol !== \"https:\";\n\n    if (isInsecure && !request.allowInsecureConnection) {\n      throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n    }\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    try {\n      return await makeRequest(request);\n    } catch (e: any) {\n      throw getError(e, request);\n    }\n  }\n}\n\n/**\n * Sends a request\n */\nasync function makeRequest(request: PipelineRequest): Promise<PipelineResponse> {\n  const { abortController, abortControllerCleanup } = setupAbortSignal(request);\n  try {\n    const headers = buildFetchHeaders(request.headers);\n    const { streaming, body: requestBody } = buildRequestBody(request);\n    const requestInit: RequestInit = {\n      body: requestBody,\n      method: request.method,\n      headers: headers,\n      signal: abortController.signal,\n      // Cloudflare doesn't implement the full Fetch API spec\n      // because of some of it doesn't make sense in the edge.\n      // See https://github.com/cloudflare/workerd/issues/902\n      ...(\"credentials\" in Request.prototype\n        ? { credentials: request.withCredentials ? \"include\" : \"same-origin\" }\n        : {}),\n      ...(\"cache\" in Request.prototype ? { cache: \"no-store\" } : {}),\n    };\n\n    // According to https://fetch.spec.whatwg.org/#fetch-method,\n    // init.duplex must be set when body is a ReadableStream object.\n    // currently \"half\" is the only valid value.\n    if (streaming) {\n      (requestInit as any).duplex = \"half\";\n    }\n    /**\n     * Developers of the future:\n     * Do not set redirect: \"manual\" as part\n     * of request options.\n     * It will not work as you expect.\n     */\n    const response = await fetch(request.url, requestInit);\n    // If we're uploading a blob, we need to fire the progress event manually\n    if (isBlob(request.body) && request.onUploadProgress) {\n      request.onUploadProgress({ loadedBytes: request.body.size });\n    }\n    return buildPipelineResponse(response, request, abortControllerCleanup);\n  } catch (e) {\n    abortControllerCleanup?.();\n    throw e;\n  }\n}\n\n/**\n * Creates a pipeline response from a Fetch response;\n */\nasync function buildPipelineResponse(\n  httpResponse: Response,\n  request: PipelineRequest,\n  abortControllerCleanup?: () => void\n) {\n  const headers = buildPipelineHeaders(httpResponse);\n  const response: PipelineResponse = {\n    request,\n    headers,\n    status: httpResponse.status,\n  };\n\n  const bodyStream = isReadableStream(httpResponse.body)\n    ? buildBodyStream(httpResponse.body, {\n        onProgress: request.onDownloadProgress,\n        onEnd: abortControllerCleanup,\n      })\n    : httpResponse.body;\n\n  if (\n    // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code\n    request.streamResponseStatusCodes?.has(Number.POSITIVE_INFINITY) ||\n    request.streamResponseStatusCodes?.has(response.status)\n  ) {\n    if (request.enableBrowserStreams) {\n      response.browserStreamBody = bodyStream ?? undefined;\n    } else {\n      const responseStream = new Response(bodyStream);\n      response.blobBody = responseStream.blob();\n      abortControllerCleanup?.();\n    }\n  } else {\n    const responseStream = new Response(bodyStream);\n\n    response.bodyAsText = await responseStream.text();\n    abortControllerCleanup?.();\n  }\n\n  return response;\n}\n\nfunction setupAbortSignal(request: PipelineRequest): {\n  abortController: AbortController;\n  abortControllerCleanup: (() => void) | undefined;\n} {\n  const abortController = new AbortController();\n\n  // Cleanup function\n  let abortControllerCleanup: (() => void) | undefined;\n\n  /**\n   * Attach an abort listener to the request\n   */\n  let abortListener: ((event: any) => void) | undefined;\n  if (request.abortSignal) {\n    if (request.abortSignal.aborted) {\n      throw new AbortError(\"The operation was aborted.\");\n    }\n\n    abortListener = (event: Event) => {\n      if (event.type === \"abort\") {\n        abortController.abort();\n      }\n    };\n    request.abortSignal.addEventListener(\"abort\", abortListener);\n    abortControllerCleanup = () => {\n      if (abortListener) {\n        request.abortSignal?.removeEventListener(\"abort\", abortListener);\n      }\n    };\n  }\n\n  // If a timeout was passed, call the abort signal once the time elapses\n  if (request.timeout > 0) {\n    setTimeout(() => {\n      abortController.abort();\n    }, request.timeout);\n  }\n\n  return { abortController, abortControllerCleanup };\n}\n\n/**\n * Gets the specific error\n */\nfunction getError(e: RestError, request: PipelineRequest): RestError {\n  if (e && e?.name === \"AbortError\") {\n    return e;\n  } else {\n    return new RestError(`Error sending request: ${e.message}`, {\n      code: e?.code ?? RestError.REQUEST_SEND_ERROR,\n      request,\n    });\n  }\n}\n\n/**\n * Converts PipelineRequest headers to Fetch headers\n */\nfunction buildFetchHeaders(pipelineHeaders: PipelineHeaders) {\n  const headers = new Headers();\n  for (const [name, value] of pipelineHeaders) {\n    headers.append(name, value);\n  }\n\n  return headers;\n}\n\nfunction buildPipelineHeaders(httpResponse: Response): PipelineHeaders {\n  const responseHeaders = createHttpHeaders();\n  for (const [name, value] of httpResponse.headers) {\n    responseHeaders.set(name, value);\n  }\n\n  return responseHeaders;\n}\n\nfunction buildRequestBody(request: PipelineRequest) {\n  const body = typeof request.body === \"function\" ? request.body() : request.body;\n  if (isNodeReadableStream(body)) {\n    throw new Error(\"Node streams are not supported in browser environment.\");\n  }\n\n  return isReadableStream(body)\n    ? { streaming: true, body: buildBodyStream(body, { onProgress: request.onUploadProgress }) }\n    : { streaming: false, body };\n}\n\n/**\n * Reads the request/response original stream and stream it through a new\n * ReadableStream, this is done to be able to report progress in a way that\n * all modern browsers support. TransformStreams would be an alternative,\n * however they are not yet supported by all browsers i.e Firefox\n */\nfunction buildBodyStream(\n  readableStream: ReadableStream<Uint8Array>,\n  options: { onProgress?: (progress: TransferProgressEvent) => void; onEnd?: () => void } = {}\n): ReadableStream<Uint8Array> {\n  let loadedBytes = 0;\n  const { onProgress, onEnd } = options;\n\n  // If the current browser supports pipeThrough we use a TransformStream\n  // to report progress\n  if (isTransformStreamSupported(readableStream)) {\n    return readableStream.pipeThrough(\n      new TransformStream({\n        transform(chunk, controller) {\n          if (chunk === null) {\n            controller.terminate();\n            return;\n          }\n\n          controller.enqueue(chunk);\n          loadedBytes += chunk.length;\n          if (onProgress) {\n            onProgress({ loadedBytes });\n          }\n        },\n        flush() {\n          onEnd?.();\n        },\n      })\n    );\n  } else {\n    // If we can't use transform streams, wrap the original stream in a new readable stream\n    // and use pull to enqueue each chunk and report progress.\n    const reader = readableStream.getReader();\n    return new ReadableStream({\n      async pull(controller) {\n        const { done, value } = await reader.read();\n        // When no more data needs to be consumed, break the reading\n        if (done || !value) {\n          onEnd?.();\n          // Close the stream\n          controller.close();\n          reader.releaseLock();\n          return;\n        }\n\n        loadedBytes += value?.length ?? 0;\n\n        // Enqueue the next data chunk into our target stream\n        controller.enqueue(value);\n\n        if (onProgress) {\n          onProgress({ loadedBytes });\n        }\n      },\n      cancel(reason?: string) {\n        onEnd?.();\n        return reader.cancel(reason);\n      },\n    });\n  }\n}\n\n/**\n * Create a new HttpClient instance for the browser environment.\n * @internal\n */\nexport function createFetchHttpClient(): HttpClient {\n  return new FetchHttpClient();\n}\n\nfunction isTransformStreamSupported(readableStream: ReadableStream): boolean {\n  return readableStream.pipeThrough !== undefined && self.TransformStream !== undefined;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpClient } from \"./interfaces\";\nimport { createFetchHttpClient } from \"./fetchHttpClient\";\n\n/**\n * Create the correct HttpClient for the current environment.\n */\nexport function createDefaultHttpClient(): HttpClient {\n  return createFetchHttpClient();\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelinePolicy } from \"@azure/core-rest-pipeline\";\nimport { ClientOptions } from \"./common\";\n\nexport const apiVersionPolicyName = \"ApiVersionPolicy\";\n\n/**\n * Creates a policy that sets the apiVersion as a query parameter on every request\n * @param options - Client options\n * @returns Pipeline policy that sets the apiVersion as a query parameter on every request\n */\nexport function apiVersionPolicy(options: ClientOptions): PipelinePolicy {\n  return {\n    name: apiVersionPolicyName,\n    sendRequest: (req, next) => {\n      // Use the apiVesion defined in request url directly\n      // Append one if there is no apiVesion and we have one at client options\n      const url = new URL(req.url);\n      if (!url.searchParams.get(\"api-version\") && options.apiVersion) {\n        req.url = `${req.url}${\n          Array.from(url.searchParams.keys()).length > 0 ? \"&\" : \"?\"\n        }api-version=${options.apiVersion}`;\n      }\n\n      return next(req);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexport const keyCredentialAuthenticationPolicyName = \"keyCredentialAuthenticationPolicy\";\n\nexport function keyCredentialAuthenticationPolicy(\n  credential: KeyCredential,\n  apiKeyHeaderName: string\n): PipelinePolicy {\n  return {\n    name: keyCredentialAuthenticationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      request.headers.set(apiKeyHeaderName, credential.key);\n      return next(request);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HttpClient,\n  Pipeline,\n  bearerTokenAuthenticationPolicy,\n  createDefaultHttpClient,\n  createPipelineFromOptions,\n} from \"@azure/core-rest-pipeline\";\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\n\nimport { ClientOptions } from \"./common\";\nimport { apiVersionPolicy } from \"./apiVersionPolicy\";\nimport { keyCredentialAuthenticationPolicy } from \"./keyCredentialAuthenticationPolicy\";\n\nlet cachedHttpClient: HttpClient | undefined;\n\n/**\n * Optional parameters for adding a credential policy to the pipeline.\n */\nexport interface AddCredentialPipelinePolicyOptions {\n  /**\n   * Options related to the client.\n   */\n  clientOptions?: ClientOptions;\n  /**\n   * The credential to use.\n   */\n  credential?: TokenCredential | KeyCredential;\n}\n\n/**\n * Adds a credential policy to the pipeline if a credential is provided. If none is provided, no policy is added.\n */\nexport function addCredentialPipelinePolicy(\n  pipeline: Pipeline,\n  baseUrl: string,\n  options: AddCredentialPipelinePolicyOptions = {}\n): void {\n  const { credential, clientOptions } = options;\n  if (!credential) {\n    return;\n  }\n\n  if (isTokenCredential(credential)) {\n    const tokenPolicy = bearerTokenAuthenticationPolicy({\n      credential,\n      scopes: clientOptions?.credentials?.scopes ?? `${baseUrl}/.default`,\n    });\n    pipeline.addPolicy(tokenPolicy);\n  } else if (isKeyCredential(credential)) {\n    if (!clientOptions?.credentials?.apiKeyHeaderName) {\n      throw new Error(`Missing API Key Header Name`);\n    }\n    const keyPolicy = keyCredentialAuthenticationPolicy(\n      credential,\n      clientOptions?.credentials?.apiKeyHeaderName\n    );\n    pipeline.addPolicy(keyPolicy);\n  }\n}\n\n/**\n * Creates a default rest pipeline to re-use accross Rest Level Clients\n */\nexport function createDefaultPipeline(\n  baseUrl: string,\n  credential?: TokenCredential | KeyCredential,\n  options: ClientOptions = {}\n): Pipeline {\n  const pipeline = createPipelineFromOptions(options);\n\n  pipeline.addPolicy(apiVersionPolicy(options));\n\n  addCredentialPipelinePolicy(pipeline, baseUrl, { credential, clientOptions: options });\n  return pipeline;\n}\n\nfunction isKeyCredential(credential: any): credential is KeyCredential {\n  return (credential as KeyCredential).key !== undefined;\n}\n\nexport function getCachedDefaultHttpsClient(): HttpClient {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n\n  return cachedHttpClient;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"react-native\" section in package.json.\n */\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function generateUUID(): string {\n  let uuid = \"\";\n  for (let i = 0; i < 32; i++) {\n    // Generate a random number between 0 and 15\n    const randomNumber = Math.floor(Math.random() * 16);\n    // Set the UUID version to 4 in the 13th position\n    if (i === 12) {\n      uuid += \"4\";\n    } else if (i === 16) {\n      // Set the UUID variant to \"10\" in the 17th position\n      uuid += (randomNumber & 0x3) | 0x8;\n    } else {\n      // Add a random hexadecimal digit to the UUID string\n      uuid += randomNumber.toString(16);\n    }\n    // Add hyphens to the UUID string at the appropriate positions\n    if (i === 7 || i === 11 || i === 15 || i === 19) {\n      uuid += \"-\";\n    }\n  }\n  return uuid;\n}\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID(): string {\n  return generateUUID();\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { generateUUID } from \"./uuidUtils.native\";\n\ninterface Crypto {\n  randomUUID(): string;\n}\n\ndeclare const globalThis: {\n  crypto: Crypto;\n};\n\n// NOTE: This could be undefined if not used in a secure context\nconst uuidFunction =\n  typeof globalThis?.crypto?.randomUUID === \"function\"\n    ? globalThis.crypto.randomUUID.bind(globalThis.crypto)\n    : generateUUID;\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID(): string {\n  return uuidFunction();\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  FormDataMap,\n  HttpHeaders,\n  HttpMethods,\n  PipelineRequest,\n  ProxySettings,\n  RequestBodyType,\n  TransferProgressEvent,\n} from \"./interfaces\";\nimport { createHttpHeaders } from \"./httpHeaders\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * Settings to initialize a request.\n * Almost equivalent to Partial<PipelineRequest>, but url is mandatory.\n */\nexport interface PipelineRequestOptions {\n  /**\n   * The URL to make the request to.\n   */\n  url: string;\n\n  /**\n   * The HTTP method to use when making the request.\n   */\n  method?: HttpMethods;\n\n  /**\n   * The HTTP headers to use when making the request.\n   */\n  headers?: HttpHeaders;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   * Defaults to 0, which disables the timeout.\n   */\n  timeout?: number;\n\n  /**\n   * If credentials (cookies) should be sent along during an XHR.\n   * Defaults to false.\n   */\n  withCredentials?: boolean;\n\n  /**\n   * A unique identifier for the request. Used for logging and tracing.\n   */\n  requestId?: string;\n\n  /**\n   * The HTTP body content (if any)\n   */\n  body?: RequestBodyType;\n\n  /**\n   * To simulate a browser form post\n   */\n  formData?: FormDataMap;\n\n  /**\n   * A list of response status codes whose corresponding PipelineResponse body should be treated as a stream.\n   */\n  streamResponseStatusCodes?: Set<number>;\n\n  /**\n   * BROWSER ONLY\n   *\n   * A browser only option to enable use of the Streams API. If this option is set and streaming is used\n   * (see `streamResponseStatusCodes`), the response will have a property `browserStream` instead of\n   * `blobBody` which will be undefined.\n   *\n   * Default value is false\n   */\n  enableBrowserStreams?: boolean;\n\n  /**\n   * Proxy configuration.\n   */\n  proxySettings?: ProxySettings;\n\n  /**\n   * If the connection should not be reused.\n   */\n  disableKeepAlive?: boolean;\n\n  /**\n   * Used to abort the request later.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Set to true if the request is sent over HTTP instead of HTTPS */\n  allowInsecureConnection?: boolean;\n}\n\nclass PipelineRequestImpl implements PipelineRequest {\n  public url: string;\n  public method: HttpMethods;\n  public headers: HttpHeaders;\n  public timeout: number;\n  public withCredentials: boolean;\n  public body?: RequestBodyType;\n  public formData?: FormDataMap;\n  public streamResponseStatusCodes?: Set<number>;\n  public enableBrowserStreams: boolean;\n\n  public proxySettings?: ProxySettings;\n  public disableKeepAlive: boolean;\n  public abortSignal?: AbortSignalLike;\n  public requestId: string;\n  public tracingOptions?: OperationTracingOptions;\n  public allowInsecureConnection?: boolean;\n  public onUploadProgress?: (progress: TransferProgressEvent) => void;\n  public onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  constructor(options: PipelineRequestOptions) {\n    this.url = options.url;\n    this.body = options.body;\n    this.headers = options.headers ?? createHttpHeaders();\n    this.method = options.method ?? \"GET\";\n    this.timeout = options.timeout ?? 0;\n    this.formData = options.formData;\n    this.disableKeepAlive = options.disableKeepAlive ?? false;\n    this.proxySettings = options.proxySettings;\n    this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n    this.withCredentials = options.withCredentials ?? false;\n    this.abortSignal = options.abortSignal;\n    this.tracingOptions = options.tracingOptions;\n    this.onUploadProgress = options.onUploadProgress;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.requestId = options.requestId || randomUUID();\n    this.allowInsecureConnection = options.allowInsecureConnection ?? false;\n    this.enableBrowserStreams = options.enableBrowserStreams ?? false;\n  }\n}\n\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nexport function createPipelineRequest(options: PipelineRequestOptions): PipelineRequest {\n  return new PipelineRequestImpl(options);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Converts binary content to its string representation\n */\nexport function binaryArrayToString(content: Uint8Array): string {\n  let decodedBody = \"\";\n  for (const element of content) {\n    decodedBody += String.fromCharCode(element);\n  }\n\n  return decodedBody;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  FormDataMap,\n  HttpClient,\n  HttpMethods,\n  Pipeline,\n  PipelineRequest,\n  PipelineResponse,\n  RawHttpHeaders,\n  RequestBodyType,\n  RestError,\n  createHttpHeaders,\n  createPipelineRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { getCachedDefaultHttpsClient } from \"./clientHelpers\";\nimport { isReadableStream } from \"./helpers/isReadableStream\";\nimport { HttpResponse, RequestParameters } from \"./common\";\nimport { binaryArrayToString } from \"./helpers/getBinaryBody\";\n\n/**\n * Helper function to send request used by the client\n * @param method - method to use to send the request\n * @param url - url to send the request to\n * @param pipeline - pipeline with the policies to run when sending the request\n * @param options - request options\n * @param customHttpClient - a custom HttpClient to use when making the request\n * @returns returns and HttpResponse\n */\nexport async function sendRequest(\n  method: HttpMethods,\n  url: string,\n  pipeline: Pipeline,\n  options: RequestParameters = {},\n  customHttpClient?: HttpClient\n): Promise<HttpResponse> {\n  const httpClient = customHttpClient ?? getCachedDefaultHttpsClient();\n  const request = buildPipelineRequest(method, url, options);\n\n  const response = await pipeline.sendRequest(httpClient, request);\n\n  const rawHeaders: RawHttpHeaders = response.headers.toJSON();\n\n  const parsedBody: RequestBodyType | undefined = getResponseBody(response);\n\n  if (options?.onResponse) {\n    options.onResponse({ ...response, request, rawHeaders, parsedBody });\n  }\n\n  return {\n    request,\n    headers: rawHeaders,\n    status: `${response.status}`,\n    body: parsedBody,\n  };\n}\n\n/**\n * Helper function to send request used by the client\n * @param method - method to use to send the request\n * @param url - url to send the request to\n * @param pipeline - pipeline with the policies to run when sending the request\n * @param options - request options\n * @param customHttpClient - a custom HttpClient to use when making the request\n * @returns returns and HttpResponse\n */\nexport async function sendRequestAsStream<\n  TResponse extends HttpResponse & {\n    body: NodeJS.ReadableStream | ReadableStream<Uint8Array> | undefined;\n  }\n>(\n  method: HttpMethods,\n  url: string,\n  pipeline: Pipeline,\n  options: RequestParameters = {},\n  customHttpClient?: HttpClient\n): Promise<TResponse> {\n  const httpClient = customHttpClient ?? getCachedDefaultHttpsClient();\n  const request = buildPipelineRequest(method, url, { ...options, responseAsStream: true });\n  const response = await pipeline.sendRequest(httpClient, request);\n  const rawHeaders: RawHttpHeaders = response.headers.toJSON();\n\n  const parsedBody = response.browserStreamBody ?? response.readableStreamBody;\n\n  return {\n    request,\n    headers: rawHeaders,\n    status: `${response.status}`,\n    body: parsedBody,\n  } as TResponse;\n}\n\n/**\n * Function to determine the content-type of a body\n * this is used if an explicit content-type is not provided\n * @param body - body in the request\n * @returns returns the content-type\n */\nfunction getContentType(body: any): string {\n  if (ArrayBuffer.isView(body)) {\n    return \"application/octet-stream\";\n  }\n\n  // By default return json\n  return \"application/json; charset=UTF-8\";\n}\n\nexport interface InternalRequestParameters extends RequestParameters {\n  responseAsStream?: boolean;\n}\n\nfunction buildPipelineRequest(\n  method: HttpMethods,\n  url: string,\n  options: InternalRequestParameters = {}\n): PipelineRequest {\n  const { body, formData } = getRequestBody(options.body, options.contentType);\n  const hasContent = body !== undefined || formData !== undefined;\n\n  const headers = createHttpHeaders({\n    ...(options.headers ? options.headers : {}),\n    accept: options.accept ?? \"application/json\",\n    ...(hasContent && {\n      \"content-type\": options.contentType ?? getContentType(options.body),\n    }),\n  });\n\n  return createPipelineRequest({\n    url,\n    method,\n    body,\n    formData,\n    headers,\n    allowInsecureConnection: options.allowInsecureConnection,\n    tracingOptions: options.tracingOptions,\n    abortSignal: options.abortSignal,\n    onUploadProgress: options.onUploadProgress,\n    onDownloadProgress: options.onDownloadProgress,\n    timeout: options.timeout,\n    enableBrowserStreams: true,\n    streamResponseStatusCodes: options.responseAsStream\n      ? new Set([Number.POSITIVE_INFINITY])\n      : undefined,\n  });\n}\n\ninterface RequestBody {\n  body?: RequestBodyType;\n  formData?: FormDataMap;\n}\n\n/**\n * Prepares the body before sending the request\n */\nfunction getRequestBody(body?: unknown, contentType: string = \"\"): RequestBody {\n  if (body === undefined) {\n    return { body: undefined };\n  }\n\n  if (isReadableStream(body)) {\n    return { body };\n  }\n\n  if (!contentType && typeof body === \"string\") {\n    return { body };\n  }\n\n  const firstType = contentType.split(\";\")[0];\n\n  if (firstType === \"application/json\") {\n    return { body: JSON.stringify(body) };\n  }\n\n  if (ArrayBuffer.isView(body)) {\n    if (body instanceof Uint8Array) {\n      return { body: binaryArrayToString(body) };\n    } else {\n      return { body: JSON.stringify(body) };\n    }\n  }\n\n  switch (firstType) {\n    case \"multipart/form-data\":\n      return isFormData(body)\n        ? { formData: processFormData(body) }\n        : { body: JSON.stringify(body) };\n    case \"text/plain\":\n      return { body: String(body) };\n    default:\n      if (typeof body === \"string\") {\n        return { body };\n      }\n      return { body: JSON.stringify(body) };\n  }\n}\n\nfunction isFormData(body: unknown): body is FormDataMap {\n  return body instanceof Object && Object.keys(body).length > 0;\n}\n\n/**\n * Checks if binary data is in Uint8Array format, if so decode it to a binary string\n * to send over the wire\n */\nfunction processFormData(formData?: FormDataMap) {\n  if (!formData) {\n    return formData;\n  }\n\n  const processedFormData: FormDataMap = {};\n\n  for (const element in formData) {\n    const item = formData[element];\n    if (item instanceof Uint8Array) {\n      processedFormData[element] = binaryArrayToString(item);\n    } else {\n      processedFormData[element] = item;\n    }\n  }\n\n  return processedFormData;\n}\n\n/**\n * Prepares the response body\n */\nfunction getResponseBody(response: PipelineResponse): RequestBodyType | undefined {\n  // Set the default response type\n  const contentType = response.headers.get(\"content-type\") ?? \"\";\n  const firstType = contentType.split(\";\")[0];\n  const bodyToParse: string = response.bodyAsText ?? \"\";\n\n  if (firstType === \"text/plain\") {\n    return String(bodyToParse);\n  }\n  // Default to \"application/json\" and fallback to string;\n  try {\n    return bodyToParse ? JSON.parse(bodyToParse) : undefined;\n  } catch (error: any) {\n    // If we were supposed to get a JSON object and failed to\n    // parse, throw a parse error\n    if (firstType === \"application/json\") {\n      throw createParseError(response, error);\n    }\n\n    // We are not sure how to handle the response so we return it as\n    // plain text.\n    return String(bodyToParse);\n  }\n}\n\nfunction createParseError(response: PipelineResponse, err: any): RestError {\n  const msg = `Error \"${err}\" occurred while parsing the response body - ${response.bodyAsText}.`;\n  const errCode = err.code ?? RestError.PARSE_ERROR;\n  return new RestError(msg, {\n    code: errCode,\n    statusCode: response.status,\n    request: response.request,\n    response: response,\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Checks if the body is a ReadableStream supported by browsers\n * @internal\n */\nexport function isReadableStream(body: unknown): body is ReadableStream {\n  return Boolean(\n    body &&\n      typeof (body as ReadableStream).getReader === \"function\" &&\n      typeof (body as ReadableStream).tee === \"function\"\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestParameters } from \"./common\";\n\n/**\n * Builds the request url, filling in query and path parameters\n * @param baseUrl - base url which can be a template url\n * @param routePath - path to append to the baseUrl\n * @param pathParameters - values of the path parameters\n * @param options - request parameters including query parameters\n * @returns a full url with path and query parameters\n */\nexport function buildRequestUrl(\n  baseUrl: string,\n  routePath: string,\n  pathParameters: string[],\n  options: RequestParameters = {}\n): string {\n  if (routePath.startsWith(\"https://\") || routePath.startsWith(\"http://\")) {\n    return routePath;\n  }\n  baseUrl = buildBaseUrl(baseUrl, options);\n  routePath = buildRoutePath(routePath, pathParameters, options);\n  const requestUrl = appendQueryParams(`${baseUrl}/${routePath}`, options);\n  const url = new URL(requestUrl);\n\n  return (\n    url\n      .toString()\n      // Remove double forward slashes\n      .replace(/([^:]\\/)\\/+/g, \"$1\")\n  );\n}\n\nfunction appendQueryParams(url: string, options: RequestParameters = {}) {\n  if (!options.queryParameters) {\n    return url;\n  }\n  let parsedUrl = new URL(url);\n  const queryParams = options.queryParameters;\n  for (const key of Object.keys(queryParams)) {\n    const param = queryParams[key] as any;\n    if (param === undefined || param === null) {\n      continue;\n    }\n    if (!param.toString || typeof param.toString !== \"function\") {\n      throw new Error(`Query parameters must be able to be represented as string, ${key} can't`);\n    }\n    const value = param.toISOString !== undefined ? param.toISOString() : param.toString();\n    parsedUrl.searchParams.append(key, value);\n  }\n\n  if (options.skipUrlEncoding) {\n    parsedUrl = skipQueryParameterEncoding(parsedUrl);\n  }\n  return parsedUrl.toString();\n}\n\nfunction skipQueryParameterEncoding(url: URL) {\n  if (!url) {\n    return url;\n  }\n  const searchPieces: string[] = [];\n  for (const [name, value] of url.searchParams) {\n    // QUIRK: searchParams.get retrieves the values decoded\n    searchPieces.push(`${name}=${value}`);\n  }\n  // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n  url.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n  return url;\n}\n\nexport function buildBaseUrl(baseUrl: string, options: RequestParameters): string {\n  if (!options.pathParameters) {\n    return baseUrl;\n  }\n  const pathParams = options.pathParameters;\n  for (const [key, param] of Object.entries(pathParams)) {\n    if (param === undefined || param === null) {\n      throw new Error(`Path parameters ${key} must not be undefined or null`);\n    }\n    if (!param.toString || typeof param.toString !== \"function\") {\n      throw new Error(`Path parameters must be able to be represented as string, ${key} can't`);\n    }\n    let value = param.toISOString !== undefined ? param.toISOString() : String(param);\n    if (!options.skipUrlEncoding) {\n      value = encodeURIComponent(param);\n    }\n    baseUrl = replaceAll(baseUrl, `{${key}}`, value) ?? \"\";\n  }\n  return baseUrl;\n}\n\nfunction buildRoutePath(\n  routePath: string,\n  pathParameters: string[],\n  options: RequestParameters = {}\n) {\n  for (const pathParam of pathParameters) {\n    let value = pathParam;\n    if (!options.skipUrlEncoding) {\n      value = encodeURIComponent(pathParam);\n    }\n\n    routePath = routePath.replace(/\\{\\w+\\}/, value);\n  }\n  return routePath;\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param value - The value to search and replace in.\n * @param searchValue - The value to search for in the value argument.\n * @param replaceValue - The value to replace searchValue with in the value argument.\n * @returns The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(\n  value: string | undefined,\n  searchValue: string,\n  replaceValue: string\n): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { HttpClient, HttpMethods, Pipeline, PipelineOptions } from \"@azure/core-rest-pipeline\";\nimport { createDefaultPipeline } from \"./clientHelpers\";\nimport {\n  Client,\n  ClientOptions,\n  HttpBrowserStreamResponse,\n  HttpNodeStreamResponse,\n  RequestParameters,\n  StreamableMethod,\n} from \"./common\";\nimport { sendRequest, sendRequestAsStream } from \"./sendRequest\";\nimport { buildRequestUrl } from \"./urlHelpers\";\n\n/**\n * Creates a client with a default pipeline\n * @param baseUrl - Base endpoint for the client\n * @param options - Client options\n */\nexport function getClient(baseUrl: string, options?: ClientOptions): Client;\n/**\n * Creates a client with a default pipeline\n * @param baseUrl - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(\n  baseUrl: string,\n  credentials?: TokenCredential | KeyCredential,\n  options?: ClientOptions\n): Client;\nexport function getClient(\n  baseUrl: string,\n  credentialsOrPipelineOptions?: (TokenCredential | KeyCredential) | ClientOptions,\n  clientOptions: ClientOptions = {}\n): Client {\n  let credentials: TokenCredential | KeyCredential | undefined;\n  if (credentialsOrPipelineOptions) {\n    if (isCredential(credentialsOrPipelineOptions)) {\n      credentials = credentialsOrPipelineOptions;\n    } else {\n      clientOptions = credentialsOrPipelineOptions ?? {};\n    }\n  }\n\n  const pipeline = createDefaultPipeline(baseUrl, credentials, clientOptions);\n  if (clientOptions.additionalPolicies?.length) {\n    for (const { policy, position } of clientOptions.additionalPolicies) {\n      // Sign happens after Retry and is commonly needed to occur\n      // before policies that intercept post-retry.\n      const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n      pipeline.addPolicy(policy, {\n        afterPhase,\n      });\n    }\n  }\n\n  const { allowInsecureConnection, httpClient } = clientOptions;\n  const client = (path: string, ...args: Array<any>) => {\n    const getUrl = (requestOptions: RequestParameters) =>\n      buildRequestUrl(baseUrl, path, args, { allowInsecureConnection, ...requestOptions });\n\n    return {\n      get: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"GET\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient\n        );\n      },\n      post: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"POST\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient\n        );\n      },\n      put: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"PUT\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient\n        );\n      },\n      patch: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"PATCH\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient\n        );\n      },\n      delete: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"DELETE\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient\n        );\n      },\n      head: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"HEAD\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient\n        );\n      },\n      options: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"OPTIONS\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient\n        );\n      },\n      trace: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"TRACE\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient\n        );\n      },\n    };\n  };\n\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline,\n  };\n}\n\nfunction buildOperation(\n  method: HttpMethods,\n  url: string,\n  pipeline: Pipeline,\n  options: RequestParameters,\n  allowInsecureConnection?: boolean,\n  httpClient?: HttpClient\n): StreamableMethod {\n  allowInsecureConnection = options.allowInsecureConnection ?? allowInsecureConnection;\n  return {\n    then: function (onFulfilled, onrejected) {\n      return sendRequest(\n        method,\n        url,\n        pipeline,\n        { ...options, allowInsecureConnection },\n        httpClient\n      ).then(onFulfilled, onrejected);\n    },\n    async asBrowserStream() {\n      return sendRequestAsStream<HttpBrowserStreamResponse>(\n        method,\n        url,\n        pipeline,\n        { ...options, allowInsecureConnection },\n        httpClient\n      );\n    },\n    async asNodeStream() {\n      return sendRequestAsStream<HttpNodeStreamResponse>(\n        method,\n        url,\n        pipeline,\n        { ...options, allowInsecureConnection },\n        httpClient\n      );\n    },\n  };\n}\n\nfunction isCredential(\n  param: (TokenCredential | KeyCredential) | PipelineOptions\n): param is TokenCredential | KeyCredential {\n  if ((param as KeyCredential).key !== undefined || isTokenCredential(param)) {\n    return true;\n  }\n\n  return false;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"openai\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport OpenAIClient from \"./openAIClient.js\";\n\nexport * from \"./openAIClient.js\";\nexport * from \"./parameters.js\";\nexport * from \"./responses.js\";\nexport * from \"./clientDefinitions.js\";\nexport * from \"./isUnexpected.js\";\nexport * from \"./models.js\";\nexport * from \"./outputModels.js\";\nexport * from \"./pollingHelper.js\";\n\nexport default OpenAIClient;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport { logger } from \"../logger.js\";\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { OpenAIContext } from \"./clientDefinitions.js\";\n\n/**\n * Initialize a new instance of `OpenAIContext`\n * @param endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example:\n * https://westus.api.cognitive.microsoft.com).\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: string,\n  credentials: TokenCredential | KeyCredential,\n  options: ClientOptions = {}\n): OpenAIContext {\n  const baseUrl = options.baseUrl ?? `${endpoint}/openai`;\n  options.apiVersion = options.apiVersion ?? \"2023-09-01-preview\";\n  options = {\n    ...options,\n    credentials: {\n      scopes: options.credentials?.scopes ?? [\"https://cognitiveservices.azure.com/.default\"],\n      apiKeyHeaderName: options.credentials?.apiKeyHeaderName ?? \"api-key\",\n    },\n  };\n\n  const userAgentInfo = `azsdk-js-openai-rest/1.0.0-beta.7`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n  };\n\n  const client = getClient(baseUrl, credentials, options) as OpenAIContext;\n\n  return client;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions, RequestParameters } from \"./common\";\n\n/**\n * Helper function to convert OperationOptions to RequestParameters\n * @param options - the options that are used by Modular layer to send the request\n * @returns the result of the conversion in RequestParameters of RLC layer\n */\nexport function operationOptionsToRequestParameters(options: OperationOptions): RequestParameters {\n  return {\n    allowInsecureConnection: options.requestOptions?.allowInsecureConnection,\n    timeout: options.requestOptions?.timeout,\n    skipUrlEncoding: options.requestOptions?.skipUrlEncoding,\n    abortSignal: options.abortSignal,\n    onUploadProgress: options.requestOptions?.onUploadProgress,\n    onDownloadProgress: options.requestOptions?.onDownloadProgress,\n    tracingOptions: options.tracingOptions,\n    headers: { ...options.requestOptions?.headers },\n    onResponse: options.onResponse,\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport {\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetChatCompletionsWithAzureExtensions200Response,\n  GetChatCompletionsWithAzureExtensionsDefaultResponse,\n  GetAzureBatchImageGenerationOperationStatus200Response,\n  GetAzureBatchImageGenerationOperationStatusLogicalResponse,\n  GetAzureBatchImageGenerationOperationStatusDefaultResponse,\n  BeginAzureBatchImageGeneration202Response,\n  BeginAzureBatchImageGenerationLogicalResponse,\n  BeginAzureBatchImageGenerationDefaultResponse,\n} from \"./responses.js\";\n\nconst responseMap: Record<string, string[]> = {\n  \"POST /deployments/{deploymentId}/embeddings\": [\"200\"],\n  \"POST /deployments/{deploymentId}/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/chat/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/extensions/chat/completions\": [\"200\"],\n  \"GET /operations/images/{operationId}\": [\"200\"],\n  \"POST /images/generations:submit\": [\"202\"],\n  \"GET /images/generations:submit\": [\"200\", \"202\"],\n};\n\nexport function isUnexpected(\n  response: GetEmbeddings200Response | GetEmbeddingsDefaultResponse\n): response is GetEmbeddingsDefaultResponse;\nexport function isUnexpected(\n  response: GetCompletions200Response | GetCompletionsDefaultResponse\n): response is GetCompletionsDefaultResponse;\nexport function isUnexpected(\n  response: GetChatCompletions200Response | GetChatCompletionsDefaultResponse\n): response is GetChatCompletionsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetChatCompletionsWithAzureExtensions200Response\n    | GetChatCompletionsWithAzureExtensionsDefaultResponse\n): response is GetChatCompletionsWithAzureExtensionsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetAzureBatchImageGenerationOperationStatus200Response\n    | GetAzureBatchImageGenerationOperationStatusLogicalResponse\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n): response is GetAzureBatchImageGenerationOperationStatusDefaultResponse;\nexport function isUnexpected(\n  response:\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationLogicalResponse\n    | BeginAzureBatchImageGenerationDefaultResponse\n): response is BeginAzureBatchImageGenerationDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetEmbeddings200Response\n    | GetEmbeddingsDefaultResponse\n    | GetCompletions200Response\n    | GetCompletionsDefaultResponse\n    | GetChatCompletions200Response\n    | GetChatCompletionsDefaultResponse\n    | GetChatCompletionsWithAzureExtensions200Response\n    | GetChatCompletionsWithAzureExtensionsDefaultResponse\n    | GetAzureBatchImageGenerationOperationStatus200Response\n    | GetAzureBatchImageGenerationOperationStatusLogicalResponse\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationLogicalResponse\n    | BeginAzureBatchImageGenerationDefaultResponse\n): response is\n  | GetEmbeddingsDefaultResponse\n  | GetCompletionsDefaultResponse\n  | GetChatCompletionsDefaultResponse\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n  | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n  | BeginAzureBatchImageGenerationDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = getParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction getParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue: string[] = [];\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {\n      if (candidateParts[i]?.startsWith(\"{\") && candidateParts[i]?.indexOf(\"}\") !== -1) {\n        const start = candidateParts[i]!.indexOf(\"}\") + 1,\n          end = candidateParts[i]?.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(`${candidateParts[i]?.slice(start, end)}`).test(\n          pathParts[j] || \"\"\n        );\n\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value;\n    }\n  }\n\n  return matchedValue;\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The `@azure/logger` configuration for this package.\n * @internal\n */\nexport const logger = createClientLogger(\"core-lro\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HttpOperationMode,\n  LongRunningOperation,\n  LroResourceLocationConfig,\n  LroResponse,\n  RawResponse,\n  ResponseBody,\n} from \"./models\";\nimport {\n  LroError,\n  OperationConfig,\n  OperationStatus,\n  RestorableOperationState,\n  StateProxy,\n} from \"../poller/models\";\nimport { initOperation, pollOperation } from \"../poller/operation\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { logger } from \"../logger\";\n\nfunction getOperationLocationPollingUrl(inputs: {\n  operationLocation?: string;\n  azureAsyncOperation?: string;\n}): string | undefined {\n  const { azureAsyncOperation, operationLocation } = inputs;\n  return operationLocation ?? azureAsyncOperation;\n}\n\nfunction getLocationHeader(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"location\"];\n}\n\nfunction getOperationLocationHeader(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"operation-location\"];\n}\n\nfunction getAzureAsyncOperationHeader(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"azure-asyncoperation\"];\n}\n\nfunction findResourceLocation(inputs: {\n  requestMethod?: string;\n  location?: string;\n  requestPath?: string;\n  resourceLocationConfig?: LroResourceLocationConfig;\n}): string | undefined {\n  const { location, requestMethod, requestPath, resourceLocationConfig } = inputs;\n  switch (requestMethod) {\n    case \"PUT\": {\n      return requestPath;\n    }\n    case \"DELETE\": {\n      return undefined;\n    }\n    case \"PATCH\": {\n      return getDefault() ?? requestPath;\n    }\n    default: {\n      return getDefault();\n    }\n  }\n\n  function getDefault() {\n    switch (resourceLocationConfig) {\n      case \"azure-async-operation\": {\n        return undefined;\n      }\n      case \"original-uri\": {\n        return requestPath;\n      }\n      case \"location\":\n      default: {\n        return location;\n      }\n    }\n  }\n}\n\nexport function inferLroMode(inputs: {\n  rawResponse: RawResponse;\n  requestPath?: string;\n  requestMethod?: string;\n  resourceLocationConfig?: LroResourceLocationConfig;\n}): (OperationConfig & { mode: HttpOperationMode }) | undefined {\n  const { rawResponse, requestMethod, requestPath, resourceLocationConfig } = inputs;\n  const operationLocation = getOperationLocationHeader(rawResponse);\n  const azureAsyncOperation = getAzureAsyncOperationHeader(rawResponse);\n  const pollingUrl = getOperationLocationPollingUrl({ operationLocation, azureAsyncOperation });\n  const location = getLocationHeader(rawResponse);\n  const normalizedRequestMethod = requestMethod?.toLocaleUpperCase();\n  if (pollingUrl !== undefined) {\n    return {\n      mode: \"OperationLocation\",\n      operationLocation: pollingUrl,\n      resourceLocation: findResourceLocation({\n        requestMethod: normalizedRequestMethod,\n        location,\n        requestPath,\n        resourceLocationConfig,\n      }),\n    };\n  } else if (location !== undefined) {\n    return {\n      mode: \"ResourceLocation\",\n      operationLocation: location,\n    };\n  } else if (normalizedRequestMethod === \"PUT\" && requestPath) {\n    return {\n      mode: \"Body\",\n      operationLocation: requestPath,\n    };\n  } else {\n    return undefined;\n  }\n}\n\nfunction transformStatus(inputs: { status: unknown; statusCode: number }): OperationStatus {\n  const { status, statusCode } = inputs;\n  if (typeof status !== \"string\" && status !== undefined) {\n    throw new Error(\n      `Polling was unsuccessful. Expected status to have a string value or no value but it has instead: ${status}. This doesn't necessarily indicate the operation has failed. Check your Azure subscription or resource status for more information.`\n    );\n  }\n  switch (status?.toLocaleLowerCase()) {\n    case undefined:\n      return toOperationStatus(statusCode);\n    case \"succeeded\":\n      return \"succeeded\";\n    case \"failed\":\n      return \"failed\";\n    case \"running\":\n    case \"accepted\":\n    case \"started\":\n    case \"canceling\":\n    case \"cancelling\":\n      return \"running\";\n    case \"canceled\":\n    case \"cancelled\":\n      return \"canceled\";\n    default: {\n      logger.verbose(`LRO: unrecognized operation status: ${status}`);\n      return status as OperationStatus;\n    }\n  }\n}\n\nfunction getStatus(rawResponse: RawResponse): OperationStatus {\n  const { status } = (rawResponse.body as ResponseBody) ?? {};\n  return transformStatus({ status, statusCode: rawResponse.statusCode });\n}\n\nfunction getProvisioningState(rawResponse: RawResponse): OperationStatus {\n  const { properties, provisioningState } = (rawResponse.body as ResponseBody) ?? {};\n  const status = properties?.provisioningState ?? provisioningState;\n  return transformStatus({ status, statusCode: rawResponse.statusCode });\n}\n\nfunction toOperationStatus(statusCode: number): OperationStatus {\n  if (statusCode === 202) {\n    return \"running\";\n  } else if (statusCode < 300) {\n    return \"succeeded\";\n  } else {\n    return \"failed\";\n  }\n}\n\nexport function parseRetryAfter<T>({ rawResponse }: LroResponse<T>): number | undefined {\n  const retryAfter: string | undefined = rawResponse.headers[\"retry-after\"];\n  if (retryAfter !== undefined) {\n    // Retry-After header value is either in HTTP date format, or in seconds\n    const retryAfterInSeconds = parseInt(retryAfter);\n    return isNaN(retryAfterInSeconds)\n      ? calculatePollingIntervalFromDate(new Date(retryAfter))\n      : retryAfterInSeconds * 1000;\n  }\n  return undefined;\n}\n\nexport function getErrorFromResponse<T>(response: LroResponse<T>): LroError | undefined {\n  const error = (response.flatResponse as ResponseBody).error;\n  if (!error) {\n    logger.warning(\n      `The long-running operation failed but there is no error property in the response's body`\n    );\n    return;\n  }\n  if (!error.code || !error.message) {\n    logger.warning(\n      `The long-running operation failed but the error property in the response's body doesn't contain code or message`\n    );\n    return;\n  }\n  return error as LroError;\n}\n\nfunction calculatePollingIntervalFromDate(retryAfterDate: Date): number | undefined {\n  const timeNow = Math.floor(new Date().getTime());\n  const retryAfterTime = retryAfterDate.getTime();\n  if (timeNow < retryAfterTime) {\n    return retryAfterTime - timeNow;\n  }\n  return undefined;\n}\n\nexport function getStatusFromInitialResponse<TState>(inputs: {\n  response: LroResponse<unknown>;\n  state: RestorableOperationState<TState>;\n  operationLocation?: string;\n}): OperationStatus {\n  const { response, state, operationLocation } = inputs;\n  function helper(): OperationStatus {\n    const mode = state.config.metadata?.[\"mode\"];\n    switch (mode) {\n      case undefined:\n        return toOperationStatus(response.rawResponse.statusCode);\n      case \"Body\":\n        return getOperationStatus(response, state);\n      default:\n        return \"running\";\n    }\n  }\n  const status = helper();\n  return status === \"running\" && operationLocation === undefined ? \"succeeded\" : status;\n}\n\n/**\n * Initiates the long-running operation.\n */\nexport async function initHttpOperation<TResult, TState>(inputs: {\n  stateProxy: StateProxy<TState, TResult>;\n  resourceLocationConfig?: LroResourceLocationConfig;\n  processResult?: (result: unknown, state: TState) => TResult;\n  setErrorAsResult: boolean;\n  lro: LongRunningOperation;\n}): Promise<RestorableOperationState<TState>> {\n  const { stateProxy, resourceLocationConfig, processResult, lro, setErrorAsResult } = inputs;\n  return initOperation({\n    init: async () => {\n      const response = await lro.sendInitialRequest();\n      const config = inferLroMode({\n        rawResponse: response.rawResponse,\n        requestPath: lro.requestPath,\n        requestMethod: lro.requestMethod,\n        resourceLocationConfig,\n      });\n      return {\n        response,\n        operationLocation: config?.operationLocation,\n        resourceLocation: config?.resourceLocation,\n        ...(config?.mode ? { metadata: { mode: config.mode } } : {}),\n      };\n    },\n    stateProxy,\n    processResult: processResult\n      ? ({ flatResponse }, state) => processResult(flatResponse, state)\n      : ({ flatResponse }) => flatResponse as TResult,\n    getOperationStatus: getStatusFromInitialResponse,\n    setErrorAsResult,\n  });\n}\n\nexport function getOperationLocation<TState>(\n  { rawResponse }: LroResponse,\n  state: RestorableOperationState<TState>\n): string | undefined {\n  const mode = state.config.metadata?.[\"mode\"];\n  switch (mode) {\n    case \"OperationLocation\": {\n      return getOperationLocationPollingUrl({\n        operationLocation: getOperationLocationHeader(rawResponse),\n        azureAsyncOperation: getAzureAsyncOperationHeader(rawResponse),\n      });\n    }\n    case \"ResourceLocation\": {\n      return getLocationHeader(rawResponse);\n    }\n    case \"Body\":\n    default: {\n      return undefined;\n    }\n  }\n}\n\nexport function getOperationStatus<TState>(\n  { rawResponse }: LroResponse,\n  state: RestorableOperationState<TState>\n): OperationStatus {\n  const mode = state.config.metadata?.[\"mode\"];\n  switch (mode) {\n    case \"OperationLocation\": {\n      return getStatus(rawResponse);\n    }\n    case \"ResourceLocation\": {\n      return toOperationStatus(rawResponse.statusCode);\n    }\n    case \"Body\": {\n      return getProvisioningState(rawResponse);\n    }\n    default:\n      throw new Error(`Internal error: Unexpected operation mode: ${mode}`);\n  }\n}\n\nexport function getResourceLocation<TState>(\n  { flatResponse }: LroResponse,\n  state: RestorableOperationState<TState>\n): string | undefined {\n  if (typeof flatResponse === \"object\") {\n    const resourceLocation = (flatResponse as { resourceLocation?: string }).resourceLocation;\n    if (resourceLocation !== undefined) {\n      state.config.resourceLocation = resourceLocation;\n    }\n  }\n  return state.config.resourceLocation;\n}\n\nexport function isOperationError(e: Error): boolean {\n  return e.name === \"RestError\";\n}\n\n/** Polls the long-running operation. */\nexport async function pollHttpOperation<TState, TResult>(inputs: {\n  lro: LongRunningOperation;\n  stateProxy: StateProxy<TState, TResult>;\n  processResult?: (result: unknown, state: TState) => TResult;\n  updateState?: (state: TState, lastResponse: LroResponse) => void;\n  isDone?: (lastResponse: LroResponse, state: TState) => boolean;\n  setDelay: (intervalInMs: number) => void;\n  options?: { abortSignal?: AbortSignalLike };\n  state: RestorableOperationState<TState>;\n  setErrorAsResult: boolean;\n}): Promise<void> {\n  const {\n    lro,\n    stateProxy,\n    options,\n    processResult,\n    updateState,\n    setDelay,\n    state,\n    setErrorAsResult,\n  } = inputs;\n  return pollOperation({\n    state,\n    stateProxy,\n    setDelay,\n    processResult: processResult\n      ? ({ flatResponse }, inputState) => processResult(flatResponse, inputState)\n      : ({ flatResponse }) => flatResponse as TResult,\n    getError: getErrorFromResponse,\n    updateState,\n    getPollingInterval: parseRetryAfter,\n    getOperationLocation,\n    getOperationStatus,\n    isOperationError,\n    getResourceLocation,\n    options,\n    /**\n     * The expansion here is intentional because `lro` could be an object that\n     * references an inner this, so we need to preserve a reference to it.\n     */\n    poll: async (location, inputOptions) => lro.sendPollRequest(location, inputOptions),\n    setErrorAsResult,\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The default time interval to wait before sending the next polling request.\n */\nexport const POLL_INTERVAL_IN_MS = 2000;\n/**\n * The closed set of terminal states.\n */\nexport const terminalStates = [\"succeeded\", \"canceled\", \"failed\"];\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  LroError,\n  InnerError,\n  Operation,\n  OperationStatus,\n  RestorableOperationState,\n  StateProxy,\n} from \"./models\";\nimport { logger } from \"../logger\";\nimport { terminalStates } from \"./constants\";\n\n/**\n * Deserializes the state\n */\nexport function deserializeState<TState>(\n  serializedState: string\n): RestorableOperationState<TState> {\n  try {\n    return JSON.parse(serializedState).state;\n  } catch (e) {\n    throw new Error(`Unable to deserialize input state: ${serializedState}`);\n  }\n}\n\nfunction setStateError<TState, TResult>(inputs: {\n  state: TState;\n  stateProxy: StateProxy<TState, TResult>;\n  isOperationError: (error: Error) => boolean;\n}): (error: Error) => never {\n  const { state, stateProxy, isOperationError } = inputs;\n  return (error: Error) => {\n    if (isOperationError(error)) {\n      stateProxy.setError(state, error);\n      stateProxy.setFailed(state);\n    }\n    throw error;\n  };\n}\n\nfunction appendReadableErrorMessage(currentMessage: string, innerMessage: string): string {\n  let message = currentMessage;\n  if (message.slice(-1) !== \".\") {\n    message = message + \".\";\n  }\n  return message + \" \" + innerMessage;\n}\n\nfunction simplifyError(err: LroError): {\n  code: string;\n  message: string;\n} {\n  let message = err.message;\n  let code = err.code;\n  let curErr = err as InnerError;\n  while (curErr.innererror) {\n    curErr = curErr.innererror;\n    code = curErr.code;\n    message = appendReadableErrorMessage(message, curErr.message);\n  }\n  return {\n    code,\n    message,\n  };\n}\n\nfunction processOperationStatus<TState, TResult, TResponse>(result: {\n  status: OperationStatus;\n  response: TResponse;\n  state: RestorableOperationState<TState>;\n  stateProxy: StateProxy<TState, TResult>;\n  processResult?: (result: TResponse, state: TState) => TResult;\n  getError?: (response: TResponse) => LroError | undefined;\n  isDone?: (lastResponse: TResponse, state: TState) => boolean;\n  setErrorAsResult: boolean;\n}): void {\n  const { state, stateProxy, status, isDone, processResult, getError, response, setErrorAsResult } =\n    result;\n  switch (status) {\n    case \"succeeded\": {\n      stateProxy.setSucceeded(state);\n      break;\n    }\n    case \"failed\": {\n      const err = getError?.(response);\n      let postfix = \"\";\n      if (err) {\n        const { code, message } = simplifyError(err);\n        postfix = `. ${code}. ${message}`;\n      }\n      const errStr = `The long-running operation has failed${postfix}`;\n      stateProxy.setError(state, new Error(errStr));\n      stateProxy.setFailed(state);\n      logger.warning(errStr);\n      break;\n    }\n    case \"canceled\": {\n      stateProxy.setCanceled(state);\n      break;\n    }\n  }\n  if (\n    isDone?.(response, state) ||\n    (isDone === undefined &&\n      [\"succeeded\", \"canceled\"].concat(setErrorAsResult ? [] : [\"failed\"]).includes(status))\n  ) {\n    stateProxy.setResult(\n      state,\n      buildResult({\n        response,\n        state,\n        processResult,\n      })\n    );\n  }\n}\n\nfunction buildResult<TResponse, TResult, TState>(inputs: {\n  response: TResponse;\n  state: TState;\n  processResult?: (result: TResponse, state: TState) => TResult;\n}): TResult {\n  const { processResult, response, state } = inputs;\n  return processResult ? processResult(response, state) : (response as unknown as TResult);\n}\n\n/**\n * Initiates the long-running operation.\n */\nexport async function initOperation<TResponse, TResult, TState>(inputs: {\n  init: Operation<TResponse, unknown>[\"init\"];\n  stateProxy: StateProxy<TState, TResult>;\n  getOperationStatus: (inputs: {\n    response: TResponse;\n    state: RestorableOperationState<TState>;\n    operationLocation?: string;\n  }) => OperationStatus;\n  processResult?: (result: TResponse, state: TState) => TResult;\n  withOperationLocation?: (operationLocation: string, isUpdated: boolean) => void;\n  setErrorAsResult: boolean;\n}): Promise<RestorableOperationState<TState>> {\n  const {\n    init,\n    stateProxy,\n    processResult,\n    getOperationStatus,\n    withOperationLocation,\n    setErrorAsResult,\n  } = inputs;\n  const { operationLocation, resourceLocation, metadata, response } = await init();\n  if (operationLocation) withOperationLocation?.(operationLocation, false);\n  const config = {\n    metadata,\n    operationLocation,\n    resourceLocation,\n  };\n  logger.verbose(`LRO: Operation description:`, config);\n  const state = stateProxy.initState(config);\n  const status = getOperationStatus({ response, state, operationLocation });\n  processOperationStatus({ state, status, stateProxy, response, setErrorAsResult, processResult });\n  return state;\n}\n\nasync function pollOperationHelper<TResponse, TState, TResult, TOptions>(inputs: {\n  poll: Operation<TResponse, TOptions>[\"poll\"];\n  stateProxy: StateProxy<TState, TResult>;\n  state: RestorableOperationState<TState>;\n  operationLocation: string;\n  getOperationStatus: (\n    response: TResponse,\n    state: RestorableOperationState<TState>\n  ) => OperationStatus;\n  getResourceLocation: (\n    response: TResponse,\n    state: RestorableOperationState<TState>\n  ) => string | undefined;\n  isOperationError: (error: Error) => boolean;\n  options?: TOptions;\n}): Promise<{\n  status: OperationStatus;\n  response: TResponse;\n}> {\n  const {\n    poll,\n    state,\n    stateProxy,\n    operationLocation,\n    getOperationStatus,\n    getResourceLocation,\n    isOperationError,\n    options,\n  } = inputs;\n  const response = await poll(operationLocation, options).catch(\n    setStateError({\n      state,\n      stateProxy,\n      isOperationError,\n    })\n  );\n  const status = getOperationStatus(response, state);\n  logger.verbose(\n    `LRO: Status:\\n\\tPolling from: ${\n      state.config.operationLocation\n    }\\n\\tOperation status: ${status}\\n\\tPolling status: ${\n      terminalStates.includes(status) ? \"Stopped\" : \"Running\"\n    }`\n  );\n  if (status === \"succeeded\") {\n    const resourceLocation = getResourceLocation(response, state);\n    if (resourceLocation !== undefined) {\n      return {\n        response: await poll(resourceLocation).catch(\n          setStateError({ state, stateProxy, isOperationError })\n        ),\n        status,\n      };\n    }\n  }\n  return { response, status };\n}\n\n/** Polls the long-running operation. */\nexport async function pollOperation<TResponse, TState, TResult, TOptions>(inputs: {\n  poll: Operation<TResponse, TOptions>[\"poll\"];\n  stateProxy: StateProxy<TState, TResult>;\n  state: RestorableOperationState<TState>;\n  getOperationStatus: (\n    response: TResponse,\n    state: RestorableOperationState<TState>\n  ) => OperationStatus;\n  getResourceLocation: (\n    response: TResponse,\n    state: RestorableOperationState<TState>\n  ) => string | undefined;\n  isOperationError: (error: Error) => boolean;\n  getPollingInterval?: (response: TResponse) => number | undefined;\n  setDelay: (intervalInMs: number) => void;\n  getOperationLocation?: (\n    response: TResponse,\n    state: RestorableOperationState<TState>\n  ) => string | undefined;\n  withOperationLocation?: (operationLocation: string, isUpdated: boolean) => void;\n  processResult?: (result: TResponse, state: TState) => TResult;\n  getError?: (response: TResponse) => LroError | undefined;\n  updateState?: (state: TState, lastResponse: TResponse) => void;\n  isDone?: (lastResponse: TResponse, state: TState) => boolean;\n  setErrorAsResult: boolean;\n  options?: TOptions;\n}): Promise<void> {\n  const {\n    poll,\n    state,\n    stateProxy,\n    options,\n    getOperationStatus,\n    getResourceLocation,\n    getOperationLocation,\n    isOperationError,\n    withOperationLocation,\n    getPollingInterval,\n    processResult,\n    getError,\n    updateState,\n    setDelay,\n    isDone,\n    setErrorAsResult,\n  } = inputs;\n  const { operationLocation } = state.config;\n  if (operationLocation !== undefined) {\n    const { response, status } = await pollOperationHelper({\n      poll,\n      getOperationStatus,\n      state,\n      stateProxy,\n      operationLocation,\n      getResourceLocation,\n      isOperationError,\n      options,\n    });\n    processOperationStatus({\n      status,\n      response,\n      state,\n      stateProxy,\n      isDone,\n      processResult,\n      getError,\n      setErrorAsResult,\n    });\n\n    if (!terminalStates.includes(status)) {\n      const intervalInMs = getPollingInterval?.(response);\n      if (intervalInMs) setDelay(intervalInMs);\n      const location = getOperationLocation?.(response, state);\n      if (location !== undefined) {\n        const isUpdated = operationLocation !== location;\n        state.config.operationLocation = location;\n        withOperationLocation?.(location, isUpdated);\n      } else withOperationLocation?.(operationLocation, false);\n    }\n    updateState?.(state, response);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortOptions } from \"./aborterUtils\";\nimport { createAbortablePromise } from \"./createAbortablePromise\";\n\nconst StandardAbortMessage = \"The delay was aborted.\";\n\n/**\n * Options for support abort functionality for the delay method\n */\nexport interface DelayOptions extends AbortOptions {}\n\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs: number, options?: DelayOptions): Promise<void> {\n  let token: ReturnType<typeof setTimeout>;\n  const { abortSignal, abortErrorMsg } = options ?? {};\n  return createAbortablePromise(\n    (resolve) => {\n      token = setTimeout(resolve, timeInMs);\n    },\n    {\n      cleanupBeforeAbort: () => clearTimeout(token),\n      abortSignal,\n      abortErrorMsg: abortErrorMsg ?? StandardAbortMessage,\n    }\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport { AbortOptions } from \"./aborterUtils\";\n\n/**\n * Options for the createAbortablePromise function.\n */\nexport interface CreateAbortablePromiseOptions extends AbortOptions {\n  /** A function to be called if the promise was aborted */\n  cleanupBeforeAbort?: () => void;\n}\n\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\nexport function createAbortablePromise<T>(\n  buildPromise: (\n    resolve: (value: T | PromiseLike<T>) => void,\n    reject: (reason?: any) => void\n  ) => void,\n  options?: CreateAbortablePromiseOptions\n): Promise<T> {\n  const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options ?? {};\n  return new Promise((resolve, reject) => {\n    function rejectOnAbort(): void {\n      reject(new AbortError(abortErrorMsg ?? \"The operation was aborted.\"));\n    }\n    function removeListeners(): void {\n      abortSignal?.removeEventListener(\"abort\", onAbort);\n    }\n    function onAbort(): void {\n      cleanupBeforeAbort?.();\n      removeListeners();\n      rejectOnAbort();\n    }\n    if (abortSignal?.aborted) {\n      return rejectOnAbort();\n    }\n    try {\n      buildPromise(\n        (x) => {\n          removeListeners();\n          resolve(x);\n        },\n        (x) => {\n          removeListeners();\n          reject(x);\n        }\n      );\n    } catch (err) {\n      reject(err);\n    }\n    abortSignal?.addEventListener(\"abort\", onAbort);\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortController, AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  BuildCreatePollerOptions,\n  CreatePollerOptions,\n  Operation,\n  OperationState,\n  RestorableOperationState,\n  SimplePollerLike,\n  StateProxy,\n} from \"./models\";\nimport { deserializeState, initOperation, pollOperation } from \"./operation\";\nimport { POLL_INTERVAL_IN_MS } from \"./constants\";\nimport { delay } from \"@azure/core-util\";\n\nconst createStateProxy: <TResult, TState extends OperationState<TResult>>() => StateProxy<\n  TState,\n  TResult\n> = () => ({\n  /**\n   * The state at this point is created to be of type OperationState<TResult>.\n   * It will be updated later to be of type TState when the\n   * customer-provided callback, `updateState`, is called during polling.\n   */\n  initState: (config) => ({ status: \"running\", config } as any),\n  setCanceled: (state) => (state.status = \"canceled\"),\n  setError: (state, error) => (state.error = error),\n  setResult: (state, result) => (state.result = result),\n  setRunning: (state) => (state.status = \"running\"),\n  setSucceeded: (state) => (state.status = \"succeeded\"),\n  setFailed: (state) => (state.status = \"failed\"),\n\n  getError: (state) => state.error,\n  getResult: (state) => state.result,\n  isCanceled: (state) => state.status === \"canceled\",\n  isFailed: (state) => state.status === \"failed\",\n  isRunning: (state) => state.status === \"running\",\n  isSucceeded: (state) => state.status === \"succeeded\",\n});\n\n/**\n * Returns a poller factory.\n */\nexport function buildCreatePoller<TResponse, TResult, TState extends OperationState<TResult>>(\n  inputs: BuildCreatePollerOptions<TResponse, TState>\n): (\n  lro: Operation<TResponse, { abortSignal?: AbortSignalLike }>,\n  options?: CreatePollerOptions<TResponse, TResult, TState>\n) => Promise<SimplePollerLike<TState, TResult>> {\n  const {\n    getOperationLocation,\n    getStatusFromInitialResponse,\n    getStatusFromPollResponse,\n    isOperationError,\n    getResourceLocation,\n    getPollingInterval,\n    getError,\n    resolveOnUnsuccessful,\n  } = inputs;\n  return async (\n    { init, poll }: Operation<TResponse, { abortSignal?: AbortSignalLike }>,\n    options?: CreatePollerOptions<TResponse, TResult, TState>\n  ) => {\n    const {\n      processResult,\n      updateState,\n      withOperationLocation: withOperationLocationCallback,\n      intervalInMs = POLL_INTERVAL_IN_MS,\n      restoreFrom,\n    } = options || {};\n    const stateProxy = createStateProxy<TResult, TState>();\n    const withOperationLocation = withOperationLocationCallback\n      ? (() => {\n          let called = false;\n          return (operationLocation: string, isUpdated: boolean) => {\n            if (isUpdated) withOperationLocationCallback(operationLocation);\n            else if (!called) withOperationLocationCallback(operationLocation);\n            called = true;\n          };\n        })()\n      : undefined;\n    const state: RestorableOperationState<TState> = restoreFrom\n      ? deserializeState(restoreFrom)\n      : await initOperation({\n          init,\n          stateProxy,\n          processResult,\n          getOperationStatus: getStatusFromInitialResponse,\n          withOperationLocation,\n          setErrorAsResult: !resolveOnUnsuccessful,\n        });\n    let resultPromise: Promise<TResult> | undefined;\n    const abortController = new AbortController();\n    // Progress handlers\n    type Handler = (state: TState) => void;\n    const handlers = new Map<symbol, Handler>();\n    const handleProgressEvents = async (): Promise<void> => handlers.forEach((h) => h(state));\n    const cancelErrMsg = \"Operation was canceled\";\n    let currentPollIntervalInMs = intervalInMs;\n\n    const poller: SimplePollerLike<TState, TResult> = {\n      getOperationState: () => state,\n      getResult: () => state.result,\n      isDone: () => [\"succeeded\", \"failed\", \"canceled\"].includes(state.status),\n      isStopped: () => resultPromise === undefined,\n      stopPolling: () => {\n        abortController.abort();\n      },\n      toString: () =>\n        JSON.stringify({\n          state,\n        }),\n      onProgress: (callback: (state: TState) => void) => {\n        const s = Symbol();\n        handlers.set(s, callback);\n        return () => handlers.delete(s);\n      },\n      pollUntilDone: (pollOptions?: { abortSignal?: AbortSignalLike }) =>\n        (resultPromise ??= (async () => {\n          const { abortSignal: inputAbortSignal } = pollOptions || {};\n          const { signal: abortSignal } = inputAbortSignal\n            ? new AbortController([inputAbortSignal, abortController.signal])\n            : abortController;\n          if (!poller.isDone()) {\n            await poller.poll({ abortSignal });\n            while (!poller.isDone()) {\n              await delay(currentPollIntervalInMs, { abortSignal });\n              await poller.poll({ abortSignal });\n            }\n          }\n          if (resolveOnUnsuccessful) {\n            return poller.getResult() as TResult;\n          } else {\n            switch (state.status) {\n              case \"succeeded\":\n                return poller.getResult() as TResult;\n              case \"canceled\":\n                throw new Error(cancelErrMsg);\n              case \"failed\":\n                throw state.error;\n              case \"notStarted\":\n              case \"running\":\n                throw new Error(`Polling completed without succeeding or failing`);\n            }\n          }\n        })().finally(() => {\n          resultPromise = undefined;\n        })),\n      async poll(pollOptions?: { abortSignal?: AbortSignalLike }): Promise<void> {\n        if (resolveOnUnsuccessful) {\n          if (poller.isDone()) return;\n        } else {\n          switch (state.status) {\n            case \"succeeded\":\n              return;\n            case \"canceled\":\n              throw new Error(cancelErrMsg);\n            case \"failed\":\n              throw state.error;\n          }\n        }\n        await pollOperation({\n          poll,\n          state,\n          stateProxy,\n          getOperationLocation,\n          isOperationError,\n          withOperationLocation,\n          getPollingInterval,\n          getOperationStatus: getStatusFromPollResponse,\n          getResourceLocation,\n          processResult,\n          getError,\n          updateState,\n          options: pollOptions,\n          setDelay: (pollIntervalInMs) => {\n            currentPollIntervalInMs = pollIntervalInMs;\n          },\n          setErrorAsResult: !resolveOnUnsuccessful,\n        });\n        await handleProgressEvents();\n        if (!resolveOnUnsuccessful) {\n          switch (state.status) {\n            case \"canceled\":\n              throw new Error(cancelErrMsg);\n            case \"failed\":\n              throw state.error;\n          }\n        }\n      },\n    };\n    return poller;\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { Client, HttpResponse } from \"@azure-rest/core-client\";\nimport {\n  CreateHttpPollerOptions,\n  LongRunningOperation,\n  LroResponse,\n  OperationState,\n  SimplePollerLike,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport {\n  GetAzureBatchImageGenerationOperationStatus200Response,\n  GetAzureBatchImageGenerationOperationStatusDefaultResponse,\n  GetAzureBatchImageGenerationOperationStatusLogicalResponse,\n  BeginAzureBatchImageGeneration202Response,\n  BeginAzureBatchImageGenerationDefaultResponse,\n  BeginAzureBatchImageGenerationLogicalResponse,\n} from \"./responses.js\";\n/**\n * Helper function that builds a Poller object to help polling a long running operation.\n * @param client - Client to use for sending the request to get additional pages.\n * @param initialResponse - The initial response.\n * @param options - Options to set a resume state or custom polling interval.\n * @returns - A poller object to poll for operation state updates and eventually get the final response.\n */\nexport async function getLongRunningPoller<\n  TResult extends\n    | BeginAzureBatchImageGenerationLogicalResponse\n    | BeginAzureBatchImageGenerationDefaultResponse\n>(\n  client: Client,\n  initialResponse:\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationDefaultResponse,\n  options?: CreateHttpPollerOptions<TResult, OperationState<TResult>>\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>>;\nexport async function getLongRunningPoller<\n  TResult extends\n    | GetAzureBatchImageGenerationOperationStatusLogicalResponse\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n>(\n  client: Client,\n  initialResponse:\n    | GetAzureBatchImageGenerationOperationStatus200Response\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse,\n  options?: CreateHttpPollerOptions<TResult, OperationState<TResult>>\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>>;\nexport async function getLongRunningPoller<TResult extends HttpResponse>(\n  client: Client,\n  initialResponse: TResult,\n  options: CreateHttpPollerOptions<TResult, OperationState<TResult>> = {}\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>> {\n  const poller: LongRunningOperation<TResult> = {\n    requestMethod: initialResponse.request.method,\n    requestPath: initialResponse.request.url,\n    sendInitialRequest: async () => {\n      // In the case of Rest Clients we are building the LRO poller object from a response that's the reason\n      // we are not triggering the initial request here, just extracting the information from the\n      // response we were provided.\n      return getLroResponse(initialResponse);\n    },\n    sendPollRequest: async (path) => {\n      // This is the callback that is going to be called to poll the service\n      // to get the latest status. We use the client provided and the polling path\n      // which is an opaque URL provided by caller, the service sends this in one of the following headers: operation-location, azure-asyncoperation or location\n      // depending on the lro pattern that the service implements. If non is provided we default to the initial path.\n      const response = await client.pathUnchecked(path ?? initialResponse.request.url).get();\n      const lroResponse = getLroResponse(response as TResult);\n      lroResponse.rawResponse.headers[\"x-ms-original-url\"] = initialResponse.request.url;\n      return lroResponse;\n    },\n  };\n\n  options.resolveOnUnsuccessful = options.resolveOnUnsuccessful ?? true;\n  return createHttpPoller(poller, options);\n}\n\n/**\n * Converts a Rest Client response to a response that the LRO implementation understands\n * @param response - a rest client http response\n * @returns - An LRO response that the LRO implementation understands\n */\nfunction getLroResponse<TResult extends HttpResponse>(response: TResult): LroResponse<TResult> {\n  if (Number.isNaN(response.status)) {\n    throw new TypeError(`Status code of the response is not a number. Value: ${response.status}`);\n  }\n\n  return {\n    flatResponse: response,\n    rawResponse: {\n      ...response,\n      statusCode: Number.parseInt(response.status),\n      body: response.body,\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LongRunningOperation, LroResponse } from \"./models\";\nimport { OperationState, SimplePollerLike } from \"../poller/models\";\nimport {\n  getErrorFromResponse,\n  getOperationLocation,\n  getOperationStatus,\n  getResourceLocation,\n  getStatusFromInitialResponse,\n  inferLroMode,\n  isOperationError,\n  parseRetryAfter,\n} from \"./operation\";\nimport { CreateHttpPollerOptions } from \"./models\";\nimport { buildCreatePoller } from \"../poller/poller\";\n\n/**\n * Creates a poller that can be used to poll a long-running operation.\n * @param lro - Description of the long-running operation\n * @param options - options to configure the poller\n * @returns an initialized poller\n */\nexport async function createHttpPoller<TResult, TState extends OperationState<TResult>>(\n  lro: LongRunningOperation,\n  options?: CreateHttpPollerOptions<TResult, TState>\n): Promise<SimplePollerLike<TState, TResult>> {\n  const {\n    resourceLocationConfig,\n    intervalInMs,\n    processResult,\n    restoreFrom,\n    updateState,\n    withOperationLocation,\n    resolveOnUnsuccessful = false,\n  } = options || {};\n  return buildCreatePoller<LroResponse, TResult, TState>({\n    getStatusFromInitialResponse,\n    getStatusFromPollResponse: getOperationStatus,\n    isOperationError,\n    getOperationLocation,\n    getResourceLocation,\n    getPollingInterval: parseRetryAfter,\n    getError: getErrorFromResponse,\n    resolveOnUnsuccessful,\n  })(\n    {\n      init: async () => {\n        const response = await lro.sendInitialRequest();\n        const config = inferLroMode({\n          rawResponse: response.rawResponse,\n          requestPath: lro.requestPath,\n          requestMethod: lro.requestMethod,\n          resourceLocationConfig,\n        });\n        return {\n          response,\n          operationLocation: config?.operationLocation,\n          resourceLocation: config?.resourceLocation,\n          ...(config?.mode ? { metadata: { mode: config.mode } } : {}),\n        };\n      },\n      poll: lro.sendPollRequest,\n    },\n    {\n      intervalInMs,\n      withOperationLocation,\n      restoreFrom,\n      updateState,\n      processResult: processResult\n        ? ({ flatResponse }, state) => processResult(flatResponse, state)\n        : ({ flatResponse }) => flatResponse as TResult,\n    }\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { ChatMessage, ChatRole, Completions, PromptFilterResult } from \"../models/models.js\";\nimport {\n  ChatChoiceOutput,\n  ChatMessageOutput,\n  ChoiceOutput,\n  ContentFilterResultsOutput,\n  PromptFilterResultOutput,\n} from \"../rest/outputModels.js\";\nimport { ChatCompletions } from \"../models/models.js\";\nimport { ContentFilterResults } from \"./models.js\";\n\nfunction getPromptFilterResult(body: Record<string, any>): {\n  promptFilterResults?: PromptFilterResult[];\n} {\n  const res = body[\"prompt_annotations\"] ?? body[\"prompt_filter_results\"];\n  return !res\n    ? {}\n    : {\n        promptFilterResults: res.map((p: PromptFilterResultOutput) => ({\n          promptIndex: p[\"prompt_index\"],\n          ...(!p.content_filter_results\n            ? {}\n            : {\n                contentFilterResults: deserializeContentFilter(p.content_filter_results),\n              }),\n        })),\n      };\n}\n\nexport function getCompletionsResult(body: Record<string, any>): Omit<Completions, \"usage\"> {\n  return {\n    id: body[\"id\"],\n    created: new Date(body[\"created\"]),\n    ...getPromptFilterResult(body),\n    choices: (body[\"choices\"] ?? []).map((p: ChoiceOutput) => ({\n      text: p[\"text\"],\n      index: p[\"index\"],\n      ...(!p.content_filter_results\n        ? {}\n        : {\n            contentFilterResults: deserializeContentFilter(p.content_filter_results),\n          }),\n      logprobs:\n        p.logprobs === null\n          ? null\n          : {\n              tokens: p.logprobs[\"tokens\"],\n              tokenLogprobs: p.logprobs[\"token_logprobs\"],\n              topLogprobs: p.logprobs[\"top_logprobs\"],\n              textOffset: p.logprobs[\"text_offset\"],\n            },\n      finishReason: p[\"finish_reason\"],\n    })),\n  };\n}\n\nexport function getChatCompletionsResult(body: Record<string, any>): ChatCompletions {\n  return {\n    id: body[\"id\"],\n    created: new Date(body[\"created\"]),\n    choices: (body[\"choices\"] ?? []).map((p: ChatChoiceOutput) => ({\n      ...(!p.message ? {} : { message: _deserializeMessage(p.message) }),\n      index: p[\"index\"],\n      finishReason: p[\"finish_reason\"],\n      ...(!p.delta ? {} : { delta: _deserializeMessage(p.delta) }),\n      ...(!p.content_filter_results\n        ? {}\n        : { contentFilterResults: deserializeContentFilter(p.content_filter_results) }),\n    })),\n    ...getPromptFilterResult(body),\n    ...(!body[\"usage\"]\n      ? {}\n      : {\n          usage: {\n            completionTokens: body[\"usage\"].completion_tokens,\n            promptTokens: body[\"usage\"].prompt_tokens,\n            totalTokens: body[\"usage\"].total_tokens,\n          },\n        }),\n  };\n}\n\nfunction _deserializeMessage(message: ChatMessageOutput): ChatMessage {\n  return {\n    /**\n     * Treating the role and content as optional is because they may not be returned\n     * during the streaming mode. The type should be updated for the streaming mode\n     * and it is a TODO.\n     */\n    ...(!message[\"role\"] ? ({} as { role: ChatRole }) : { role: message[\"role\"] }),\n    ...(!message[\"content\"] ? ({} as { content: string }) : { content: message[\"content\"] }),\n    ...(!message[\"name\"] ? {} : { name: message[\"name\"] }),\n    ...(!message.function_call\n      ? {}\n      : {\n          functionCall: {\n            name: message.function_call?.[\"name\"],\n            arguments: message.function_call?.[\"arguments\"],\n          },\n        }),\n    ...(!message.context\n      ? {}\n      : {\n          context: {\n            ...(!message.context.messages\n              ? {}\n              : {\n                  messages: message.context.messages.map((m) => {\n                    return _deserializeMessage(m);\n                  }),\n                }),\n          },\n        }),\n  };\n}\n\nfunction deserializeContentFilter(result: ContentFilterResultsOutput): ContentFilterResults {\n  if (result.error) {\n    return {\n      error: {\n        code: result.error.code,\n        message: result.error.message,\n        details: result.error.details ?? [],\n      },\n    };\n  }\n  return {\n    ...(!result.sexual\n      ? {}\n      : {\n          sexual: {\n            severity: result.sexual?.[\"severity\"],\n            filtered: result.sexual?.[\"filtered\"],\n          },\n        }),\n    ...(!result.violence\n      ? {}\n      : {\n          violence: {\n            severity: result.violence?.[\"severity\"],\n            filtered: result.violence?.[\"filtered\"],\n          },\n        }),\n    ...(!result.hate\n      ? {}\n      : {\n          hate: {\n            severity: result.hate?.[\"severity\"],\n            filtered: result.hate?.[\"filtered\"],\n          },\n        }),\n    ...(!result.self_harm\n      ? {}\n      : {\n          selfHarm: {\n            severity: result.self_harm?.[\"severity\"],\n            filtered: result.self_harm?.[\"filtered\"],\n          },\n        }),\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst enum ControlChars {\n  NewLine = 10,\n  CarriageReturn = 13,\n  Space = 32,\n  Colon = 58,\n}\n\n/**\n * Represents a message sent in an event stream\n * https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format\n */\nexport interface EventMessage {\n  /** The event ID to set the EventSource object's last event ID value. */\n  id: string;\n  /** A string identifying the type of event described. */\n  event: string;\n  /** The event data */\n  data: string;\n  /** The reconnection interval (in milliseconds) to wait before retrying the connection */\n  retry?: number;\n}\n\ntype PartialSome<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n/**\n * Processes a response stream into a stream of events.\n * @param chunkIter - A stream of Uint8Array chunks\n * @returns An async iterable of EventMessage objects\n */\nexport function iterateSseStream(\n  chunkIter: ReadableStream<Uint8Array>\n): AsyncIterable<EventMessage>;\n/**\n * Processes a response stream into a stream of events.\n * @param chunkIter - An async iterable of Uint8Array chunks\n * @returns An async iterable of EventMessage objects\n */\nexport function iterateSseStream(chunkIter: AsyncIterable<Uint8Array>): AsyncIterable<EventMessage>;\nexport function iterateSseStream(\n  chunkIter: AsyncIterable<Uint8Array> | ReadableStream<Uint8Array>\n): AsyncIterable<EventMessage> {\n  return toMessage(toLine(ensureAsyncIterable(chunkIter)));\n}\n\nfunction ensureAsyncIterable(\n  chunkIter: AsyncIterable<Uint8Array> | ReadableStream<Uint8Array>\n): AsyncIterable<Uint8Array> {\n  return isReadableStream(chunkIter) && (chunkIter as any)[Symbol.asyncIterator] === undefined\n    ? toAsyncIterable(chunkIter)\n    : (chunkIter as AsyncIterable<Uint8Array>);\n}\n\nfunction isReadableStream(body: unknown): body is ReadableStream {\n  return Boolean(\n    body &&\n      typeof (body as ReadableStream).getReader === \"function\" &&\n      typeof (body as ReadableStream).tee === \"function\"\n  );\n}\n\nasync function* toAsyncIterable<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nfunction concatBuffer(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\n\nfunction createMessage(): PartialSome<EventMessage, \"data\"> {\n  return {\n    data: undefined,\n    event: \"\",\n    id: \"\",\n    retry: undefined,\n  };\n}\n\nasync function* toLine(\n  chunkIter: AsyncIterable<Uint8Array>\n): AsyncIterable<{ line: Uint8Array; fieldLen: number }> {\n  let buf: Uint8Array | undefined;\n  let bufIdx = 0;\n  let fieldLen = -1;\n  let discardTrailingNewline = false;\n  for await (const chunk of chunkIter) {\n    if (buf === undefined) {\n      buf = chunk;\n      bufIdx = 0;\n      fieldLen = -1;\n    } else {\n      buf = concatBuffer(buf, chunk);\n    }\n    const bufLen = buf.length;\n    let start = 0;\n    while (bufIdx < bufLen) {\n      if (discardTrailingNewline) {\n        if (buf[bufIdx] === ControlChars.NewLine) {\n          start = ++bufIdx;\n        }\n        discardTrailingNewline = false;\n      }\n      let end = -1;\n      for (; bufIdx < bufLen && end === -1; ++bufIdx) {\n        switch (buf[bufIdx]) {\n          case ControlChars.Colon:\n            if (fieldLen === -1) {\n              fieldLen = bufIdx - start;\n            }\n            break;\n          case ControlChars.CarriageReturn:\n            // We need to discard the trailing newline if any but can't do\n            // that now because we need to dispatch the current line first.\n            discardTrailingNewline = true;\n            end = bufIdx;\n            break;\n          case ControlChars.NewLine:\n            end = bufIdx;\n            break;\n        }\n      }\n      if (end === -1) {\n        // We reached the end of the buffer but the line hasn't ended.\n        // Wait for the next chunk and then continue parsing:\n        break;\n      }\n      yield { line: buf.subarray(start, end), fieldLen };\n      start = bufIdx; // we're now on the next line\n      fieldLen = -1;\n    }\n    if (start === bufLen) {\n      buf = undefined;\n    } else if (start !== 0) {\n      // discard already processed lines\n      buf = buf.subarray(start);\n      bufIdx -= start;\n    }\n  }\n}\n\nasync function* toMessage(\n  lineIter: AsyncIterable<{ line: Uint8Array; fieldLen: number }>\n): AsyncIterable<EventMessage> {\n  let message = createMessage();\n  const decoder = new TextDecoder();\n  for await (const { line, fieldLen } of lineIter) {\n    if (line.length === 0 && message.data !== undefined) {\n      // empty line denotes end of message. Yield and start a new message:\n      yield message as EventMessage;\n      message = createMessage();\n    } else if (fieldLen > 0) {\n      // exclude comments and lines with no values\n      // line is of format \"<field>:<value>\" or \"<field>: <value>\"\n      // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation\n      const field = decoder.decode(line.subarray(0, fieldLen));\n      const valueOffset = fieldLen + (line[fieldLen + 1] === ControlChars.Space ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n\n      switch (field) {\n        case \"data\":\n          message.data = message.data ? message.data + \"\\n\" + value : value;\n          break;\n        case \"event\":\n          message.event = value;\n          break;\n        case \"id\":\n          message.id = value;\n          break;\n        case \"retry\": {\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            message.retry = retry;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nexport function wrapError<T>(f: () => T, message: string): T {\n  try {\n    const result = f();\n    return result;\n  } catch (cause) {\n    throw new Error(`${message}: ${cause}`, { cause });\n  }\n}\n\nfunction tocamelCase(str: string): string {\n  return str.replace(/([_][a-z])/g, (group) => group.toUpperCase().replace(\"_\", \"\"));\n}\n\n/**\n * Rename keys to camel case.\n * @param obj - The object to rename keys to camel case\n * @returns The object with keys renamed to camel case\n */\nexport function renameKeysToCamelCase(obj: Record<string, any>): Record<string, any> {\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n    const newKey = tocamelCase(key);\n    if (newKey !== key) {\n      delete obj[key];\n    }\n    obj[newKey] =\n      typeof value === \"object\"\n        ? Array.isArray(value)\n          ? value.map((v) => renameKeysToCamelCase(v))\n          : renameKeysToCamelCase(value)\n        : value;\n  }\n  return obj;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\nimport { EventMessage, iterateSseStream } from \"@azure/core-sse\";\nimport { wrapError } from \"./util.js\";\n\nexport async function getSSEs(\n  response: StreamableMethod<unknown>\n): Promise<AsyncIterable<EventMessage>> {\n  const iter = await getStream(response);\n  return iterateSseStream(iter);\n}\n\nasync function getStream<TResponse>(\n  response: StreamableMethod<TResponse>\n): Promise<ReadableStream<Uint8Array>> {\n  const { body, status } = await response.asBrowserStream();\n  if (status !== \"200\" && body !== undefined) {\n    const text = await streamToText(body);\n    throw wrapError(() => JSON.parse(text).error, \"Error parsing response body\");\n  }\n  if (!body) throw new Error(\"No stream found in response. Did you enable the stream option?\");\n  return body;\n}\n\nasync function streamToText(stream: ReadableStream<Uint8Array>): Promise<string> {\n  const reader = stream.getReader();\n  const buffers: Uint8Array[] = [];\n  let length = 0;\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return new TextDecoder().decode(concatBuffers(buffers, length));\n      }\n      length += value.length;\n      buffers.push(value);\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nfunction getBuffersLength(buffers: Uint8Array[]): number {\n  return buffers.reduce((acc, curr) => acc + curr.length, 0);\n}\n\nfunction concatBuffers(buffers: Uint8Array[], len?: number): Uint8Array {\n  const length = len ?? getBuffersLength(buffers);\n  const res = new Uint8Array(length);\n  for (let i = 0, pos = 0; i < buffers.length; i++) {\n    const buffer = buffers[i];\n    res.set(buffer, pos);\n    pos += buffer.length;\n  }\n  return res;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\nimport { getSSEs } from \"./getSSEs.js\";\nimport { wrapError } from \"./util.js\";\n\nexport async function* getOaiSSEs<TEvent>(\n  response: StreamableMethod<unknown>,\n  toEvent: (obj: Record<string, any>) => TEvent\n): AsyncIterable<TEvent> {\n  const stream = await getSSEs(response);\n  let isDone = false;\n  for await (const event of stream) {\n    if (isDone) {\n      // handle a case where the service sends excess stream\n      // data after the [DONE] event\n      continue;\n    } else if (event.data === \"[DONE]\") {\n      isDone = true;\n    } else {\n      yield toEvent(\n        wrapError(\n          () => JSON.parse(event.data),\n          \"Error parsing an event. See 'cause' for more details\"\n        )\n      );\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport {\n  PipelineRequest,\n  PipelinePolicy,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\n\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nexport const formDataPolicyName = \"formDataWithFileUploadPolicy\";\n\n/**\n * A policy that encodes FormData on the request into the body.\n */\nexport function formDataWithFileUploadPolicy(): PipelinePolicy {\n  return {\n    name: formDataPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (request.formData) {\n        const formData = request.formData;\n        const requestForm = new FormData();\n        for (const formKey of Object.keys(formData)) {\n          const formValue = formData[formKey];\n          if (Array.isArray(formValue)) {\n            for (const subValue of formValue) {\n              requestForm.append(formKey, subValue);\n            }\n          } else {\n            requestForm.append(formKey, formValue);\n          }\n        }\n\n        request.body = requestForm;\n        request.formData = undefined;\n        const contentType = request.headers.get(\"Content-Type\");\n        if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n          request.body = new URLSearchParams(requestForm as any).toString();\n        } else if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n          // browser will automatically apply a suitable content-type header\n          request.headers.delete(\"Content-Type\");\n        }\n      }\n      return next(request);\n    },\n  };\n}\n\nexport function createFile(data: Uint8Array | string): File {\n  return new File([data], \"placeholder.wav\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod, operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport {\n  ChatCompletions,\n  ChatMessage,\n  Completions,\n  Embeddings,\n  ImageGenerations,\n  ImageLocation,\n} from \"../models/models.js\";\nimport {\n  GetChatCompletionsOptions as GeneratedGetChatCompletionsOptions,\n  GetChatCompletionsWithAzureExtensionsOptions,\n  GetCompletionsOptions,\n  GetEmbeddingsOptions,\n  ImageGenerationOptions,\n} from \"../models/options.js\";\nimport {\n  BeginAzureBatchImageGeneration202Response,\n  BeginAzureBatchImageGenerationDefaultResponse,\n  BeginAzureBatchImageGenerationLogicalResponse,\n  ChatMessage as GeneratedChatMessage,\n  OpenAIContext as Client,\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetChatCompletionsWithAzureExtensions200Response,\n  GetChatCompletionsWithAzureExtensionsDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  ImageGenerationsOutput,\n  ImagePayloadOutput,\n  getLongRunningPoller,\n  isUnexpected,\n} from \"../rest/index.js\";\nimport { getChatCompletionsResult, getCompletionsResult } from \"./deserializers.js\";\nimport { getOaiSSEs } from \"./oaiSse.js\";\nimport { GetChatCompletionsOptions } from \"./models.js\";\nimport {\n  AudioResult,\n  AudioResultFormat,\n  AudioResultSimpleJson,\n  GetAudioTranscriptionOptions,\n  GetAudioTranslationOptions,\n} from \"../models/audio.js\";\nimport { createFile } from \"./policies/formDataPolicy.js\";\nimport { renameKeysToCamelCase } from \"./util.js\";\n\nexport function _getEmbeddingsSend(\n  context: Client,\n  input: string[],\n  deploymentId: string,\n  options: GetEmbeddingsOptions = { requestOptions: {} }\n): StreamableMethod<GetEmbeddings200Response | GetEmbeddingsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/embeddings\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: { user: options?.user, model: options?.model, input: input },\n  });\n}\n\nexport async function _getEmbeddingsDeserialize(\n  result: GetEmbeddings200Response | GetEmbeddingsDefaultResponse\n): Promise<Embeddings> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    data: (result.body[\"data\"] ?? []).map((p) => ({\n      embedding: p[\"embedding\"],\n      index: p[\"index\"],\n    })),\n    usage: {\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/** Return the embeddings for a given prompt. */\nexport async function getEmbeddings(\n  context: Client,\n  input: string[],\n  deploymentId: string,\n  options: GetEmbeddingsOptions = { requestOptions: {} }\n): Promise<Embeddings> {\n  const result = await _getEmbeddingsSend(context, input, deploymentId, options);\n  return _getEmbeddingsDeserialize(result);\n}\n\nexport function _getCompletionsSend(\n  context: Client,\n  prompt: string[],\n  deploymentId: string,\n  options: GetCompletionsOptions = { requestOptions: {} }\n): StreamableMethod<GetCompletions200Response | GetCompletionsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/completions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      prompt: prompt,\n      max_tokens: options?.maxTokens,\n      temperature: options?.temperature,\n      top_p: options?.topP,\n      logit_bias: options?.logitBias,\n      user: options?.user,\n      n: options?.n,\n      logprobs: options?.logprobs,\n      echo: options?.echo,\n      stop: options?.stop,\n      presence_penalty: options?.presencePenalty,\n      frequency_penalty: options?.frequencyPenalty,\n      best_of: options?.bestOf,\n      stream: options?.stream,\n      model: options?.model,\n    },\n  });\n}\n\nexport async function _getCompletionsDeserialize(\n  result: GetCompletions200Response | GetCompletionsDefaultResponse\n): Promise<Completions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    id: result.body[\"id\"],\n    created: new Date(result.body[\"created\"]),\n    promptFilterResults: (result.body[\"prompt_annotations\"] ?? []).map((p) => ({\n      promptIndex: p[\"prompt_index\"],\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n    })),\n    choices: (result.body[\"choices\"] ?? []).map((p) => ({\n      text: p[\"text\"],\n      index: p[\"index\"],\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n      logprobs:\n        p.logprobs === null\n          ? null\n          : {\n              tokens: p.logprobs[\"tokens\"],\n              tokenLogprobs: p.logprobs[\"token_logprobs\"],\n              topLogprobs: p.logprobs[\"top_logprobs\"],\n              textOffset: p.logprobs[\"text_offset\"],\n            },\n      finishReason: p[\"finish_reason\"],\n    })),\n    usage: {\n      completionTokens: result.body.usage[\"completion_tokens\"],\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/**\n * Gets completions for the provided input prompts.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getCompletions(\n  context: Client,\n  prompt: string[],\n  deploymentId: string,\n  options: GetCompletionsOptions = { requestOptions: {} }\n): Promise<Completions> {\n  const result = await _getCompletionsSend(context, prompt, deploymentId, options);\n  return _getCompletionsDeserialize(result);\n}\n\nexport function _getChatCompletionsSend(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentId: string,\n  options: GeneratedGetChatCompletionsOptions = { requestOptions: {} }\n): StreamableMethod<GetChatCompletions200Response | GetChatCompletionsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/chat/completions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      messages: parseChatMessage(messages),\n      functions: options?.functions,\n      function_call: options?.functionCall,\n      max_tokens: options?.maxTokens,\n      temperature: options?.temperature,\n      top_p: options?.topP,\n      logit_bias: options?.logitBias,\n      user: options?.user,\n      n: options?.n,\n      stop: options?.stop,\n      presence_penalty: options?.presencePenalty,\n      frequency_penalty: options?.frequencyPenalty,\n      stream: options?.stream,\n      model: options?.model,\n      dataSources: options?.dataSources,\n    },\n  });\n}\n\nexport async function _getChatCompletionsDeserialize(\n  result: GetChatCompletions200Response | GetChatCompletionsDefaultResponse\n): Promise<ChatCompletions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    id: result.body[\"id\"],\n    created: new Date(result.body[\"created\"]),\n    choices: (result.body[\"choices\"] ?? []).map((p) => ({\n      message: !p.message ? undefined : (p.message as any),\n      index: p[\"index\"],\n      finishReason: p[\"finish_reason\"],\n      delta: !p.delta\n        ? undefined\n        : {\n            role: p.delta?.[\"role\"],\n            content: p.delta?.[\"content\"],\n            name: p.delta?.[\"name\"],\n            functionCall: !p.delta?.function_call\n              ? undefined\n              : {\n                  name: p.delta?.function_call?.[\"name\"],\n                  arguments: p.delta?.function_call?.[\"arguments\"],\n                },\n            context: !p.delta?.context\n              ? undefined\n              : {\n                  messages: !p.delta?.context?.messages\n                    ? undefined\n                    : (p.delta?.context?.messages as any),\n                },\n          },\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n    })),\n    promptFilterResults: (result.body[\"prompt_annotations\"] ?? []).map((p) => ({\n      promptIndex: p[\"prompt_index\"],\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n    })),\n    usage: {\n      completionTokens: result.body.usage[\"completion_tokens\"],\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\nexport function _getChatCompletionsWithAzureExtensionsSend(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentId: string,\n  options: GetChatCompletionsWithAzureExtensionsOptions = { requestOptions: {} }\n): StreamableMethod<\n  | GetChatCompletionsWithAzureExtensions200Response\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n> {\n  return context\n    .path(\"/deployments/{deploymentId}/extensions/chat/completions\", deploymentId)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        messages: parseChatMessage(messages),\n        functions: options?.functions,\n        function_call: options?.functionCall,\n        max_tokens: options?.maxTokens,\n        temperature: options?.temperature,\n        top_p: options?.topP,\n        logit_bias: options?.logitBias,\n        user: options?.user,\n        n: options?.n,\n        stop: options?.stop,\n        presence_penalty: options?.presencePenalty,\n        frequency_penalty: options?.frequencyPenalty,\n        stream: options?.stream,\n        model: options?.model,\n        dataSources: options?.dataSources,\n      },\n    });\n}\n\nexport async function _getChatCompletionsWithAzureExtensionsDeserialize(\n  result:\n    | GetChatCompletionsWithAzureExtensions200Response\n    | GetChatCompletionsWithAzureExtensionsDefaultResponse\n): Promise<ChatCompletions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    id: result.body[\"id\"],\n    created: new Date(result.body[\"created\"]),\n    choices: (result.body[\"choices\"] ?? []).map((p) => ({\n      message: !p.message ? undefined : (p.message as any),\n      index: p[\"index\"],\n      finishReason: p[\"finish_reason\"],\n      delta: !p.delta\n        ? undefined\n        : {\n            role: p.delta?.[\"role\"],\n            content: p.delta?.[\"content\"],\n            name: p.delta?.[\"name\"],\n            functionCall: !p.delta?.function_call\n              ? undefined\n              : {\n                  name: p.delta?.function_call?.[\"name\"],\n                  arguments: p.delta?.function_call?.[\"arguments\"],\n                },\n            context: !p.delta?.context\n              ? undefined\n              : {\n                  messages: !p.delta?.context?.messages\n                    ? undefined\n                    : (p.delta?.context?.messages as any),\n                },\n          },\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n    })),\n    promptFilterResults: (result.body[\"prompt_annotations\"] ?? []).map((p) => ({\n      promptIndex: p[\"prompt_index\"],\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n    })),\n    usage: {\n      completionTokens: result.body.usage[\"completion_tokens\"],\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/**\n * Gets chat completions for the provided chat messages.\n * This is an Azure-specific version of chat completions that supports integration with configured data sources and\n * other augmentations to the base chat completions capabilities.\n */\nexport async function getChatCompletionsWithAzureExtensions(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentId: string,\n  options: GetChatCompletionsWithAzureExtensionsOptions = { requestOptions: {} }\n): Promise<ChatCompletions> {\n  const result = await _getChatCompletionsWithAzureExtensionsSend(\n    context,\n    messages,\n    deploymentId,\n    options\n  );\n  return _getChatCompletionsWithAzureExtensionsDeserialize(result);\n}\n\nexport function _beginAzureBatchImageGenerationSend(\n  context: Client,\n  prompt: string,\n  options: ImageGenerationOptions = { requestOptions: {} }\n): StreamableMethod<\n  | BeginAzureBatchImageGeneration202Response\n  | BeginAzureBatchImageGenerationDefaultResponse\n  | BeginAzureBatchImageGenerationLogicalResponse\n> {\n  return context.path(\"/images/generations:submit\").post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      prompt: prompt,\n      n: options?.n,\n      size: options?.size,\n      response_format: options?.responseFormat,\n      user: options?.user,\n    },\n  });\n}\n\nexport function listCompletions(\n  context: Client,\n  prompt: string[],\n  deploymentName: string,\n  options: GetCompletionsOptions = { requestOptions: {} }\n): AsyncIterable<Omit<Completions, \"usage\">> {\n  const response = _getCompletionsSend(context, prompt, deploymentName, {\n    ...options,\n    stream: true,\n  });\n  return getOaiSSEs(response, getCompletionsResult);\n}\n\nexport async function getImages(\n  context: Client,\n  prompt: string,\n  options: ImageGenerationOptions = { requestOptions: {} }\n): Promise<ImageGenerations> {\n  const response = await _beginAzureBatchImageGenerationSend(context, prompt, options);\n  if (isUnexpected(response)) {\n    // Check for response from OpenAI\n    const body = response.body as unknown as ImageGenerations;\n    if (body.created && body.data) {\n      return body;\n    }\n    throw response.body.error;\n  }\n\n  if (response.status === \"202\") {\n    const poller = await getLongRunningPoller(\n      context,\n      response as BeginAzureBatchImageGeneration202Response\n    );\n    const result = await poller.pollUntilDone();\n    return getImageResultsDeserialize(result);\n  } else {\n    return getImageResultsDeserialize(response);\n  }\n}\n\nexport function listChatCompletions(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentName: string,\n  options: GetChatCompletionsOptions = { requestOptions: {} }\n): AsyncIterable<ChatCompletions> {\n  const response = _getChatCompletionsSendX(context, messages, deploymentName, {\n    ...options,\n    stream: true,\n  });\n  return getOaiSSEs(response, getChatCompletionsResult);\n}\n\n/**\n * Gets chat completions for the provided chat messages.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getChatCompletions(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentId: string,\n  options: GetChatCompletionsOptions = { requestOptions: {} }\n): Promise<ChatCompletions> {\n  const result = await _getChatCompletionsSendX(context, messages, deploymentId, options);\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n  return getChatCompletionsResult(result.body);\n}\n\nfunction convertResultTypes({ created, data }: ImageGenerationsOutput): ImageGenerations {\n  if (typeof (data[0] as ImageLocation).url === \"string\") {\n    return {\n      created: new Date(created),\n      data: data as ImageLocation[],\n    };\n  } else {\n    return {\n      created: new Date(created),\n      data: data.map((item) => {\n        return {\n          base64Data: (item as ImagePayloadOutput).b64_json,\n        };\n      }),\n    };\n  }\n}\n\nfunction getImageResultsDeserialize(\n  response:\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationDefaultResponse\n    | BeginAzureBatchImageGenerationLogicalResponse\n): ImageGenerations {\n  if (isUnexpected(response) || !response.body.result) {\n    throw response.body.error;\n  }\n\n  const result = response.body.result;\n  return convertResultTypes(result);\n}\n\nfunction _getChatCompletionsSendX(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentName: string,\n  options: GetChatCompletionsOptions = { requestOptions: {} }\n): StreamableMethod<\n  | GetChatCompletionsWithAzureExtensions200Response\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n> {\n  return options.azureExtensionOptions?.extensions\n    ? _getChatCompletionsWithAzureExtensionsSend(context, messages, deploymentName, {\n        ...options,\n        dataSources: options.azureExtensionOptions?.extensions,\n      })\n    : _getChatCompletionsSend(context, messages, deploymentName, options);\n}\n\n/**\n * Returns the translation of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to translate.\n * @param options - The options for this audio translation request.\n * @returns The audio translation result.\n */\nexport async function getAudioTranslation(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  options?: GetAudioTranslationOptions\n): Promise<AudioResultSimpleJson>;\n/**\n * Returns the translation of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to translate.\n * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n * @param options - The options for this audio translation request.\n * @returns The audio translation result.\n */\nexport async function getAudioTranslation<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  format: Format,\n  options?: GetAudioTranslationOptions\n): Promise<AudioResult<Format>>;\n// implementation\nexport async function getAudioTranslation<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  formatOrOptions?: Format | GetAudioTranslationOptions,\n  inputOptions?: GetAudioTranslationOptions\n): Promise<AudioResult<Format>> {\n  const options =\n    inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n  const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n  const { temperature, prompt, model, ...rest } = options;\n  const { body, status } = await context\n    .pathUnchecked(\"deployments/{deploymentId}/audio/translations\", deploymentName)\n    .post({\n      body: {\n        file: await createFile(fileContent),\n        ...(response_format && { response_format }),\n        ...(temperature !== undefined ? { temperature } : {}),\n        ...(prompt && { prompt }),\n        ...(model && { model }),\n      },\n      ...rest,\n      contentType: \"multipart/form-data\",\n    });\n  if (status !== \"200\") {\n    throw body.error;\n  }\n  return response_format !== \"verbose_json\"\n    ? body\n    : (renameKeysToCamelCase(body) as AudioResult<Format>);\n}\n\n/**\n * Returns the transcription of an audio file in a simple JSON format.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to transcribe.\n * @param options - The options for this audio transcription request.\n * @returns The audio transcription result in a simple JSON format.\n */\nexport async function getAudioTranscription(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  options?: GetAudioTranscriptionOptions\n): Promise<AudioResultSimpleJson>;\n/**\n * Returns the transcription of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to transcribe.\n * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n * @param options - The options for this audio transcription request.\n * @returns The audio transcription result in a format of your choice.\n */\nexport async function getAudioTranscription<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  format: Format,\n  options?: GetAudioTranscriptionOptions\n): Promise<AudioResult<Format>>;\n// implementation\nexport async function getAudioTranscription<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  formatOrOptions?: Format | GetAudioTranscriptionOptions,\n  inputOptions?: GetAudioTranscriptionOptions\n): Promise<AudioResult<Format>> {\n  const options =\n    inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n  const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n  const { temperature, language, prompt, model, ...rest } = options;\n  const { body, status } = await context\n    .pathUnchecked(\"deployments/{deploymentId}/audio/transcriptions\", deploymentName)\n    .post({\n      body: {\n        file: await createFile(fileContent),\n        ...(response_format && { response_format }),\n        ...(language && { language }),\n        ...(temperature !== undefined ? { temperature } : {}),\n        ...(prompt && { prompt }),\n        ...(model && { model }),\n      },\n      ...rest,\n      contentType: \"multipart/form-data\",\n    });\n  if (status !== \"200\") {\n    throw body.error;\n  }\n  return response_format !== \"verbose_json\"\n    ? body\n    : (renameKeysToCamelCase(body) as AudioResult<Format>);\n}\n\nfunction parseChatMessage(messages: ChatMessage[]): GeneratedChatMessage[] {\n  return messages.map((p: ChatMessage) => ({\n    role: p.role,\n    content: p.content ?? null,\n    name: p.name,\n    function_call: p.functionCall,\n    context: p.context,\n  }));\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport {\n  OpenAIClientOptions,\n  OpenAIContext,\n  createOpenAI,\n  getChatCompletions,\n  getCompletions,\n  getEmbeddings,\n  getImages,\n  listChatCompletions,\n  listCompletions,\n} from \"./api/index.js\";\nimport {\n  ChatCompletions,\n  ChatMessage,\n  Completions,\n  Embeddings,\n  ImageGenerations,\n} from \"./models/models.js\";\nimport {\n  GetCompletionsOptions,\n  GetEmbeddingsOptions,\n  ImageGenerationOptions,\n} from \"./models/options.js\";\nimport { GetChatCompletionsOptions } from \"./api/models.js\";\nimport {\n  AudioResultFormat,\n  AudioResult,\n  GetAudioTranscriptionOptions,\n  GetAudioTranslationOptions,\n  AudioResultSimpleJson,\n} from \"./models/audio.js\";\nimport { nonAzurePolicy } from \"./api/policies/nonAzure.js\";\nimport { formDataPolicyName } from \"@azure/core-rest-pipeline\";\nimport { formDataWithFileUploadPolicy } from \"./api/policies/formDataPolicy.js\";\nimport { getAudioTranscription, getAudioTranslation } from \"./api/operations.js\";\n\nexport { OpenAIClientOptions } from \"./api/OpenAIContext.js\";\n\nexport class OpenAIClient {\n  private _client: OpenAIContext;\n  private _isAzure = false;\n\n  /**\n   * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A key credential used to authenticate to an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   This constructor initializes an OpenAIClient object that can only be used with Azure OpenAI resources.\n   *   To use OpenAIClient with a non-Azure OpenAI inference endpoint, use a constructor that accepts a non-Azure OpenAI API key instead.\n   */\n  constructor(endpoint: string, credential: KeyCredential, options?: OpenAIClientOptions);\n  /**\n   * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A token credential used to authenticate with an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   */\n  constructor(endpoint: string, credential: TokenCredential, options?: OpenAIClientOptions);\n  /**\n   * Initializes an instance of OpenAIClient for use with the non-Azure OpenAI endpoint.\n   * @param openAiApiKey - The API key to use when connecting to the non-Azure OpenAI endpoint.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   OpenAIClient objects initialized with this constructor can only be used with the non-Azure OpenAI inference endpoint.\n   *   To use OpenAIClient with an Azure OpenAI resource, use a constructor that accepts a resource URI and Azure authentication credential instead.\n   */\n  constructor(openAiApiKey: KeyCredential, options?: OpenAIClientOptions);\n  constructor(\n    endpointOrOpenAiKey: string | KeyCredential,\n    credOrOptions: KeyCredential | TokenCredential | OpenAIClientOptions = {},\n    options: OpenAIClientOptions = {}\n  ) {\n    let opts: OpenAIClientOptions;\n    let endpoint: string;\n    let cred: KeyCredential | TokenCredential;\n    if (isCred(credOrOptions)) {\n      endpoint = endpointOrOpenAiKey as string;\n      cred = credOrOptions;\n      opts = options;\n      this._isAzure = true;\n    } else {\n      endpoint = createOpenAIEndpoint(1);\n      cred = endpointOrOpenAiKey as KeyCredential;\n      const { credentials, ...restOpts } = credOrOptions;\n      opts = {\n        credentials: {\n          apiKeyHeaderName: credentials?.apiKeyHeaderName ?? \"Authorization\",\n          scopes: credentials?.scopes,\n        },\n        ...restOpts,\n      };\n    }\n\n    this._client = createOpenAI(endpoint, cred, {\n      ...opts,\n      ...(this._isAzure\n        ? {}\n        : {\n            additionalPolicies: [\n              ...(opts.additionalPolicies ?? []),\n              {\n                position: \"perCall\",\n                policy: nonAzurePolicy(),\n              },\n            ],\n          }),\n    });\n    this._client.pipeline.removePolicy({ name: formDataPolicyName });\n    this._client.pipeline.addPolicy(formDataWithFileUploadPolicy());\n  }\n\n  /**\n   * Returns textual completions as configured for a given prompt.\n   * @param deploymentName - Specifies either the model deployment name (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The options for this completions request.\n   * @returns The completions for the given prompt.\n   */\n  getCompletions(\n    deploymentName: string,\n    prompt: string[],\n    options: GetCompletionsOptions = { requestOptions: {} }\n  ): Promise<Completions> {\n    this.setModel(deploymentName, options);\n    return getCompletions(this._client, prompt, deploymentName, options);\n  }\n\n  /**\n   * Lists the completions tokens as they become available for a given prompt.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The completions options for this completions request.\n   * @returns An asynchronous iterable of completions tokens.\n   */\n  listCompletions(\n    deploymentName: string,\n    prompt: string[],\n    options: GetCompletionsOptions = {}\n  ): AsyncIterable<Omit<Completions, \"usage\">> {\n    this.setModel(deploymentName, options);\n    return listCompletions(this._client, prompt, deploymentName, options);\n  }\n\n  /**\n   * Return the computed embeddings for a given prompt.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param input - The prompt to use for this request.\n   * @param options - The embeddings options for this embeddings request.\n   * @returns The embeddings for the given prompt.\n   */\n  getEmbeddings(\n    deploymentName: string,\n    input: string[],\n    options: GetEmbeddingsOptions = { requestOptions: {} }\n  ): Promise<Embeddings> {\n    this.setModel(deploymentName, options);\n    return getEmbeddings(this._client, input, deploymentName, options);\n  }\n\n  /**\n   * Get chat completions for provided chat context messages.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param messages - The chat context messages to use for this request.\n   * @param options - The chat completions options for this completions request.\n   * @returns The chat completions for the given chat context messages.\n   */\n  getChatCompletions(\n    deploymentName: string,\n    messages: ChatMessage[],\n    options: GetChatCompletionsOptions = { requestOptions: {} }\n  ): Promise<ChatCompletions> {\n    this.setModel(deploymentName, options);\n    return getChatCompletions(this._client, messages, deploymentName, options);\n  }\n\n  /**\n   * Lists the chat completions tokens as they become available for a chat context.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param messages - The chat context messages to use for this request.\n   * @param options - The chat completions options for this chat completions request.\n   * @returns An asynchronous iterable of chat completions tokens.\n   */\n  listChatCompletions(\n    deploymentName: string,\n    messages: ChatMessage[],\n    options: GetChatCompletionsOptions = { requestOptions: {} }\n  ): AsyncIterable<ChatCompletions> {\n    this.setModel(deploymentName, options);\n    return listChatCompletions(this._client, messages, deploymentName, options);\n  }\n\n  /**\n   * Starts the generation of a batch of images from a text caption\n   * @param prompt - The prompt to use for this request.\n   * @param options - The options for this image request.\n   * @returns The image generation response (containing url or base64 data).\n   */\n  getImages(\n    prompt: string,\n    options: ImageGenerationOptions = { requestOptions: {} }\n  ): Promise<ImageGenerations> {\n    return getImages(this._client, prompt, options);\n  }\n\n  /**\n   * Returns the transcription of an audio file in a simple JSON format.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to transcribe.\n   * @param options - The options for this audio transcription request.\n   * @returns The audio transcription result in a simple JSON format.\n   */\n  async getAudioTranscription(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    options?: GetAudioTranscriptionOptions\n  ): Promise<AudioResultSimpleJson>;\n  /**\n   * Returns the transcription of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to transcribe.\n   * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n   * @param options - The options for this audio transcription request.\n   * @returns The audio transcription result in a format of your choice.\n   */\n  async getAudioTranscription<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    format: Format,\n    options?: GetAudioTranscriptionOptions\n  ): Promise<AudioResult<Format>>;\n  // implementation\n  async getAudioTranscription<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    formatOrOptions?: Format | GetAudioTranscriptionOptions,\n    inputOptions?: GetAudioTranscriptionOptions\n  ): Promise<AudioResult<Format>> {\n    const options =\n      inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n    const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n    this.setModel(deploymentName, options);\n    if (response_format === undefined) {\n      return getAudioTranscription(this._client, deploymentName, fileContent, options) as Promise<\n        AudioResult<Format>\n      >;\n    }\n    return getAudioTranscription(\n      this._client,\n      deploymentName,\n      fileContent,\n      response_format,\n      options\n    );\n  }\n\n  /**\n   * Returns the translation of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to translate.\n   * @param options - The options for this audio translation request.\n   * @returns The audio translation result.\n   */\n  async getAudioTranslation(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    options?: GetAudioTranslationOptions\n  ): Promise<AudioResultSimpleJson>;\n  /**\n   * Returns the translation of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to translate.\n   * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n   * @param options - The options for this audio translation request.\n   * @returns The audio translation result.\n   */\n  async getAudioTranslation<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    format: Format,\n    options?: GetAudioTranslationOptions\n  ): Promise<AudioResult<Format>>;\n  // implementation\n  async getAudioTranslation<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    formatOrOptions?: Format | GetAudioTranslationOptions,\n    inputOptions?: GetAudioTranslationOptions\n  ): Promise<AudioResult<Format>> {\n    const options =\n      inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n    const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n    this.setModel(deploymentName, options);\n    if (response_format === undefined) {\n      return getAudioTranslation(this._client, deploymentName, fileContent, options) as Promise<\n        AudioResult<Format>\n      >;\n    }\n    return getAudioTranslation(this._client, deploymentName, fileContent, response_format, options);\n  }\n\n  private setModel(model: string, options: { model?: string }): void {\n    if (!this._isAzure) {\n      options.model = model;\n    }\n  }\n}\n\nfunction createOpenAIEndpoint(version: number): string {\n  return `https://api.openai.com/v${version}`;\n}\n\nfunction isCred(cred: Record<string, any>): cred is TokenCredential | KeyCredential {\n  return isTokenCredential(cred) || cred.key !== undefined;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { ClientOptions } from \"@azure-rest/core-client\";\nimport { OpenAIContext } from \"../rest/index.js\";\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport getClient from \"../rest/index.js\";\n\nexport interface OpenAIClientOptions extends ClientOptions {}\n\nexport { OpenAIContext } from \"../rest/index.js\";\n\n/** Azure OpenAI APIs for completions and search */\nexport function createOpenAI(\n  endpoint: string,\n  credential: KeyCredential | TokenCredential,\n  options: OpenAIClientOptions = {}\n): OpenAIContext {\n  const baseUrl = endpoint;\n  const clientContext = getClient(baseUrl, credential, options);\n  return clientContext;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { PipelinePolicy } from \"@azure/core-rest-pipeline\";\n\nexport function nonAzurePolicy(): PipelinePolicy {\n  const policy: PipelinePolicy = {\n    name: \"openAiEndpoint\",\n    sendRequest: (request, next) => {\n      const obj = new URL(request.url);\n      const parts = obj.pathname.split(\"/\");\n      switch (parts[parts.length - 1]) {\n        case \"completions\":\n          if (parts[parts.length - 2] === \"chat\") {\n            obj.pathname = `${parts[1]}/chat/completions`;\n          } else {\n            obj.pathname = `${parts[1]}/completions`;\n          }\n          break;\n        case \"embeddings\":\n          obj.pathname = `${parts[1]}/embeddings`;\n          break;\n        case \"generations:submit\":\n          obj.pathname = `${parts[1]}/images/generations`;\n          break;\n        case \"transcriptions\":\n          obj.pathname = `${parts[1]}/audio/transcriptions`;\n          break;\n        case \"translations\":\n          obj.pathname = `${parts[1]}/audio/translations`;\n          break;\n      }\n      obj.searchParams.delete(\"api-version\");\n      request.url = obj.toString();\n      return next(request);\n    },\n  };\n  return policy;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Represents a credential defined by a static API key.\n */\nexport interface KeyCredential {\n  /**\n   * The value of the API key represented as a string\n   */\n  readonly key: string;\n}\n\n/**\n * A static-key-based credential that supports updating\n * the underlying key value.\n */\nexport class AzureKeyCredential implements KeyCredential {\n  private _key: string;\n\n  /**\n   * The value of the key to be used in authentication\n   */\n  public get key(): string {\n    return this._key;\n  }\n\n  /**\n   * Create an instance of an AzureKeyCredential for use\n   * with a service client.\n   *\n   * @param key - The initial value of the key to use in authentication\n   */\n  constructor(key: string) {\n    if (!key) {\n      throw new Error(\"key must be a non-empty string\");\n    }\n\n    this._key = key;\n  }\n\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newKey - The new key value to be used\n   */\n  public update(newKey: string): void {\n    this._key = newKey;\n  }\n}\n","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { OpenAIClient } from '@azure/openai';\nimport { AzureKeyCredential } from '@azure/openai';\nimport packagejson from '../package.json';\n\n\nfunction App() {\n\n  const [lastPrompt, setLastPrompt] = useState('')\n  const [responseData, setResponseData] = useState(null);\n\n  async function sendChatGptRequest(prompt) {\n\n    const client = new OpenAIClient(process.env.REACT_APP_AZURE_OPENAI_ENDPOINT, new AzureKeyCredential(process.env.REACT_APP_AZURE_OPENAI_KEY));\n    const deploymentId = \"gpt35\";\n    const messages = [\n      { role: \"system\", content: \"You are a helpful assistant. You get prompts which get generated by speech input through a microphone.\" },\n      { role: \"user\", content: prompt }\n    ]\n    const result = await client.getChatCompletions(deploymentId, messages);\n    const response = result.choices[0].message.content;\n    console.log(\"This is the type: \")\n    console.log(typeof response);\n    console.log(\"This is the response!\");\n    console.log(response);\n    setResponseData(response);\n    return response;\n  }\n\n  async function sttFromMic() {\n\n    return new Promise((resolve, reject) => {\n\n      const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\n      const speechConfig = sdk.SpeechConfig.fromSubscription(process.env.REACT_APP_SPEECH_KEY, process.env.REACT_APP_SPEECH_REGION);\n      speechConfig.speechRecognitionLanguage = 'en-US';\n\n      const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\n      const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\n\n      setResponseData('speak into your microphone...')\n\n      recognizer.recognizeOnceAsync(result => {\n        if (result.reason === sdk.ResultReason.RecognizedSpeech) {\n          console.log(`RECOGNIZED PROMPT: Text=${result.text}`)\n          setLastPrompt(result.text);\n          resolve(result.text);\n        } else {\n          const errorMessage = 'ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.';\n          setLastPrompt(errorMessage);\n          textToSpeech(errorMessage);\n          resolve(null);\n        }\n      });\n    });\n  }\n\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  function textToSpeech(textToSpeak) {\n    const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\n    const speechConfig = sdk.SpeechConfig.fromSubscription(process.env.REACT_APP_SPEECH_KEY, process.env.REACT_APP_SPEECH_REGION);\n    const myPlayer = new sdk.SpeakerAudioDestination();\n    myPlayer.onAudioStart = () => {\n      setIsPlaying(true);\n      console.log(\"Set started playing right now!\");\n    }\n\n    myPlayer.onAudioEnd = () => {\n      setIsPlaying(false);\n      console.log(\"Set stopped playing right now!\");\n    }\n\n    const audioConfig = sdk.AudioConfig.fromSpeakerOutput(myPlayer);\n\n    let synthesizer = new sdk.SpeechSynthesizer(speechConfig, audioConfig);\n\n    //const textToSpeak = 'This is an example of speech synthesis for a long passage of text. Pressing the mute button should pause/resume the audio output.';\n    console.log(`speaking text: ${textToSpeak}...`);\n\n    synthesizer.speakTextAsync(\n      textToSpeak,\n      result => {\n        let text;\n        if (result.reason === sdk.ResultReason.SynthesizingAudioCompleted) {\n          text = `synthesis finished for \"${textToSpeak}\".\\n`\n        } else if (result.reason === sdk.ResultReason.Canceled) {\n          text = `synthesis failed. Error detail: ${result.errorDetails}.\\n`\n        }\n        synthesizer.close();\n        synthesizer = undefined;\n        console.log(text);\n      },\n      function (err) {\n        console.log(`Error: ${err}.\\n`);\n\n        synthesizer.close();\n        synthesizer = undefined;\n      });\n\n  }\n\n  const audioStartRef = React.useRef(new Audio('/ChatGPT-voice-assistant/Recording_Sound_Start.m4a'));\n  const audioEndRef = React.useRef(new Audio('/ChatGPT-voice-assistant/Recording_Sound_End.m4a'));\n\n  async function runWorkFlow() {\n\n    audioStartRef.current.play();\n\n    const generatedPrompt = await sttFromMic();\n    audioEndRef.current.play();\n\n    if (generatedPrompt) {\n      const response = await sendChatGptRequest(generatedPrompt);\n\n      //requestGotSent = true;\n      //console.log(requestGotSent);\n      //textToSpeech(response);\n    } else {\n      console.log(\"No request got sent to ChatGPT\");\n    }\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/*<div>To create a prompt, press the first button below and start speaking. To hear the response, press the second button.</div>*/}\n        <h6 className='instruction-header'>To create a prompt, press the first button below and start speaking. To hear the response, press the second button.</h6>\n      </header>\n      <div className='App-body'>\n        <button\n          style={{ color: \"white\", width: \"100%\", maxWidth: '20rem', height: \"5vh\", backgroundColor: \"#F05039\", border: \"2px solid white\", boxShadow: \"none\", margin: '20px' }}\n          onClick={runWorkFlow}\n          disabled={isPlaying}\n        >\n          Speak in your prompt\n        </button>\n        <button\n          style={{ color: \"white\", width: \"100%\", maxWidth: '20rem', height: \"5vh\", backgroundColor: \"#1F449C\", border: \"2px solid white\", boxShadow: \"none\" }}\n          onClick={() => textToSpeech(responseData)}\n          disabled={isPlaying}\n        >\n          Play ChatGPT response\n        </button>\n        <div className='chat'>\n          <div className='header-chat'>\n            <h4>Prompt:</h4>\n            <h4>Answer from ChatGPT:</h4>\n          </div>\n          <div className='content-chat'>\n            <div className='chat-user'>\n\n              <p>{lastPrompt}</p>\n            </div>\n            <div className='chat-ai'>\n              <p>{responseData}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <footer className='App-footer'>\n        <p>Current Version: {packagejson.version}</p>\n      </footer>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"names":["core","require","StatusError","Error","constructor","res","_len","arguments","length","params","Array","_key","buffer","super","captureStackTrace","this","name","message","statusMessage","statusCode","status","json","bind","text","arrayBuffer","Object","defineProperty","get","headers","key","value","entries","toLowerCase","module","exports","mkrequest","statusCodes","method","encoding","baseurl","async","_url","body","_headers","undefined","parsed","URL","username","Authorization","btoa","password","protocol","host","pathname","search","concat","ArrayBuffer","isView","JSON","stringify","Headers","resp","fetch","has","encodings","Set","args","forEach","arg","toUpperCase","msg","startsWith","add","isArray","code","size","randomUUID","crypto","getRandomValues","rnds8","Uint8Array","rng","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","options","buf","native","rnds","random","createGuid","uuid","createNoDashGuid","replace","RegExp","EventType","connectivity","type","PromiseState","PlatformEvent","eventName","eventType","privName","privEventId","privEventTime","Date","toISOString","privEventType","privMetadata","eventId","eventTime","metadata","Contracts","throwIfNullOrUndefined","param","throwIfNull","throwIfNullOrWhitespace","trim","throwIfNullOrTooLong","maxLength","throwIfNullOrTooShort","minLength","throwIfDisposed","isDisposed","throwIfArrayEmptyOrWhitespace","array","item","throwIfFileDoesNotExist","throwIfNotUndefined","ConsoleLoggingListener","logLevelFilter","LogLevel","None","privLogPath","privEnableConsoleOutput","privLogLevelFilter","logPath","path","fs","enableConsoleOutput","enableOutput","onEvent","event","log","flag","Debug","console","debug","Info","info","Warning","warn","error","logFragments","e","prop","hasOwnProperty","valueToLog","join","ArgumentNullError","argumentName","InvalidOperationError","ObjectDisposedError","objectName","EventSource","privEventListeners","privIsDisposed","privConsoleListener","paramName","attach","onEventCallback","id","detach","Promise","resolve","attachListener","listener","attachConsoleListener","dispose","Events","setEventSource","eventSource","privInstance","instance","RiffPcmEncoder","actualSampleRate","desiredSampleRate","privActualSampleRate","privDesiredSampleRate","encode","actualAudioFrame","audioFrame","downSampleAudioFrame","audioLength","view","DataView","floatTo16BitPCM","setString","str","setUint8","charCodeAt","input","s","Math","max","min","setInt16","srcFrame","srcRate","dstRate","ratio","dstLength","round","dstFrame","Float32Array","srcOffset","dstOffset","nextSrcOffset","accum","count","PcmRecorder","stopInputOnRelease","privStopInputOnRelease","record","context","mediaStream","outputStream","waveStreamEncoder","sampleRate","micInput","createMediaStreamSource","attachScriptProcessor","scriptNode","bufferSize","createScriptProcessor","audioSampleRate","onaudioprocess","inputFrame","inputBuffer","getChannelData","isClosed","waveFrame","writeStreamChunk","isEnd","timeReceived","now","connect","destination","privMediaResources","scriptProcessorNode","source","stream","connectWorkletToMicInput","workletNode","AudioWorkletNode","port","onmessage","ev","data","skipAudioWorklet","privSpeechProcessorScript","audioWorklet","audioUrl","getAudioWorkerUrl","addModule","then","catch","blob","Blob","createObjectURL","err","releaseMediaResources","disconnect","getTracks","track","stop","setWorkletUrl","url","SpeechServiceConfig","serialize","replacement","k","call","charAt","substring","Context","Recognition","recognition","os","system","System","version","build","lang","OS","platform","Deferred","result","privResolve","reject","privReject","privPromise","promise","marshalPromiseToCallbacks","cb","val","typedError","AudioSourceEvent","audioSourceId","privAudioSourceId","AudioSourceInitializingEvent","AudioSourceReadyEvent","AudioSourceOffEvent","AudioSourceErrorEvent","privError","AudioStreamNodeEvent","audioNodeId","privAudioNodeId","AudioStreamNodeAttachingEvent","AudioStreamNodeAttachedEvent","AudioStreamNodeDetachedEvent","AudioStreamNodeErrorEvent","List","list","privSubscriptionIdCounter","privAddSubscriptions","privRemoveSubscriptions","privDisposedSubscriptions","privDisposeReason","privList","itemIndex","first","last","insertAt","index","unshift","splice","triggerSubscriptions","removeFirst","removeAt","removeLast","remove","removedElements","clear","onAdded","addedCallback","subscriptionId","onRemoved","removedCallback","onDisposed","disposedCallback","seperator","toArray","cloneCopy","any","callback","where","all","select","selectList","filteredList","orderBy","compareFn","orderedArray","sort","orderByDesc","a","b","clone","concatArray","reason","subscriptions","SubscriberType","Queue","privPromiseStore","privIsDrainInProgress","privIsDisposing","privDetachables","privSubscribers","drain","enqueue","throwIfDispose","enqueueFromPromise","dequeue","deferredSubscriber","deferral","Dequeue","peek","Peek","drainAndDispose","pendingItemProcessor","subs","detachable","promiseArray","wrapper","finally","lists","subscriber","dequeuedItem","AudioFormatTag","Stream","streamId","privIsWriteEnded","privIsReadEnded","privId","privReaderQueue","isReadEnded","close","streamChunk","throwIfClosed","read","__awaiter","readEnded","ChunkedArrayBufferStream","targetChunkSize","privTargetChunkSize","privNextBufferReadyBytes","chunk","byteLength","bytesCopiedFromBuffer","privNextBufferToWrite","privNextBufferStartTime","bytesToCopy","targetView","sourceView","set","AudioStreamFormat","getDefaultInputFormat","AudioStreamFormatImpl","getWaveFormat","samplesPerSecond","bitsPerSample","channels","format","getWaveFormatPCM","samplesPerSec","PCM","isWavFormat","formatTag","ALaw","MuLaw","avgBytesPerSec","blockAlign","privHeader","setUint32","setUint16","getAudioContext","AudioContext","window","webkitAudioContext","navigator","mediaDevices","getSupportedConstraints","header","MicAudioSource","privRecorder","deviceId","privStreams","privOutputChunkSize","AUDIOFORMAT","privEvents","privMediaStream","privIsClosing","turnOn","privInitializeDeferral","createAudioContext","nav","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","constraints","successCallback","errorCallback","next","active","audio","video","errorMsg","privContext","state","resume","listen","turnOff","destroyAudioContext","events","deviceInfo","getMicrophoneLabel","label","bitspersample","channelcount","Unknown","manufacturer","model","samplerate","Microphones","setProperty","defaultMicrophoneName","privMicrophoneLabel","microphoneDeviceId","getSettings","deferred","enumerateDevices","devices","device","hasClose","suspend","FileAudioSource","file","filename","privHeaderEnd","privSource","privFilename","privAudioFormatPromise","readHeader","lastIndexOf","upload","File","headerResult","processHeader","getWord","String","fromCharCode","getUint8","formatSize","getInt32","channelCount","getUint16","getUint32","pos","maxHeaderSize","reader","FileReader","onload","target","readAsArrayBuffer","h","byteOffset","onerror","processFile","buff","fileBuffer","c","PullAudioInputStreamCallback","SpeechSynthesisOutputFormat","AudioInputStream","createPushStream","PushAudioInputStream","create","createPullStream","PullAudioInputStream","PushAudioInputStreamImpl","privFormat","privStream","write","dataBuffer","toBuffer","Buffer","alloc","PullAudioInputStreamImpl","privCallback","privIsClosed","privBufferSize","transmitBuff","totalBytes","readBuff","pulledBytes","Int8Array","BackgroundEvent","AudioOutputFormatImpl","audioFormatString","requestAudioFormatString","hasHeader","priAudioFormatString","priRequestAudioFormatString","priHasHeader","fromSpeechSynthesisOutputFormat","speechSynthesisOutputFormat","getDefaultOutputFormat","fromSpeechSynthesisOutputFormatString","SpeechSynthesisOutputFormatToString","speechSynthesisOutputFormatString","Siren","MP3","SILKSkype","OGG_OPUS","WEBM_OPUS","OPUS","FLAC","updateHeader","addHeader","tmp","Raw8Khz8BitMonoMULaw","Riff16Khz16KbpsMonoSiren","Audio16Khz16KbpsMonoSiren","Audio16Khz32KBitRateMonoMp3","Audio16Khz128KBitRateMonoMp3","Audio16Khz64KBitRateMonoMp3","Audio24Khz48KBitRateMonoMp3","Audio24Khz96KBitRateMonoMp3","Audio24Khz160KBitRateMonoMp3","Raw16Khz16BitMonoTrueSilk","Riff16Khz16BitMonoPcm","Riff8Khz16BitMonoPcm","Riff24Khz16BitMonoPcm","Riff8Khz8BitMonoMULaw","Raw16Khz16BitMonoPcm","Raw24Khz16BitMonoPcm","Raw8Khz16BitMonoPcm","Ogg16Khz16BitMonoOpus","Ogg24Khz16BitMonoOpus","Raw48Khz16BitMonoPcm","Riff48Khz16BitMonoPcm","Audio48Khz96KBitRateMonoMp3","Audio48Khz192KBitRateMonoMp3","Ogg48Khz16BitMonoOpus","Webm16Khz16BitMonoOpus","Webm24Khz16BitMonoOpus","Webm24Khz16Bit24KbpsMonoOpus","Raw24Khz16BitMonoTrueSilk","Raw8Khz8BitMonoALaw","Riff8Khz8BitMonoALaw","Audio16Khz16Bit32KbpsMonoOpus","Audio24Khz16Bit48KbpsMonoOpus","Audio24Khz16Bit24KbpsMonoOpus","Raw22050Hz16BitMonoPcm","Riff22050Hz16BitMonoPcm","Raw44100Hz16BitMonoPcm","Riff44100Hz16BitMonoPcm","AudioOutputStream","PullAudioOutputStream","PullAudioOutputStreamImpl","intView","privLastChunkView","tmpBuffer","PushAudioOutputStream","PushAudioOutputStreamImpl","AudioFormatToMimeType","SpeakerAudioDestination","audioDestinationId","privPlaybackStarted","privAppendingToBuffer","privMediaSourceOpened","privBytesReceived","privIsPaused","privAudioBuffer","updateSourceBuffer","privAudioOutputStream","privSourceBuffer","handleSourceBufferUpdateEnd","receivedAudio","audioBlob","privAudio","src","notifyPlayback","onAudioEnd","mimeType","MediaSource","isTypeSupported","Audio","privMediaSource","load","onsourceopen","duration","addSourceBuffer","onupdate","onupdateend","onupdatestart","volume","_b","_a","mute","muted","unmute","currentTime","pause","play","internalAudio","sourceBufferAvailable","binary","shift","appendBuffer","canEndStream","endOfStream","onAudioStart","onended","readyState","updating","PushAudioOutputStreamCallback","CancellationReason","OutputFormat","ResultReason","AudioFileWriter","privFd","privAudioFormat","headerOffset","privWriteStream","fd","start","autoClose","on","bytesWritten","end","AudioConfig","fromDefaultMicrophoneInput","pcmRecorder","AudioConfigImpl","fromMicrophoneInput","fromWavFileInput","fromStreamInput","audioStream","MediaStream","fromDefaultSpeakerOutput","AudioOutputConfigImpl","fromSpeakerOutput","player","fromAudioFileOutput","fromStreamOutput","getProperty","def","privDestination","KeywordRecognitionModel","privDisposed","fromFile","fileName","fromStream","SessionEventArgs","sessionId","privSessionId","RecognitionEventArgs","privOffset","IntentRecognitionEventArgs","privResult","RecognitionResult","resultId","language","languageDetectionConfidence","errorDetails","properties","privResultId","privReason","privText","privDuration","privLanguage","privLanguageDetectionConfidence","privErrorDetails","privJson","privProperties","SpeechRecognitionResult","speakerId","privSpeakerId","IntentRecognitionResult","intentId","privIntentId","LanguageUnderstandingModel","fromEndpoint","uri","hostname","langModelImp","LanguageUnderstandingModelImpl","firstDot","indexOf","region","substr","lastSegment","appId","subscriptionKey","searchParams","fromAppId","fromSubscription","SpeechRecognitionEventArgs","ConversationTranscriptionEventArgs","MeetingTranscriptionEventArgs","CancellationEventArgsBase","errorCode","privErrorCode","SpeechRecognitionCanceledEventArgs","TranslationRecognitionEventArgs","TranslationSynthesisEventArgs","TranslationRecognitionResult","translations","privTranslations","fromSpeechRecognitionResult","TranslationSynthesisResult","OutputFormatPropertyName","CancellationErrorCodePropertyName","ServicePropertiesPropertyName","ForceDictationPropertyName","AutoDetectSourceLanguagesOpenRangeOptionName","PropertyId","ProfanityOption","MessageType","ConnectionState","CancellationErrorCode","RecognitionCompletionStatus","PropertyCollection","privKeys","privValues","keyToUse","n","clonedMap","mergeTo","destinationCollection","keys","SpeechConfig","speechImpl","SpeechConfigImpl","SpeechServiceConnection_Region","SpeechServiceConnection_IntentRegion","SpeechServiceConnection_Key","endpoint","SpeechServiceConnection_Endpoint","href","fromHost","hostName","SpeechServiceConnection_Host","fromAuthorizationToken","authorizationToken","speechRecognitionLanguage","outputFormat","Simple","endPoint","SpeechServiceAuthorization_Token","SpeechServiceConnection_RecoLanguage","autoDetectSourceLanguages","SpeechServiceConnection_AutoDetectSourceLanguages","endpointId","SpeechServiceConnection_EndpointId","setProxy","proxyHostName","proxyPort","proxyUserName","proxyPassword","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","setServiceProperty","currentProperties","parse","setProfanity","profanity","SpeechServiceResponse_ProfanityOption","enableAudioLogging","SpeechServiceConnection_EnableAudioLogging","requestWordLevelTimestamps","SpeechServiceResponse_RequestWordLevelTimestamps","enableDictation","ret","speechSynthesisLanguage","SpeechServiceConnection_SynthLanguage","speechSynthesisVoiceName","SpeechServiceConnection_SynthVoice","voice","SpeechServiceConnection_SynthOutputFormat","SpeechTranslationConfig","SpeechTranslationConfigImpl","privSpeechProperties","addTargetLanguage","languages","targetLanguages","includes","SpeechServiceConnection_TranslationToLanguages","split","voiceName","SpeechServiceConnection_TranslationVoice","ReplayableAudioNode","audioSource","bytesPerSecond","privBuffers","privReplayOffset","privLastShrinkOffset","privBufferStartOffset","privBufferSerial","privBufferedBytes","privReplay","privLastChunkAcquiredTime","privAudioNode","privBytesPerSecond","offsetToSeek","bytesToSeek","retVal","BufferEntry","replay","shrinkBuffers","findTimeAtOffset","startOffset","endOffset","serial","Timeout","scheduledTimeoutFunctions","Map","unhandledRequests","workerUrl","worker","Worker","addEventListener","_ref","isCallNotification","timerId","idOrFunc","unhandledTimerId","delete","isClearResponse","clearTimeout","postMessage","setTimeout","func","delay","performance","loadWorkerTimers","workerTimers","timers","ConnectionMessage","messageType","privBody","Text","Binary","privMessageType","privHeaders","privSize","binaryBody","textBody","ServiceEvent","jsonstring","privJsonResult","jsonString","ConnectionEvent","connectionId","privConnectionId","ConnectionStartEvent","privUri","ConnectionEstablishedEvent","ConnectionClosedEvent","privStatusCode","ConnectionErrorEvent","privMessage","privType","ConnectionEstablishErrorEvent","statuscode","ConnectionMessageReceivedEvent","networkReceivedTimeISO","privNetworkReceivedTime","networkReceivedTime","ConnectionMessageSentEvent","networkSentTimeISO","privNetworkSentTime","networkSentTime","SpeechRecognitionEvent","requestId","privRequestId","RecognitionTriggeredEvent","ListeningStartedEvent","ConnectingToServiceEvent","authFetchEventid","privAuthFetchEventid","RecognitionStartedEvent","authFetchEventId","privAuthFetchEventId","ServiceTelemetryListener","privListeningTriggerMetric","privMicMetric","privConnectionEstablishMetric","privReceivedMessages","privPhraseLatencies","privHypothesisLatencies","phraseReceived","audioReceivedTime","hypothesisReceived","End","Name","Start","privMicStartTime","privConnectionStartTime","Id","getConnectionError","maxMessagesToSend","getTelemetry","metrics","PhraseLatencyMs","FirstHypothesisLatencyMs","telemetry","Metrics","ReceivedMessages","hasTelemetry","RecognitionMode","SpeechResultFormat","RequestSession","privIsAudioNodeDetached","privIsRecognizing","privIsSpeechEnded","privTurnStartAudioOffset","privLastRecoOffset","privHypothesisReceived","privBytesSent","privRecognitionBytesSent","privRecogNumber","privInTurn","privConnectionAttempts","privTurnDeferral","turnCompletionPromise","isSpeechEnded","isRecognizing","currentTurnAudioOffset","recogNumber","numConnectionAttempts","bytesSent","recognitionBytesSent","listenForServiceTelemetry","privServiceTelemetryListener","startNewRecognition","onAudioSourceAttachCompleted","audioNode","isError","onComplete","onPreConnectionStart","onAuthCompleted","onConnectionEstablishCompleted","onServiceTurnEndResponse","continuousRecognition","onSpeechContext","onServiceTurnStartResponse","onHypothesis","onPhraseRecognized","onServiceRecognized","onAudioSent","onRetryConnection","onStopRecognizing","onSpeechEnded","detachAudioNode","DynamicGrammarBuilder","addPhrase","phrase","privPhrases","clearPhrases","addReferenceGrammar","grammar","privGrammars","clearGrammars","generateGrammarObject","retObj","ReferenceGrammars","retPhrases","Groups","Type","Items","SpeechContext","dynamicGrammar","privDynamicGrammar","getSection","sectionName","setSection","setPronunciationAssessmentParams","contentAssessmentTopic","isSpeakerDiarizationEnabled","phraseDetection","enrichment","pronunciationAssessment","mode","setWordLevelTimings","phraseOutput","detailed","contentAssessment","topic","setDetailedOutputFormat","setSpeakerDiarizationAudioOffsetMs","audioOffsetMs","speakerDiarization","toJSON","dgi","AgentConfig","toJsonString","iPrivConfig","RecognizerConfig","speechServiceConfig","parameters","privSpeechServiceConfig","privParameters","privMaxRetryCount","parseInt","privLanguageIdMode","SpeechServiceConnection_LanguageIdMode","privEnableSpeakerId","recognitionMode","privRecognitionMode","privRecognitionActivityTimeout","Interactive","recognitionActivityTimeout","isContinuousRecognition","languageIdMode","recognitionEndpointVersion","SpeechServiceConnection_RecognitionEndpointVersion","sourceLanguageModels","models","modelsExist","customProperty","modelId","maxRetryCount","SpeechDetected","privSpeechStartDetected","fromJSON","Offset","HeaderNames","AuthKey","SpIDAuthKey","ConnectionId","ContentType","CustomCommandsAppId","Path","RequestId","RequestStreamId","RequestTimestamp","SpeechConnectionMessage","contentType","additionalHeaders","headerName","privPath","privContentType","privStreamId","privAdditionalHeaders","fromConnectionMessage","ServiceRecognizerBase","authentication","connectionFactory","recognizerConfig","recognizer","privConnectionConfigurationPromise","privConnectionPromise","privSetTimeout","privIsLiveAudio","privAverageBytesPerMs","recognizeOverride","recognizeSpeaker","disconnectOverride","receiveMessageOverride","sendPrePayloadJSONOverride","postConnectImplOverride","configConnectionOverride","handleSpeechPhraseMessage","handleSpeechHypothesisMessage","privMustReportEndOfStream","privAuthentication","privConnectionFactory","privAudioSource","privRecognizerConfig","privRecognizer","privRequestSession","privConnectionEvents","privServiceEvents","privSpeechContext","privAgentConfig","WebWorkerLoadType","connectionEvents","connectionEvent","connectionClosedEvent","cancelRecognitionLocal","BadRequestParameters","ConnectionFailure","privDiarizationSessionId","setLanguageIdJson","setOutputDetailLevelJson","setTranslationJson","translationVoice","action","onSuccess","output","interimResults","languageToVoiceMap","defaultVoices","setSpeechSegmentationTimeoutJson","speechSegmentationTimeout","Speech_SegmentationSilenceTimeoutMs","Conversation","Dictation","segmentationSilenceTimeoutMs","segmentation","sourceLanguages","speechContextLidMode","Priority","onUnknown","resultType","phraseResults","customModels","onInterim","Detailed","toLocaleLowerCase","speechContext","agentConfig","conversationTranslatorToken","token","ConversationTranslator_Token","voiceProfileType","SpeechServiceConnection_SpeakerIdMode","auth","connection","serviceEvents","recognize","recoMode","errorCallBack","privSuccessCallback","privErrorCallback","conPromise","connectImpl","audioStreamNode","sessionStartEventArgs","sessionStarted","receiveMessage","sendAudio","RuntimeError","stopRecognizing","sendFinalAudio","connectAsync","NoError","sendMessage","sendNetworkMessage","payload","fetchConnection","send","activityTemplate","messagePayload","privActivityTemplate","sendTelemetryData","telemetryData","telemetryDataEnabled","cancellationReason","cancelRecognition","privServiceHasSentMessage","connectionMessage","speechStartDetected","speechStartEventArgs","speechStopDetected","speechStopEventArgs","speechEndDetected","EndOfStream","sessionStopEventArgs","sessionStopped","sendPrePayloadJSON","processTypeSpecificMessages","updateSpeakerDiarizationAudioOffset","sendSpeechContext","generateNewRequestId","speechContextJson","noOp","sendWaveHeader","Disconnected","retryableConnect","sendSpeechServiceConfig","requestSession","SpeechServiceConfigJson","DisableReferenceChannel","MicSpec","configureConnection","audioFormat","nextSendTime","fastLaneSizeMs","maxSendUnthrottledBytes","startRecogNumber","readAndUploadCycle","audioStreamChunk","sendDelay","isUnAuthorized","lastStatusCode","lastReason","authPromise","fetchOnExpiry","response","open","delayMs","writeBufferToConsole","out","readView","padStart","AuthInfo","privHeaderName","privToken","CognitiveSubscriptionKeyAuthentication","privAuthInfo","CognitiveTokenAuthentication","fetchCallback","fetchOnExpiryCallback","privFetchCallback","privFetchOnExpiryCallback","privTokenPrefix","Recognizer","audioConfig","implCommonRecognizerSetup","errorCb","internalData","privReco","disposing","telemetryEnabled","enableTelemetry","enabled","osPlatform","osName","osVersion","userAgent","appVersion","createRecognizerConfig","createServiceRecognizer","getAuthFromProperties","recognizeOnceAsyncImpl","implRecognizerStop","startContinuousRecognitionAsyncImpl","stopContinuousRecognitionAsyncImpl","ConnectionOpenResponse","RawWebsocketMessage","privPayload","__proto__","textContent","binaryContent","WebsocketMessageAdapter","messageFormatter","proxyInfo","enableCompression","privMessageFormatter","privConnectionState","privEnableCompression","privLastErrorReceived","privConnectionEstablishDeferral","privCertificateValidatedDeferral","Connecting","WebSocket","forceNpmWebSocket","perMessageDeflate","agent","getAgent","privWebsocketClient","ws","binaryType","privReceivingMessageQueue","privDisconnectDeferral","privSendMessageQueue","processSendQueue","onopen","Connected","onclose","onClose","rawMessage","toConnectionMessage","messageSendStatusDeferral","messageSendDeferral","Message","sendStatusDeferral","sendRawMessage","sendItem","isWebsocketOpen","stack","closeReason","pendingSendItem","itemToSend","sendError","Agent","createConnection","HostName","Port","GetProxyAgent","httpProxyOptions","UserName","Password","requestOCSP","HttpsProxyAgent","request","socketPromise","assign","servername","baseAgent","socket","secureEndpoint","tls","net","OPEN","WebsocketConnection","queryParameters","queryParams","encodeURIComponent","privConnectionMessageAdapter","ProxyInfo","privProxyHostName","privProxyPort","privProxyUserName","privProxyPassword","fromParameters","fromRecognizerConfig","config","QueryParameterNames","BotId","CustomSpeechDeploymentId","CustomVoiceDeploymentId","EnableAudioLogging","EnableLanguageId","EnableWordLevelTimestamps","EndSilenceTimeoutMs","SegmentationSilenceTimeoutMs","Format","InitialSilenceTimeoutMs","Language","Profanity","RequestBotStatusMessages","StableIntermediateThreshold","StableTranslation","TestHooks","Postprocessing","CtsMeetingId","CtsDeviceId","CtsIsParticipant","EnableAvatar","ConnectionFactoryBase","getHostSuffix","setCommonUrlParams","SpeechServiceConnection_EndSilenceTimeoutMs","SpeechServiceConnection_InitialSilenceTimeoutMs","SpeechServiceResponse_PostProcessingOption","SpeechServiceResponse_StablePartialResultThreshold","parameterName","propertyId","setUrlParameter","serviceProperties","propId","WebsocketMessageFormatter","textMessage","headerBodySplit","parseHeaders","binaryMessage","dataView","headerLength","getInt16","headersString","getInt8","makeHeaders","content","headerBuffer","stringToArrayBuffer","headerInt8Array","payloadInt8Array","bodyInt8Array","headerMatches","match","separatorIndex","headerValue","SpeechConnectionFactory","interactiveRelativeUri","conversationRelativeUri","dictationRelativeUri","universalUri","authInfo","hostSuffix","webSocketConnection","SpeechServiceConnection_Url","SpeechHypothesis","privSpeechHypothesis","Duration","PrimaryLanguage","LanguageDetectionConfidence","Confidence","SpeakerId","SynthesisStatus","RecognitionStatus","SimpleSpeechPhrase","privSimpleSpeechPhrase","DisplayText","EnumTranslation","implTranslateRecognitionResult","recognitionStatus","Canceled","Success","RecognizedSpeech","NoMatch","InitialSilenceTimeout","BabbleTimeout","EndOfDictation","BadRequest","Forbidden","implTranslateCancelResult","implTranslateCancelErrorCode","ServiceError","TooManyRequests","implTranslateErrorDetails","cancellationErrorCode","DetailedSpeechPhrase","privDetailedSpeechPhrase","getJsonWithCorrectedOffsets","baseOffset","NBest","firstWordOffset","Words","details","word","DisplayWords","Display","SpeechServiceRecognizer","speechRecognizer","privSpeechRecognizer","resultProps","SpeechServiceResponse_JsonResult","processed","hypothesis","RecognizingSpeech","recognizing","simple","resultReason","cancelReason","totalOffset","offsetCorrectedJson","recognized","canceled","cancelEvent","SpeechRecognizer","speechConfig","speechConfigImpl","privDisposedRecognizer","FromConfig","autoDetectSourceLanguageConfig","recognizeOnceAsync","startContinuousRecognitionAsync","stopContinuousRecognitionAsync","startKeywordRecognitionAsync","stopKeywordRecognitionAsync","_super","IntentConnectionFactory","getSpeechRegionFromIntentRegion","intentRegion","AddedLmIntent","modelImpl","intentName","IntentRecognitionCanceledEventArgs","IntentResponse","privIntentResponse","query","topScoringIntent","entities","IntentServiceRecognizer","privIntentRecognizer","privIntentDataSent","setIntents","addedIntents","umbrellaIntent","privAddedLmIntents","privUmbrellaIntent","speechHypothesis","RecognizingIntent","sendEvent","privPendingIntentArgs","intentResponse","intent","addedIntent","RecognizedIntent","LanguageUnderstandingServiceResponse_JsonResult","defferal","VoiceProfileType","TranslationStatus","IntentRecognizer","configImpl","privAddedIntents","privDisposedIntentRecognizer","buildSpeechContext","Intent","addIntent","simplePhrase","addIntentWithLanguageModel","addAllIntents","refGrammers","addedLmIntent","grammer","provider","StringUtils","formatString","replacements","formatted","appendToFormatted","appendToKey","appendFunc","TranslationConnectionFactory","getEndpointUrl","setQueryParams","returnRegionPlaceholder","endpointUrl","from","to","scenario","SpeechServiceResponse_TranslationRequestStablePartialResult","features","TranslationRecognitionCanceledEventArgs","sessionid","privCancelReason","Translations","privMap","ConversationServiceRecognizer","handleSpeechPhrase","handleSpeechHypothesis","handleRecognizedCallback","handleRecognizingCallback","processSpeechMessages","simpleOffset","TranslationHypothesis","privTranslationHypothesis","Translation","fromTranslationResponse","translationHypothesis","TranslationPhrase","privTranslationPhrase","translationResponse","SpeechPhrase","TranslationSynthesisEnd","privSynthesisEnd","Status","FailureReason","MetadataType","TranslationServiceRecognizer","translationRecognizer","privTranslationRecognizer","onConnection","handleTranslationPhrase","translatedPhrase","fireEventForResult","handleTranslationHypothesis","resultProperties","sendSynthesisAudio","synthEnd","synthesizing","retEvent","canceledResult","serviceResult","confidence","translation","TranslatedSpeech","TranslatingSpeech","SynthesizingAudioCompleted","SynthesizingAudio","SynthesisResult","SpeechSynthesisResult","audioData","audioDuration","privAudioData","privAudioDuration","SpeechSynthesisWordBoundaryEventArgs","audioOffset","wordLength","textOffset","boundaryType","privAudioOffset","privWordLength","privTextOffset","privBoundaryType","SpeechSynthesisBookmarkEventArgs","SpeechSynthesisVisemeEventArgs","visemeId","animation","privVisemeId","privAnimation","SynthesisAudioMetadata","privSynthesisAudioMetadata","Metadata","SpeechSynthesisEvent","SynthesisTriggeredEvent","sessionAudioDestinationId","turnAudioDestinationId","privSessionAudioDestinationId","privTurnAudioDestinationId","audioSessionDestinationId","audioTurnDestinationId","ConnectingToSynthesisServiceEvent","SynthesisStartedEvent","SynthesisTurn","privIsSynthesizing","privIsSynthesisEnded","privNextSearchTextIndex","privSentenceOffset","privNextSearchSentenceIndex","audioOutputFormat","privAudioOutputFormat","isSynthesisEnded","isSynthesizing","currentTextOffset","currentSentenceOffset","bytesReceived","extraProperties","privWebRTCSDP","TalkingAvatarService_WebRTC_SDP","getAllReceivedAudio","privReceivedAudio","readAllAudioFromStream","getAllReceivedAudioWithHeader","privReceivedAudioWithHeader","startNewSynthesis","rawText","isSSML","audioDestination","privRawText","privIsSSML","privPartialVisemeAnimation","privTurnAudioDestination","onServiceResponseMessage","responseJson","webrtc","connectionString","onAudioChunkReceived","onTextBoundaryEvent","updateTextOffset","Data","onVisemeMetadataReceived","AnimationChunk","onSessionEnd","constructSynthesisResult","audioBuffer","onStopSynthesizing","getAndClearVisemeAnimation","isXmlTag","WordBoundary","withinXmlTag","idx","SynthesisContext","setSynthesisSection","speechSynthesizer","synthesisSection","buildSynthesisContext","metadataOptions","bookmarkEnabled","bookmarkReached","punctuationBoundaryEnabled","SpeechServiceResponse_RequestPunctuationBoundary","wordBoundary","sentenceBoundaryEnabled","SpeechServiceResponse_RequestSentenceBoundary","sessionEndEnabled","visemeEnabled","visemeReceived","wordBoundaryEnabled","SpeechServiceResponse_RequestWordBoundary","autoDetection","autoDetectSourceLanguage","SynthesisAdapterBase","synthesizerConfig","speakOverride","connectImplOverride","privSynthesizerConfig","privSessionAudioDestination","privSynthesisTurn","privSynthesisContext","cancelSynthesisLocal","synthesisContext","Speak","ssml","privSynthesizer","buildSsml","sendSynthesisContext","sendSsmlMessage","onSynthesisStarted","stopSpeaking","cancelSynthesis","_cancellationReason","onSynthesisCancelled","_connectionMessage","onSynthesizing","metadataList","SentenceBoundary","wordBoundaryEventArgs","Length","BoundaryType","onWordBoundary","Bookmark","bookmarkEventArgs","onBookmarkReached","Viseme","IsLastAnimation","visemeEventArgs","VisemeId","onVisemeReceived","AvatarSignal","onAvatarEvent","SessionEnd","onSynthesisCompleted","setSynthesisContextSynthesisSection","synthesisContextJson","setSpeechConfigSynthesisSection","_metadata","_requestId","_audio","_result","_wordBoundaryEventArgs","_visemeEventArgs","_bookmarkEventArgs","ConnectionMessageImpl","privConnectionMessage","Speech_SessionId","find","isTextMessage","isBinaryMessage","TextMessage","ConnectionEventArgs","ConnectionMessageEventArgs","ServiceEventArgs","privEventName","Connection","fromRecognizer","recoBase","privInternalData","setupEvents","fromSynthesizer","synthesizer","synthBase","openConnection","closeConnection","setMessageProperty","propertyName","propertyValue","sendMessageAsync","success","privEventListener","connected","disconnected","messageSent","messageReceived","privServiceEventListener","receivedServiceMessage","NoMatchReason","MessageDataStreamType","TranslationRecognizer","privDisposedTranslationRecognizer","speechTranslationConfig","speechTranslationConfigImpl","removeTargetLanguage","updateLanguages","conn","NoMatchDetails","fromResult","simpleSpeech","NotRecognized","InitialBabbleTimeout","CancellationDetailsBase","ErrorCode","CancellationDetails","PhraseListGrammar","recogBase","privGrammerBuilder","addPhrases","phrases","DialogServiceConfig","applicationId","DialogTypes","BotFramework","CustomCommands","DialogServiceConfigImpl","privSpeechConfig","channel","BotFrameworkConfig","subscription","botId","botFrameworkConfig","Conversation_DialogType","Conversation_ApplicationId","resolvedHost","CustomCommandsConfig","customCommandsConfig","DialogConnectionFactory","dialogType","requestTurnStatus","Conversation_Request_Bot_Status_Messages","resourceInfix","BaseUrl","standardizedHost","endsWith","ApiKey","DialogEvent","SendingAgentContextMessageEvent","ActivityReceivedEventArgs","activity","privActivity","privAudioStream","TurnStatusResponsePayload","privMessageStatusResponse","interactionId","conversationId","TurnStatusReceivedEventArgs","turnStatus","privTurnStatus","ActivityPayloadResponse","privActivityResponse","messageDataStreamType","DialogServiceTurnState","manager","privIsCompleted","privTurnManager","resetTurnEndTimeout","processActivityPayload","TextToSpeechAudio","endAudioStream","complete","privTimeoutToken","CompleteTurn","DialogServiceTurnStateManager","privTurnMap","StartTurn","turnState","GetTurn","SpeechKeyword","privSpeechKeyword","DialogServiceAdapter","dialogServiceConnector","privDialogServiceConnector","receiveDialogMessageOverride","privTurnStateManager","listenOnce","dialogConnectImpl","configConnection","privDisconnect","privDialogAudioSource","agentConfigSent","privLastResult","terminateMessageLoop","interactionGuid","agentMessage","agentMessageJson","speechPhrase","keyword","RecognizedKeyword","audioRequestId","turn","handleResponseMessage","preAudioPromise","sendPreAudioMessages","node","privConnectionLoop","startMessageLoop","communicationCustodian","loop","turnRequestId","turnEndRequestId","sendAgentConfig","addKeywordContextData","sendAgentContext","botInfo","commandsCulture","agentConfigJson","guid","speechActivityTemplate","Conversation_Speech_Activity_Template","agentContext","channelData","agentContextJson","responseMessage","responsePayload","responseRequestId","activityPayload","updateAgentConfig","pullAudioOutputStream","activityReceived","turnStatusReceived","keywordPropertyValue","keywordOffsetPropertyValue","keywordDurationPropertyValue","keywords","keywordOffsets","keywordDurations","keywordDefinitionArray","definition","Number","clientDetectedKeywords","onReject","ServicePropertyChannel","DialogServiceConnector","dialogConfig","dialogServiceConfigImpl","isTurnComplete","buildAgentConfig","listenOnceAsync","retPromise","callbackHolder","sendActivityAsync","errCb","commType","Conversation_Agent_Connection_Id","Conversation_Conversation_Id","fromId","Conversation_From_Id","ttsAudioFormat","BaseAudioPlayer","audioContext","gainNode","autoUpdateBufferTimer","init","playAudioSample","newAudioData","ensureInitializedContext","formatAudioData","newSamplesData","samples","stopAudio","clearInterval","timerPeriod","setInterval","updateAudioBuffer","createGain","gain","startTime","formatArrayBuffer","Int16Array","Int32Array","maxValue","float32Data","bufferSource","createBufferSource","frameCount","createBuffer","channelOffset","playAudio","decodeAudioData","newBuffer","VoiceProfile","profileId","profileType","privProfileType","VoiceProfileEnrollmentResult","statusText","privDetails","enrollmentStatus","EnrollingVoiceProfile","enrollmentsCount","enrollmentsLength","enrollmentResultDetails","FromIdentificationProfileList","results","EnrolledVoiceProfile","getIdentificationDetails","FromVerificationProfileList","getVerificationDetails","parseFloat","audioSpeechLength","enrollmentsSpeechLength","identificationProfileId","remainingEnrollmentsSpeechLength","verificationProfileId","remainingEnrollmentsCount","remainingEnrollments","VoiceProfileEnrollmentCancellationDetails","VoiceProfileResult","VoiceProfileCancellationDetails","VoiceProfilePhraseResult","phraseArray","SpeakerRecognitionConnectionFactoryBase","endpointPath","scenarioToPath","SpeakerRecognitionConnectionFactory","VoiceProfileConnectionFactory","DeferralMap","getId","VoiceServiceRecognizer","privDeferralMap","privSpeakerAudioSource","SpeakerAudioSource","operation","handleCreateResponse","handleResultResponse","enrollmentResponse","handleFetchResponse","phraseResponse","handlePhrasesResponse","enrollmentReasonFrom","enrollment","createProfile","locale","createProfileDeferral","sendCreateProfile","resetProfile","profile","sendCommonRequest","deleteProfile","retrieveEnrollmentResult","privExpectedProfileId","getAllProfiles","getActivationPhrases","getPhrasesDeferral","sendPhrasesRequest","enrollProfile","enrollmentDeferral","sendBaseRequest","scenarioFrom","profileCreateRequest","TextIndependentIdentification","TextIndependentVerification","number","profileRequest","profileIds","maxPageSize","extractSpeakerContext","interimResult","progressiveDetection","passPhraseType","profiles","map","successReason","DeletedVoiceProfile","ResetVoiceProfile","profileInfo","iProfiles","profileResults","SpeakerRecognitionResultType","VoiceProfileClient","privVoiceAdapter","privDisposedVoiceAdapter","createProfileAsync","retrieveEnrollmentResultAsync","getAllProfilesAsync","getActivationPhrasesAsync","enrollProfileAsync","deleteProfileAsync","resetProfileAsync","getResult","ok","SpeakerRecognitionResult","RecognizedSpeaker","Identify","Verify","privProfileId","identificationResult","identifiedProfile","privScore","score","RecognizedSpeakers","verificationResult","recognitionResult","SpeakerRecognitionCancellationDetails","SpeakerServiceRecognizer","privSpeakerRecognizer","recognizeSpeakerOnce","privResultDeferral","privSpeakerModel","sendSpeakerRecognition","speakerContextJson","LanguageIdMode","SpeakerRecognizer","privAudioConfigImpl","privDisposedSpeakerRecognizer","recognizeSpeakerOnceAsyncImpl","SpeakerIdentificationModel","privVoiceProfiles","privProfileIds","fromProfiles","voiceProfileIds","SpeakerVerificationModel","privVoiceProfile","fromProfile","voiceProfile","TextDependentVerification","AutoDetectSourceLanguageConfig","AtStart","fromOpenRange","fromLanguages","fromSourceLanguageConfigs","configs","autoConfig","langs","Continuous","AutoDetectSourceLanguageResult","fromConversationTranscriptionResult","SourceLanguageConfig","privEndpointId","fromLanguage","RestConfigBase","requestOptions","privDefaultRequestOptions","configParams","privDefaultParams","restErrors","privRestErrors","Accept","ignoreCache","timeout","authInvalidSubscriptionKey","authInvalidSubscriptionRegion","invalidArgs","invalidCreateJoinConversationResponse","invalidParticipantRequest","permissionDeniedConnect","permissionDeniedConversation","permissionDeniedParticipant","permissionDeniedSend","permissionDeniedStart","apiVersion","authorization","clientAppId","contentTypeKey","correlationId","languageCode","nickname","roomId","sessionToken","subscriptionRegion","ConversationConnectionConfig","privHost","privApiVersion","privClientAppId","defaultLanguageCode","privDefaultLanguageCode","restPath","privRestPath","webSocketPath","privWebSocketPath","transcriptionEventKeys","privTranscriptionEventKeys","InternalParticipants","participants","meId","addOrUpdateParticipant","exists","getParticipantIndex","getParticipant","findIndex","p","deleteParticipant","filter","isHost","me","ConversationTranslatorMessageTypes","ConversationTranslatorCommandTypes","RestRequestType","RestMessageAdapter","privIgnoreCache","extractHeaderValue","headerKey","headerMap","line","parts","setHeaders","responseReceivedDeferral","requestCommand","handleRestResponse","j","d","Post","postData","bent","sendRequest","Delete","ConversationManager","privRequestParams","privErrors","privRestAdapter","createOrJoin","conversationCode","ConversationTranslator_Name","endpointHost","ConversationTranslator_Host","ConversationTranslator_CorrelationId","authToken","errMessageRaw","errorMessage","conversation","leave","ConversationConnectionMessage","privConversationMessageType","conversationMessageType","ConversationWebsocketMessageFormatter","incomingMessage","ConversationConnectionFactory","ConversationTranslationCanceledEventArgs","ConversationExpirationEventArgs","expirationTime","privExpirationTime","ConversationTranslationResult","participantId","originalLanguage","privOrigLang","originalLang","ConversationRequestSession","privRequestCompletionDeferral","completionPromise","MuteAllEventArgs","isMuted","privIsMuted","LockRoomEventArgs","isLocked","privIsLocked","ParticipantEventArgs","participant","privParticipant","ParticipantAttributeEventArgs","privKey","privValue","privParticipantId","ParticipantsListEventArgs","translateTo","profanityFilter","roomProfanityFilter","isRoomLocked","isMuteAll","privRoomId","privSessionToken","privTranslateTo","privProfanityFilter","privRoomProfanityFilter","privIsRoomLocked","privParticipants","privIsMuteAll","ConversationReceivedTranslationEventArgs","command","privCommand","CommandResponsePayload","privCommandResponse","parseCommandResponse","roomid","ParticipantsListPayloadResponse","privParticipantsPayloadResponse","parseListResponse","roomLocked","muteAll","ParticipantPayloadResponse","privParticipantPayloadResponse","parseParticipantResponse","usetts","ismuted","ishost","avatar","SpeechResponsePayload","privSpeechResponse","parseSpeechResponse","timestamp","isFinal","TextResponsePayload","privTextResponse","parseTextResponse","originalText","ConversationServiceAdapter","conversationServiceConnector","privConnectionConfigPromise","privLastPartialUtteranceId","privConversationServiceConnector","privConversationAuthentication","receiveConversationMessageOverride","conversationConnectImpl","privConversationRequestSession","privConversationConnectionFactory","privConversationIsDisposed","sendFinal","commandPayload","participantsPayload","participantsResult","displayName","isUsingTts","preferredLanguage","participantsListReceived","participantUpdateCommandReceived","muteAllCommandReceived","conversationExpiration","lockRoomCommandReceived","joinParticipantPayload","joiningParticipant","participantJoinCommandReceived","leavingParticipant","participantLeaveCommandReceived","onToken","speechPayload","conversationResultReason","TranslatedParticipantSpeech","TranslatingParticipantSpeech","speechResult","getTranslations","translationReceived","textPayload","textResult","messageRetrievalPromise","serviceResultTranslations","ParticipantChangedReason","ConversationRecognizerFactory","fromConfig","ConversationTranslatorRecognizer","serviceConfigImpl","conversationImpl","privConversation","privConnection","privClearTimeout","privSpeechRecognitionLanguage","resetConversationTimeout","PromiseToEmptyCallback","getKeepAlive","ConversationParticipantsChangedEventArgs","ConversationTranslationEventArgs","User","userId","privUserId","Participant","privAvatar","privDisplayName","privIsHost","privIsUsingTts","privPreferredLanguage","privVoice","From","createConversationAsync","arg2","arg3","arg4","ConversationImpl","onConnected","privIsConnected","privConversationTranslator","onDisconnected","onCanceled","r","onParticipantUpdateCommandReceived","updatedParticipant","translateToLanguages","participantsChanged","Updated","toParticipant","onLockRoomCommandReceived","onMuteAllCommandReceived","toParticipants","onParticipantJoinCommandReceived","newParticipant","JoinedConversation","onParticipantLeaveCommandReceived","ejectedParticipant","LeftConversation","onTranslationReceived","transcribed","transcribing","textMessageReceived","onParticipantsListReceived","privRoom","privIsReady","changeNicknameAsync","onConversationExpiration","privConversationId","privManager","Masked","hostNickname","privConfig","privTextMessageMaxLength","room","privConversationRecognizer","isMutedByHost","isConnected","transcriberRecognizer","privTranscriberRecognizer","conversationInfo","convId","part","props","conversationProperties","canSend","canSendAsHost","conversationTranslator","handleError","handleCallback","startConversationAsync","addParticipantAsync","addParticipantImplAsync","joinConversationAsync","cognitiveSpeechAuthToken","deleteConversationAsync","deleteConversationImplAsync","endConversationAsync","endConversationImplAsync","lockConversationAsync","getLockCommand","muteAllParticipantsAsync","getMuteAllCommand","muteParticipantAsync","getMuteCommand","removeParticipantAsync","removeParticipantImplAsync","getEjectCommand","unlockConversationAsync","unmuteAllParticipantsAsync","unmuteParticipantAsync","sendTextMessageAsync","getMessageCommand","setTranslatedLanguagesAsync","getSetTranslateToLanguagesCommand","getChangeNicknameCommand","connectTranscriberRecognizer","enforceAudioGating","pushConversationEvent","includeHost","TranscriberConnectionFactory","multiaudioRelativeUri","hostDefault","wordLevelTimings","ConversationTranslatorConnectionFactory","convGetter","privConvGetter","isVirtMicArrayEndpoint","convInfo","cognitiveSpeechRegion","replacementValues","CTS_VIRT_MIC_PATH","parsedUrl","connFactory","ConversationCommon","privAudioConfig","SpeechState","ConversationTranslationRecognizer","translator","privSpeechState","Inactive","privTranslator","tr","cancelSpeech","fireCancelEvent","newState","onCancelSpeech","ConversationTranslator","privIsSpeaking","privPlaceholderKey","privPlaceholderRegion","canSpeak","privCTRecognizer","param1","param2","param3","privSpeechTranslationConfig","propertyIdsToCopy","UriQueryParameter","leaveConversationAsync","startTranscribingAsync","connectTranslatorRecognizer","startContinuousRecognition","stopTranscribingAsync","ConversationTranscriberConnectionFactory","setV2UrlParams","ConversationTranscriptionResult","ConversationTranscriptionCanceledEventArgs","ConversationTranscriptionServiceRecognizer","conversationTranscriber","privConversationTranscriber","setSpeakerDiarizationJson","audioSessionId","ConversationTranscriber","Meeting","createMeetingAsync","meetingId","meetingImpl","MeetingImpl","meetingInfo","meetingProperties","startMeetingAsync","joinMeetingAsync","deleteMeetingAsync","deleteMeetingImplAsync","endMeetingAsync","endMeetingImplAsync","lockMeetingAsync","unlockMeetingAsync","meeting","pushMeetingEvent","MeetingTranscriptionCanceledEventArgs","TranscriptionServiceRecognizer","transcriber","sendTranscriptionStartJSON","sendSpeechEventAsync","sendSpeechEvent","createSpeechEventPayload","sendMeetingSpeechEventAsync","createMeetingSpeechEventPayload","IsMeetingRecognizer","_c","getMeetingInfo","getConversationInfo","speechEventJson","eventDict","attendees","TranscriberRecognizer","audioConfigImpl","isMeetingRecognizer","m","privMeeting","reco","connectMeetingCallbacks","disconnectCallbacks","SynthesisServiceType","MeetingTranscriber","leaveMeetingAsync","SynthesizerConfig","privSynthesisServiceType","Standard","avatarEnabled","synthesisServiceType","synthesisVideoSection","synthesis","SynthesisVoiceGender","SynthesisVoiceType","Synthesizer","privSynthesizing","synthesisRequestQueue","languageToDefaultVoice","XMLEncode","privAdapter","adapterSpeak","dataStream","createSynthesizerConfig","implCommonSynthesizeSetup","createSynthesisAdapter","createRestSynthesisAdapter","SynthesisRequest","SpeechSynthesisConnectionFactory","synthesisUri","hostPrefix","SpeechSynthesisEventArgs","SpeechSynthesisAdapter","privSpeechSynthesizer","synthesisStartEventArgs","SynthesizingAudioStarted","synthesisStarted","audioWithHeader","SynthesisCanceled","synthesisCompleted","SynthesisRestAdapter","getVoicesList","Get","VoiceInfo","privStyleList","privVoicePath","privLocale","Locale","privShortName","ShortName","privLocaleName","LocaleName","DisplayName","privLocalName","LocalName","privVoiceType","VoiceType","OnlineStandard","OnlineNeural","privGender","Gender","Male","Female","StyleList","style","shortName","localName","localeName","gender","voiceType","styleList","voicePath","SynthesisVoicesResult","VoicesListRetrieved","privVoices","voices","SpeechSynthesisBoundaryType","PronunciationAssessmentGradingSystem","PronunciationAssessmentGranularity","AvatarEventTypes","SpeechSynthesizer","speakTextAsync","speakImpl","speakSsmlAsync","getVoicesAsync","getVoices","IsSsml","PronunciationAssessmentConfig","referenceText","gradingSystem","FivePoint","granularity","Phoneme","enableMiscue","PronunciationAssessment_ReferenceText","PronunciationAssessment_GradingSystem","PronunciationAssessment_Granularity","PronunciationAssessment_EnableMiscue","PronunciationAssessment_Json","updateJson","PronunciationAssessment_Params","applyTo","privContentAssessmentTopic","phonemeAlphabet","privPhonemeAlphabet","enableMiscueString","nbestPhonemeCount","privNBestPhonemeCount","enableProsodyAssessment","privEnableProsodyAssessment","enableContentAssessmentWithTopic","paramsJson","dimension","ContentAssessmentResult","detailResult","privPronJson","grammarScore","ContentAssessment","GrammarScore","vocabularyScore","VocabularyScore","topicScore","TopicScore","PronunciationAssessmentResult","accuracyScore","PronunciationAssessment","AccuracyScore","pronunciationScore","PronScore","completenessScore","CompletenessScore","fluencyScore","FluencyScore","prosodyScore","ProsodyScore","contentAssessmentResult","Coordinate","x","y","AvatarVideoFormat","codec","bitrate","width","height","setCropRange","topLeft","bottomRight","cropRange","AvatarConfig","character","videoFormat","privCustomized","customized","backgroundColor","privBackgroundColor","AvatarEventArgs","description","privDescription","AvatarSynthesisAdapter","avatarSynthesizer","avatarConfig","privAvatarSynthesizer","privAvatarConfig","crop","_e","_d","_h","_g","_f","_l","_k","_j","_p","_o","_m","resolution","_q","_r","webrtcConfig","clientDescription","iceServers","talkingAvatar","background","color","avatarEventReceived","avatarEventArgs","AvatarSynthesizer","startAvatarAsync","peerConnection","privIceServers","getConfiguration","iceGatheringDone","onicegatheringstatechange","iceGatheringState","sdp","createOffer","setLocalDescription","localDescription","speak","sdpAnswerString","atob","sdpAnswer","RTCSessionDescription","setRemoteDescription","stopSpeakingAsync","stopAvatarAsync","_authentication","_synthesizerConfig","deferredResult","AvatarWebRTCConnectionResult","SDPAnswer","privSDPAnswer","Diagnostics","SetLoggingLevel","logLevel","privListener","StartConsoleOutput","StopConsoleOutput","SetLogOutputPath","aa","ca","da","ea","fa","ha","ia","document","createElement","ja","prototype","ka","la","ma","v","f","g","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","sanitizeURL","removeEmptyString","z","ra","sa","ta","pa","isNaN","qa","test","oa","removeAttribute","setAttribute","setAttributeNS","xlinkHref","ua","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","va","Symbol","for","wa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","iterator","Ka","La","A","Ma","Na","Oa","prepareStackTrace","Reflect","construct","l","Pa","tag","render","Qa","$$typeof","_context","_payload","_init","Ra","Sa","Ta","nodeName","Va","_valueTracker","getOwnPropertyDescriptor","configurable","enumerable","getValue","setValue","stopTracking","Ua","Wa","checked","Xa","activeElement","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","ab","bb","db","ownerDocument","eb","fb","selected","defaultSelected","disabled","gb","dangerouslySetInnerHTML","children","hb","ib","jb","kb","lb","mb","nb","namespaceURI","innerHTML","valueOf","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","ob","lastChild","nodeType","nodeValue","pb","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","qb","rb","sb","tb","menuitem","area","base","br","col","embed","hr","img","keygen","link","meta","wbr","ub","vb","is","wb","xb","srcElement","correspondingUseElement","parentNode","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","removeEventListener","Nb","apply","onError","Ob","Pb","Qb","Rb","Sb","Tb","Vb","alternate","return","flags","Wb","memoizedState","dehydrated","Xb","Zb","child","sibling","current","Yb","$b","ac","unstable_scheduleCallback","bc","unstable_cancelCallback","cc","unstable_shouldYield","dc","unstable_requestPaint","B","unstable_now","ec","unstable_getCurrentPriorityLevel","fc","unstable_ImmediatePriority","gc","unstable_UserBlockingPriority","hc","unstable_NormalPriority","ic","unstable_LowPriority","jc","unstable_IdlePriority","kc","lc","oc","clz32","pc","qc","LN2","rc","sc","tc","uc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","vc","xc","yc","zc","Ac","eventTimes","Cc","C","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Pc","Qc","Rc","Sc","pointerId","Tc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Vc","Wc","priority","isDehydrated","containerInfo","Xc","Yc","dispatchEvent","Zc","$c","ad","bd","cd","ReactCurrentBatchConfig","dd","ed","transition","gd","hd","Uc","stopPropagation","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","cancelable","timeStamp","isTrusted","td","ud","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","clipboardData","Jd","Ld","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","location","repeat","which","Rd","Td","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Vd","touches","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","ae","be","documentMode","ce","de","ee","fe","ge","he","ie","le","date","datetime","email","month","range","tel","time","week","ne","oe","listeners","pe","qe","re","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","nextSibling","Le","contains","compareDocumentPosition","Me","HTMLIFrameElement","contentWindow","Ne","contentEditable","Oe","focusedElem","selectionRange","documentElement","selectionStart","selectionEnd","defaultView","getSelection","extend","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","element","left","scrollLeft","top","scrollTop","focus","Pe","Qe","Re","Se","Te","Ue","Ve","We","animationend","animationiteration","animationstart","transitionend","Xe","Ye","Ze","$e","af","bf","cf","df","ef","ff","gf","hf","lf","mf","nf","Ub","D","of","pf","qf","rf","sf","capture","passive","t","J","u","w","F","tf","uf","parentWindow","vf","wf","na","xa","$a","ba","je","char","ke","xf","yf","zf","Af","Bf","Cf","Df","Ef","__html","Ff","Gf","Hf","Jf","queueMicrotask","If","Kf","Lf","Mf","previousSibling","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","E","G","Vf","H","Wf","Xf","Yf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Zf","childContextTypes","$f","ag","bg","getChildContext","cg","__reactInternalMemoizedMergedChildContext","dg","eg","fg","gg","hg","jg","kg","lg","mg","ng","og","pg","qg","rg","sg","tg","ug","vg","wg","xg","yg","I","zg","Ag","Bg","elementType","deletions","Cg","pendingProps","overflow","treeContext","retryLane","Dg","Eg","Fg","Gg","memoizedProps","Hg","Ig","Jg","Kg","Lg","defaultProps","Mg","Ng","Og","Pg","Qg","Rg","_currentValue","Sg","childLanes","Tg","dependencies","firstContext","lanes","Ug","Vg","memoizedValue","Wg","Xg","Yg","interleaved","Zg","$g","ah","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","bh","ch","lane","dh","K","eh","fh","gh","q","hh","ih","jh","Component","refs","kh","nh","isMounted","_reactInternals","enqueueSetState","L","lh","mh","enqueueReplaceState","enqueueForceUpdate","oh","shouldComponentUpdate","isPureReactComponent","ph","contextType","updater","qh","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","rh","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","sh","ref","_owner","_stringRef","th","uh","vh","wh","xh","yh","implementation","zh","Ah","done","Bh","Ch","Dh","Eh","Fh","Gh","Hh","Ih","tagName","Jh","Kh","Lh","M","Mh","revealOrder","Nh","Oh","_workInProgressVersionPrimary","Ph","ReactCurrentDispatcher","Qh","Rh","N","O","P","Sh","Th","Uh","Vh","Q","Wh","Xh","Yh","Zh","$h","ai","bi","ci","baseQueue","queue","di","ei","fi","lastRenderedReducer","hasEagerState","eagerState","lastRenderedState","dispatch","gi","hi","ii","ji","ki","getSnapshot","li","mi","R","ni","lastEffect","stores","oi","pi","qi","ri","destroy","deps","si","ti","ui","vi","wi","xi","yi","zi","Ai","Bi","Ci","Di","Ei","Fi","Gi","Hi","Ii","Ji","readContext","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","Ki","digest","Li","Mi","Ni","WeakMap","Oi","Pi","Qi","Ri","getDerivedStateFromError","componentDidCatch","Si","componentStack","Ti","pingCache","Ui","Vi","Wi","Xi","ReactCurrentOwner","Yi","Zi","$i","aj","bj","compare","cj","dj","ej","baseLanes","cachePool","transitions","fj","gj","hj","ij","jj","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","kj","lj","pendingContext","mj","Aj","Bj","Cj","Dj","nj","oj","pj","fallback","qj","rj","tj","dataset","dgst","uj","vj","_reactRetry","sj","subtreeFlags","wj","xj","isBackwards","rendering","renderingStartTime","tail","tailMode","yj","Ej","S","Fj","Gj","wasMultiple","multiple","suppressHydrationWarning","onClick","onclick","createElementNS","autoFocus","createTextNode","T","Hj","Ij","Jj","Kj","U","Lj","WeakSet","V","Mj","W","Nj","Oj","Qj","Rj","Sj","Tj","Uj","Vj","Wj","insertBefore","_reactRootContainer","Xj","X","Yj","Zj","ak","onCommitFiberUnmount","componentWillUnmount","bk","ck","dk","ek","fk","isHidden","gk","hk","display","ik","jk","kk","lk","__reactInternalSnapshotBeforeUpdate","Wk","mk","ceil","nk","pk","Y","Z","qk","rk","sk","tk","uk","Infinity","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","Ek","callbackNode","expirationTimes","expiredLanes","wc","callbackPriority","ig","Fk","Gk","Hk","Ik","Jk","Kk","Lk","Mk","Nk","Ok","Pk","finishedWork","finishedLanes","Qk","timeoutHandle","Rk","Sk","Tk","Uk","Vk","mutableReadLanes","Bc","Pj","onCommitFiberRoot","mc","onRecoverableError","Xk","onPostCommitFiberRoot","Yk","Zk","al","isReactComponent","pendingChildren","bl","mutableSourceEagerHydrationData","cl","cache","pendingSuspenseBoundaries","el","fl","gl","hl","il","jl","zj","$k","ll","reportError","ml","_internalRoot","nl","ol","pl","ql","sl","rl","unmount","unstable_scheduleHydration","querySelectorAll","form","tl","usingClientEntryPoint","ul","findFiberByHostInstance","bundleType","rendererPackageName","vl","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","wl","isDisabled","supportsFiber","inject","createPortal","dl","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrate","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","__self","__source","jsx","jsxs","setState","forceUpdate","escape","_status","default","Children","only","Fragment","Profiler","PureComponent","StrictMode","Suspense","cloneElement","createContext","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","createFactory","createRef","forwardRef","isValidElement","lazy","memo","startTransition","unstable_act","pop","sortIndex","setImmediate","priorityLevel","scheduling","isInputPending","MessageChannel","port2","port1","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","floor","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","unstable_wrapCallback","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","o","chunkId","reduce","promises","miniCssF","obj","inProgress","dataWebpackPrefix","script","needAttach","scripts","getElementsByTagName","getAttribute","charset","nc","onScriptComplete","prev","doneFns","fn","head","toStringTag","baseURI","self","installedChunks","installedChunkData","errorType","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","some","chunkLoadingGlobal","__rest","getOwnPropertySymbols","propertyIsEnumerable","__values","TypeError","__await","__asyncGenerator","thisArg","_arguments","generator","asyncIterator","verb","fulfill","settle","__asyncValues","SuppressedError","isTokenCredential","credential","castCredential","getToken","signRequest","listenersMap","abortedMap","AbortSignal","onabort","aborted","none","_type","_event","abortSignal","signal","AbortError","AbortController","parentSignals","_signal","parentSignal","abort","ms","timer","unref","StandardAbortMessage","delayInMs","onAborted","rejectOnAbort","abortErrorMsg","removeListeners","parseHeaderValueAsNumber","valueAsNum","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","createTokenCycler","tokenCyclerOptions","tenantId","refreshWorker","cycler","isRefreshing","shouldRefresh","expiresOnTimestamp","mustRefresh","refresh","scopes","getTokenOptions","getAccessToken","refreshTimeout","tryGetAccessToken","finalToken","beginRefresh","_token","tokenOptions","Boolean","claims","debugEnvVariable","process","DEBUG","enabledString","enabledNamespaces","skippedNamespaces","debuggers","enable","debugObj","namespace","createDebugger","disable","firstArg","namespaces","wildcard","namespaceList","ns","skipped","enabledNamespace","newDebugger","registeredLoggers","logLevelFromEnv","AZURE_LOG_LEVEL","azureLogLevel","AzureLogger","AZURE_LOG_LEVELS","isAzureLogLevel","level","logger","shouldEnable","setLogLevel","levelMap","verbose","warning","createClientLogger","clientRootLogger","patchLogMethod","createLogger","parent","bearerTokenAuthenticationPolicyName","defaultAuthorizeRequest","tracingOptions","accessToken","isObject","RedactedString","defaultAllowedHeaderNames","defaultAllowedQueryParameters","Sanitizer","additionalAllowedHeaderNames","allowedHeaderNames","additionalAllowedQueryParameters","allowedQueryParameters","sanitize","seen","sanitizeHeaders","sanitizeUrl","sanitizeQuery","sanitized","logPolicyName","ValidPhaseNames","HttpPipeline","policies","_policies","_orderedPolicies","addPolicy","policy","phase","afterPhase","removePolicy","removedPolicies","policyDescriptor","httpClient","getOrderedPolicies","reduceRight","req","pipeline","orderPolicies","policyMap","createPhase","hasRun","hasAfterPolicies","serializePhase","noPhase","deserializePhase","retryPhase","signPhase","orderedPhases","getPhase","descriptor","policyName","dependsOn","dependants","afterPolicies","afterPolicyName","afterNode","beforePolicies","beforePolicyName","beforeNode","walkPhase","dependant","walkPhases","iteration","initialResultLength","redirectPolicyName","allowedRedirect","redirectPolicy","maxRetries","handleRedirect","currentRetries","locationHeader","SDK_VERSION","DEFAULT_RETRY_POLICY_COUNT","getUserAgentValue","prefix","runtimeInfo","localNavigator","globalThis","userAgentData","setPlatformSpecificData","defaultAgent","telemetryInfo","getUserAgentString","UserAgentHeaderName","userAgentPolicyName","RetryAfterHeader","AllRetryAfterHeaders","getRetryAfterInMs","retryAfterValue","retryAfterHeader","diff","isFinite","DEFAULT_CLIENT_RETRY_INTERVAL","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","exponentialRetryStrategy","retryInterval","retryDelayInMs","maxRetryInterval","maxRetryDelayInMs","retryAfterInMs","retry","retryCount","responseError","matchedSystemError","isSystemError","ignoreSystemErrors","isExponential","isExponentialRetryResponse","ignoreExponentialResponse","ignoreHttpStatusCodes","unknownResponse","isThrottlingRetryResponse","skipStrategy","errorToThrow","exponentialDelay","pow","clampedExponentialDelay","retryPolicyLogger","retryPolicyName","retryPolicy","strategies","retryRequest","strategiesLoop","strategy","strategyLogger","modifiers","redirectTo","defaultRetryPolicyName","formDataPolicyName","importScripts","isDeno","Deno","deno","isNode","versions","Bun","product","setClientRequestIdPolicyName","tlsPolicyName","knownContextKeys","span","createTracingContext","TracingContextImpl","parentContext","initialContext","_contextMap","newContext","deleteValue","instrumenterImplementation","getInstrumenter","createRequestHeaders","parseTraceparentHeader","startSpan","_name","spanOptions","isRecording","recordException","setStatus","tracingContext","withContext","callbackArgs","hasName","hasMessage","getErrorMessage","stringified","custom","errorSanitizer","RestError","setPrototypeOf","REQUEST_SEND_ERROR","PARSE_ERROR","tracingPolicyName","tracingPolicy","userAgentPrefix","tracingClient","packageName","packageVersion","operationOptions","startSpanResult","updatedOptions","withSpan","traceparentHeader","createTracingClient","tryCreateTracingClient","spanKind","spanAttributes","tryCreateSpan","serviceRequestId","tryProcessResponse","tryProcessError","createPipelineFromOptions","tlsSettings","tlsOptions","proxyPolicy","proxyOptions","decompressResponsePolicy","formData","requestForm","FormData","formKey","formValue","subValue","append","URLSearchParams","userAgentValue","userAgentPolicy","userAgentOptions","requestIdHeaderName","setClientRequestIdPolicy","telemetryOptions","clientRequestIdHeaderName","defaultRetryPolicy","retryOptions","redirectOptions","coreLogger","sanitizer","logPolicy","loggingOptions","normalizeName","HttpHeadersImpl","rawHeaders","_headersMap","preserveCase","entry","values","normalizedName","headerIterator","createHttpHeaders","isReadableStream","getReader","tee","FetchHttpClient","allowInsecureConnection","proxySettings","abortController","abortControllerCleanup","abortListener","setupAbortSignal","pipelineHeaders","buildFetchHeaders","streaming","requestBody","pipe","isNodeReadableStream","buildBodyStream","onProgress","onUploadProgress","buildRequestBody","requestInit","Request","credentials","withCredentials","duplex","loadedBytes","httpResponse","responseHeaders","buildPipelineHeaders","bodyStream","onDownloadProgress","onEnd","streamResponseStatusCodes","POSITIVE_INFINITY","enableBrowserStreams","browserStreamBody","responseStream","Response","blobBody","bodyAsText","buildPipelineResponse","makeRequest","getError","readableStream","pipeThrough","TransformStream","isTransformStreamSupported","transform","controller","terminate","flush","ReadableStream","pull","releaseLock","cancel","createDefaultHttpClient","apiVersionPolicyName","keyCredentialAuthenticationPolicyName","cachedHttpClient","addCredentialPipelinePolicy","baseUrl","clientOptions","tokenPolicy","challengeCallbacks","callbacks","authorizeRequest","authorizeRequestOnChallenge","challenge","getChallenge","bearerTokenAuthenticationPolicy","isKeyCredential","apiKeyHeaderName","keyPolicy","keyCredentialAuthenticationPolicy","createDefaultPipeline","apiVersionPolicy","getCachedDefaultHttpsClient","generateUUID","randomNumber","uuidFunction","PipelineRequestImpl","disableKeepAlive","binaryArrayToString","decodedBody","customHttpClient","buildPipelineRequest","parsedBody","firstType","bodyToParse","errCode","createParseError","getResponseBody","onResponse","sendRequestAsStream","responseAsStream","readableStreamBody","getContentType","isFormData","processFormData","getRequestBody","hasContent","createPipelineRequest","accept","processedFormData","buildRequestUrl","routePath","pathParameters","pathParams","skipUrlEncoding","replaceAll","buildBaseUrl","pathParam","buildRoutePath","requestUrl","searchPieces","skipQueryParameterEncoding","appendQueryParams","searchValue","replaceValue","getClient","credentialsOrPipelineOptions","isCredential","additionalPolicies","position","client","getUrl","buildOperation","post","put","patch","trace","pathUnchecked","onFulfilled","onrejected","asBrowserStream","asNodeStream","userAgentInfo","operationOptionsToRequestParameters","responseMap","isUnexpected","lroOriginal","pathDetails","pathParts","matchedLen","matchedValue","candidatePath","getPathFromMapKey","candidateParts","found","getParametrizedPathSuccess","mapKey","pathStart","getOperationLocationPollingUrl","inputs","azureAsyncOperation","operationLocation","getLocationHeader","rawResponse","getOperationLocationHeader","getAzureAsyncOperationHeader","findResourceLocation","requestMethod","requestPath","resourceLocationConfig","getDefault","inferLroMode","pollingUrl","normalizedRequestMethod","toLocaleUpperCase","resourceLocation","transformStatus","toOperationStatus","parseRetryAfter","retryAfter","retryAfterInSeconds","retryAfterDate","timeNow","getTime","retryAfterTime","calculatePollingIntervalFromDate","getErrorFromResponse","flatResponse","getStatusFromInitialResponse","getOperationStatus","helper","getOperationLocation","_ref4","_ref5","getStatus","provisioningState","getProvisioningState","getResourceLocation","_ref6","isOperationError","POLL_INTERVAL_IN_MS","terminalStates","setStateError","stateProxy","setError","setFailed","appendReadableErrorMessage","currentMessage","innerMessage","processOperationStatus","isDone","processResult","setErrorAsResult","setSucceeded","postfix","curErr","innererror","simplifyError","errStr","setCanceled","setResult","buildResult","pollOperation","poll","withOperationLocation","getPollingInterval","updateState","setDelay","pollOperationHelper","intervalInMs","isUpdated","timeInMs","buildPromise","cleanupBeforeAbort","onAbort","createAbortablePromise","createStateProxy","initState","setRunning","isCanceled","isFailed","isRunning","isSucceeded","buildCreatePoller","getStatusFromPollResponse","resolveOnUnsuccessful","withOperationLocationCallback","restoreFrom","called","serializedState","deserializeState","initOperation","resultPromise","handlers","cancelErrMsg","currentPollIntervalInMs","poller","getOperationState","isStopped","stopPolling","pollUntilDone","pollOptions","inputAbortSignal","pollIntervalInMs","handleProgressEvents","getLongRunningPoller","initialResponse","sendInitialRequest","getLroResponse","sendPollRequest","lroResponse","lro","_ref2","createHttpPoller","getPromptFilterResult","promptFilterResults","promptIndex","content_filter_results","contentFilterResults","deserializeContentFilter","getCompletionsResult","created","choices","logprobs","tokens","tokenLogprobs","topLogprobs","finishReason","getChatCompletionsResult","_deserializeMessage","delta","usage","completionTokens","completion_tokens","promptTokens","prompt_tokens","totalTokens","total_tokens","role","function_call","functionCall","messages","sexual","severity","filtered","violence","hate","self_harm","selfHarm","iterateSseStream","chunkIter","lineIter","createMessage","decoder","TextDecoder","lineIter_1_1","lineIter_1","fieldLen","field","decode","subarray","valueOffset","toMessage","bufIdx","discardTrailingNewline","chunkIter_1_1","chunkIter_1","concatBuffer","bufLen","toLine","toAsyncIterable","ensureAsyncIterable","wrapError","cause","renameKeysToCamelCase","newKey","group","getSSEs","iter","buffers","concatBuffers","streamToText","getStream","len","acc","curr","getBuffersLength","getOaiSSEs","toEvent","stream_1_1","stream_1","createFile","getEmbeddings","deploymentId","user","_getEmbeddingsSend","embedding","_getEmbeddingsDeserialize","_getCompletionsSend","prompt","max_tokens","maxTokens","temperature","top_p","topP","logit_bias","logitBias","echo","presence_penalty","presencePenalty","frequency_penalty","frequencyPenalty","best_of","bestOf","getCompletions","_t","_s","_v","_u","_getCompletionsDeserialize","_getChatCompletionsWithAzureExtensionsSend","parseChatMessage","functions","dataSources","getImages","response_format","responseFormat","_beginAzureBatchImageGenerationSend","getImageResultsDeserialize","base64Data","b64_json","convertResultTypes","_getChatCompletionsSendX","deploymentName","azureExtensionOptions","extensions","_getChatCompletionsSend","getAudioTranslation","fileContent","formatOrOptions","inputOptions","rest","getAudioTranscription","OpenAIClient","endpointOrOpenAiKey","credOrOptions","opts","cred","_isAzure","isCred","restOpts","_client","createOpenAI","setModel","listCompletions","getChatCompletions","listChatCompletions","AzureKeyCredential","update","lastPrompt","setLastPrompt","responseData","setResponseData","isPlaying","setIsPlaying","textToSpeech","textToSpeak","sdk","myPlayer","audioStartRef","React","audioEndRef","_jsxs","className","_jsx","maxWidth","border","boxShadow","margin","generatedPrompt","sttFromMic","sendChatGptRequest","packagejson","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","App","reportWebVitals"],"sourceRoot":""}